<?php

use Drupal\Core\Menu\MenuLinkInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Url;
use Drupal\Core\Database\Database;
use Drupal\oab_dvi\DviHelper;

use Drupal\paragraphs\Entity\Paragraph;


function oab_frontoffice_preprocess_menu(&$variables) {
  if (isset($variables['items'])
    && is_array($variables['items'])) {
    foreach ($variables['items'] as &$item) {
      $menuLinkEntity = oab_frontoffice_load_link_entity_by_link($item['original_link']);
      if (!empty($menuLinkEntity)) {
        if (!empty($menuLinkEntity->link->first()->options['target'])) {
          $item['url']->setOption('target', $menuLinkEntity->link->first()->options['target']);
        }
      }
    }
  }
}


/**
 * Préparation du JS pour la génération des liens "Shares"
 * @param $variables
 */
function oab_frontoffice_preprocess_node(&$variables) {


  ##Pour les documents FR, j'ajoute un formulaire à la mano
  if ($variables['node']->bundle() == 'document') {
    $currentLanguageCode = \Drupal::languageManager()
      ->getCurrentLanguage()
      ->getId();

    ##Je charge le webform juste pour les contenus fr
    if($currentLanguageCode == 'fr') {
      $form = \Drupal\webform\Entity\Webform::load('telechargement_documents');
      $form_output = \Drupal::entityManager()
        ->getViewBuilder('webform')
        ->view($form);
      $variables['form_dlFile'] = $form_output;

    }

  }



  if (isset($variables["elements"]["#contextual_links"]["node"]["route_parameters"]["node"])) {

    ##Collecte de toutes les données nécessaires

    #Je recupère le nid puis je charge le node associé
    $nid = $variables["elements"]["#contextual_links"]["node"]["route_parameters"]["node"];
    $node = \Drupal\node\Entity\Node::load($nid);

    if (is_null($node) || $node === false)
      return;

    $meta_description = "";
    ##Je recupère le field_meta_description s'il existe
    if ($node->hasField('field_meta_decription')){
      $meta_description = $node->get('field_meta_description')->getValue();
    }

    $node_title = isset($variables["label"][0]["#context"]["value"]) ? $variables["label"][0]["#context"]["value"] : '';

		$og_image = $file = "";
		if ($node->hasField('field_visual')){
				$file = $node->get('field_visual')->getValue();
				if(!empty($file[0]['target_id']) && $file[0]['target_id'] != null){
						$file = \Drupal\file\Entity\File::load($file[0]['target_id']);
						if($file instanceof \Drupal\file\Entity\File){
							$og_image = $file->url();
						}
				}
		}

    #J'enregistre mes urls et variables OG pour les avoir en JS
    $variables['#attached'] = [
      'drupalSettings' => [
        'myLibrary' => getSocialBarParameters($node_title, $meta_description, $og_image)
      ],
    ];
  }
}

function oab_frontoffice_load_link_entity_by_link(MenuLinkInterface $menuLinkContentPlugin) {
  $entity = NULL;
  if ($menuLinkContentPlugin instanceof Drupal\menu_link_content\Plugin\Menu\MenuLinkContent) {
    list($entity_type, $uuid) = explode(':', $menuLinkContentPlugin->getPluginId(), 2);
    $entity = \Drupal::entityManager()->loadEntityByUuid($entity_type, $uuid);
  }
  return $entity;
}

function oab_frontoffice_link_alter(&$variables){
  $languages = \Drupal::languageManager()->getLanguages();

  if (isset($variables['url'])){
    try{
      $uri = $variables['url']->getUri();

      foreach($languages AS $key => $value) {
        $langcode = $value->getId();

        if ($uri === 'base:<front_' . $langcode . '>'){
          $new_url = \Drupal\Core\Url::fromRoute('<front>', array(), array());
          $variables['options']['language'] = $value;
          $variables['url'] = $new_url;
        }
      }
    }
    catch(\UnexpectedValueException $e){

    }
  }
}


/**
 * Implements hook_entity_view_alter().
 * @param array $build
 * @param EntityInterface $entity
 * @param EntityViewDisplayInterface $display
 */
function oab_frontoffice_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Cheking view_mode for node.
  if ($entity->getEntityType()->id() == 'node') {
    if (!empty($build['#attached']['html_head_link'])) {
      _remove_header_links($build);
    }
  }
}

function _remove_header_links(array &$attachments) {
  // Cheking html_head on attached tags in head.
  if (!isset($attachments['#attached']['html_head_link'])) {
    return;
  }

  // Array to unset.
  $unset_html_head_link = [
    'shortlink',
    'delete-form',
    'edit-form',
    'version-history',
    'revision',
    'display',
    'drupal:content-translation-overview',
    'drupal:content-translation-add',
    'drupal:content-translation-edit',
    'drupal:content-translation-delete',
  ];
  // Unset loop.
  foreach ($attachments['#attached']['html_head_link'] as $key => $value) {
    if (isset($value[0]['rel']) && in_array($value[0]['rel'], $unset_html_head_link)) {
      unset($attachments['#attached']['html_head_link'][$key]);
    }
  }
}

function oab_frontoffice_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display)
{

    if ($entity->bundle() == 'product') {
        //on deserialise les données à passer au template
        $field_axiome_data = isset($entity->field_axiome_data) ? unserialize($entity->field_axiome_data->value) : array();
        if (count($field_axiome_data) > 0) {
            $build['axiome_data'] = $field_axiome_data;
            $build['axiome_data']['sous_famille'] = \Drupal\oab_axiome\Controller\OabAxiomeController::getSousFamille($entity->id());
        }
    }

    if ($build['#view_mode'] == 'full') {
        $content_type = $entity->bundle();
        if (in_array($content_type, array('magazine', 'blog_post', 'document', 'simple_page', 'full_html'))) {
            $theme_term = '';

            $field_solution = isset($entity->field_solution) ? $entity->field_solution->getValue() : array();
            $field_industry = isset($entity->field_industry) ? $entity->field_industry->getValue() : array();
            $field_insight = isset($entity->field_insight) ? $entity->field_insight->getValue() : array();

            $field_blog_thematic = isset($entity->field_blog_thematic) ? $entity->field_blog_thematic->getValue() : array();
            $field_document_thematic = isset($entity->field_document_thematic) ? $entity->field_document_thematic->getValue() : array();
            $field_magazine_thematic = isset($entity->field_magazine_thematic) ? $entity->field_magazine_thematic->getValue() : array();

            if (!empty($field_insight)) {
                $theme_term = $field_insight[0]['target_id'];
            } elseif (!empty($field_blog_thematic)) {
                $theme_term = $field_blog_thematic[0]['target_id'];
            } elseif (!empty($field_document_thematic)) {
                $theme_term = $field_document_thematic[0]['target_id'];
            } elseif (!empty($field_magazine_thematic)) {
                $theme_term = $field_magazine_thematic[0]['target_id'];
            } elseif (!empty($field_industry)) {
                $theme_term = $field_industry[0]['target_id'];
            } elseif (!empty($field_solution)) {
                $theme_term = $field_solution[0]['target_id'];
            }

            if ($theme_term != '') {
                $term = \Drupal\taxonomy\Entity\Term::load($theme_term);
                //oabt($term, true);
                if (isset($term)) {
                    $build['theme_term'] = array(
                        '#markup' => $term->getName(),
                        'id' => $term->id(),
                    );
                }
            }
        }

        if ($content_type == 'homepage_eclairage') {

            $menu_tree = \Drupal::menuTree();
            $menu_name = 'menu-homepage-eclairage';

            // Build the typical default set of menu tree parameters.
            $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

            // Load the tree based on this set of parameters.
            $tree = $menu_tree->load($menu_name, $parameters);

            // Finally, build a renderable array from the transformed tree.
            $menu = $menu_tree->build($tree);

            $menu_html = \Drupal::service('renderer')->render($menu);
            //oabt($menu, true);
            $build['menu_homepage_eclairage'] = $menu;


            //first paragraph
            $firstParagraph = $entity->field_home_banner[0]->entity;
                // Access the paragraph entity like this:

           //oabt($firstParagraph->get('field_title')->getValue(), false);


           // $paragraphHomeBannerFirst = $entity->node.field_home_banner ;
           // $paragraph = Paragraph::load($paragraphHomeBannerFirst);
           // $field_title = $paragraph->field_title->value;
            //oabt($field_title, true);

            $build['firstbanner_homepage_eclairage'] = $firstParagraph->get('field_title')->getValue();


            $taxonomyId = $entity->field_home_playlists[0]->entity->get('field_playlist_taxonomy_term')->getValue() ;//[0]['target_id'];
            //var_dump(intval($taxonomyId));

            $build['taxonomy'][count($build['taxonomy'])] = $taxonomyId;
        }
    }
}


/**
 * cleane les options du menu déroulant des filtres exposés
 * @param $options du tableau
 */
function clean_exposed_filters_by_language($options, $txtAll){
	$current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
	foreach($options as $key=>$value){
		if($key != 'All'){
			$term = \Drupal\taxonomy\Entity\Term::load($key);
			if(isset($term) && $term != null) {
				$lang = $term->language();
				if ( $lang->getId() != $current_language ) {
					unset( $options[ $key ] );
				}
			}
		}else{
			$options['All'] = t($txtAll);
		}
	}
	return $options;
}

/**
 * Implements hook_views_query_alter().
 */
function oab_frontoffice_views_query_alter(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query){

    ## CARTE
    if ($view->id() == 'offices_map_view'){
    $language = \Drupal::languageManager()->getCurrentLanguage();
    $language_id = $language->getId();

    // Modification du trie sur les maps qui ne sont pas sur une page "ru"
    // On enlève le "order by sticky" dans ce cas là
    // On doit faire ça à cause du fonctionnement de la view et des traductions
    // le sticky doit être enregistré au niveau du contenu principal, pas dans ses traductions
    if(isset($query->orderby)
    && !empty($query->orderby)){
      foreach ($query->orderby AS $key=>$value){
        if (is_array($value)
        && isset($value['field'])
        && $value['field'] == "node_field_data_sticky"
          && $language_id != "ru"){
          unset($query->orderby[$key]);
        }
      }
    }
  }

/*
    ## Filtre sur la subhome distributeur
    $displayObj = $view->getDisplay();
    $displayId = $displayObj->display['id'];
   if ( ($view->id() == 'subhomes' && ($displayId == 'page_distributor' || $displayId == 'page_products'))
            || $view->id() == 'product_autocomplete') {

        $terms_ids = DviHelper::getMSTaxoTermsIds();

        if (count($terms_ids)>0) {
           $conditions = new Drupal\Core\Database\Query\Condition('or');

           $table_name = "node__field_market_segment";
           $field_name = "field_market_segment_target_id";
           $tables = array();
           foreach ($terms_ids as $key => $term_id) {

               $joinConfig = [
                   'table' => $table_name,
                   'left_field' => 'nid',
                   'field' => 'entity_id',
                   'extra' => [
                       [
                           'field' => 'deleted',
                           'value' => 0,
                           'numeric' => true
                       ],
                       [
                           'left_field' => "langcode",
                           'field' => "langcode",
                       ]

                   ],
                   'left_table' => 'node_field_data',
                   'type' => 'LEFT',
                   'extra_operator' => 'AND',
               ];


               $join = new \Drupal\views\Plugin\views\join\Standard(
                   $joinConfig,
                   "standard",
                   [
                       'plugin_type' => "join",
                       'id' => "standard",
                       'class' => 'Drupal\views\Plugin\views\join\Standard',
                       'provider' => 'views'
                   ]
               );

               $join->extra = [
                   [
                       'field' => $field_name,
                       'value' => $term_id,
                       'numeric' => false
                   ]
               ];

               $table_alias = $query->addTable(
                   $table_name,
                   "node_field_data",
                   $join
               );

               if ($table_alias !== false && is_string($table_alias)) {
                   $conditions->condition(
                       "$table_alias.$field_name",
                       $term_id,
                       '='
                   );
               }

           }

           $query->addWhere(1, $conditions);

       }
    }
*/

}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function oab_frontoffice_form_views_exposed_form_alter(&$form, &$form_state) {
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if (strpos($form['#id'], 'views-exposed-form-subhomes') !== false) {
    if ( isset($form['actions']['submit']['#value']) ) {
      if ($current_language == 'fr') {
         $form['actions']['submit']['#value'] = "Filtrer";
      } elseif ($current_language == 'ru') {
        $form['actions']['submit']['#value'] = "Найти";
      }
    }

    foreach ($form AS $key => $value){
      if (isset($value['#type'])
      && $value['#type'] == "textfield"){
        $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::load($key);
        if (is_object($vocabulary)){
          $terms = \Drupal::entityManager()->getStorage('taxonomy_term')->loadByProperties([
            'vid' => $key,
            'langcode' => $current_language
          ]);
          if (is_array($terms)
          && !empty($terms)){
            $options = array('All' => t($vocabulary->get('name')));
            foreach ($terms AS $term){
              $term_name = $term->getName();
              $options[$term_name] = $term_name;
            }
            $form[$key]['#type'] = "select";
            $form[$key]['#options'] = $options;
            $form[$key]['#default_value'] = 'All';
            $form[$key]['#validated'] = TRUE;
            $form[$key]['#size'] = null;
          }
          else{
            unset($form[$key]);
          }
        }
      }
    }
  }

  // subhome blogs
  if ($form['#id'] == 'views-exposed-form-subhomes-page-blog') {
    if (isset($form['blog_thematics'])){
      $form['blog_thematics']['#options']['All'] = t('Thematic');
    }
    if (isset($form['blog_formats'])){
      $form['blog_formats']['#options']['All'] = t('Type');
    }

    // HACK POUR LA SORTIE
    if($current_language == 'en'
    || $current_language == 'ru'){
        unset($form['blog_formats']);
    }
  }

  // subhome magazine
  if ($form['#id'] == 'views-exposed-form-subhomes-page-magazine') {
    if (isset($form['magazine_thematics'])){
      $form['magazine_thematics']['#options']['All'] = t('Thematic');
    }
    if (isset($form['magazine_types'])){
      $form['magazine_types']['#options']['All'] = t('Type');
    }

    //Suppression ees filtres format, metier et industry pour la subhome RU
    if($current_language == 'en'
    || $current_language == 'ru'){
      unset($form['magazine_types']);
    }
  }

  // subhome mediatheque
  if ($form['#id'] == 'views-exposed-form-subhomes-page-document') {
    if (isset($form['document_thematics'])){
      $form['document_thematics']['#options']['All'] = t('Thematic');
    }
    if (isset($form['document_types'])){
      $form['document_types']['#options']['All'] = t('Type');
    }

    // HACK POUR LA SORTIE
    if($current_language == 'fr' ){
        // on supprime "eBook"
        unset($form['field_document_type_target_id']['#options']['E-book']);
    }
    if($current_language == 'en' ){
        // on supprime "position paper"
        unset($form['field_document_type_target_id']['#options']['Position paper']);
    }
  }

  // subhome presse
  if ($form['#id'] == 'views-exposed-form-subhomes-page-press') {
    if (isset($form['solutions'])){
      $form['solutions']['#options']['All'] = t('Solution');
    }
    if (isset($form['press_formats'])){
      $form['press_formats']['#options']['All'] = t('Type');
    }

    //Suppression de filtres pour le russe
    if($current_language == 'ru' ){
      unset($form['press_formats']);
    }
  }

  // subhome produits
  if ($form['#id'] == 'views-exposed-form-subhomes-page-catalogue') {
    if (isset($form['solutions'])){
      $form['solutions']['#options']['All'] = t('Solution');
    }
    if (isset($form['industries'])){
      $form['industries']['#options']['All'] = t('Industry');
    }
    if (isset($form['jobs_profiles'])){
      $form['jobs_profiles']['#options']['All'] = t('Profession');
    }

    //Suppression de filtres pour le russe
    if($current_language == 'ru'
    || $current_language == 'en'){
      unset($form['industries']);
      unset($form['jobs_profiles']);
    }
    // HACK POUR LA SORTIE
    if($current_language == 'fr' ){
      // on supprime "ressources et énergie" et "transport"
        unset($form['industries']['#options']["ressources et énergie"]);
        unset($form['industries']['#options']["transport"]);
    }
  }
  // subhome temoignages
  if ($form['#id'] == 'views-exposed-form-subhomes-page-customer') {
    if (isset($form['solutions'])){
      $form['solutions']['#options']['All'] = t('Solution');
    }
    if (isset($form['industries'])){
      $form['industries']['#options']['All'] = t('Industry');
    }
    if (isset($form['jobs_profiles'])){
      $form['jobs_profiles']['#options']['All'] = t('Profession');
    }

    // HACK POUR LA SORTIE
    if($current_language == 'fr' ){
        // on supprime "ressources et énergie" et "transport"
        unset($form['industries']['#options']["ressources et énergie"]);
        unset($form['industries']['#options']["transport"]);
    }
    if($current_language == 'ru' ){
        unset($form['industries']);
    }
  }
  // subhome partenaires
  if ($form['#id'] == 'views-exposed-form-subhomes-page-partners') {
    if (isset($form['solutions'])){
      $form['solutions']['#options']['All'] = t('Solution');
    }
    if (isset($form['partners_types'])){
      $form['partners_types']['#options']['All'] = t('Category');
    }
  }

    //Subhome Distributors
    if ($form['#id'] == 'views-exposed-form-subhomes-page-distributor') {
        $solutions = clean_exposed_filters_by_language(
            $form['field_solution_target_id']['#options'],
            'Solution'
        );
        $form['field_solution_target_id']['#options'] = $solutions;

        $departements = clean_exposed_filters_by_language(
            $form['field_departments_target_id']['#options'],
            'Departements'
        );
        $form['field_departments_target_id']['#options'] = $departements;

    }


    // view Page thématique
    if ($form['#id'] == 'views-exposed-form-page-thematique-block-1') {
        $insight = clean_exposed_filters_by_language(
            $form['field_insight_target_id']['#options'],
            'Insight'
        );
        $form['field_insight_target_id']['#options'] = $insight;

        $profession = clean_exposed_filters_by_language(
            $form['field_job_profile_target_id']['#options'],
            'Profession'
        );
        $form['field_job_profile_target_id']['#options'] = $profession;

        $industry = clean_exposed_filters_by_language(
            $form['field_industry_target_id']['#options'],
            'Industry'
        );
        $form['field_industry_target_id']['#options'] = $industry;

        $region = clean_exposed_filters_by_language(
            $form['field_region_target_id']['#options'],
            'Geography'
        );
        $form['field_region_target_id']['#options'] = $region;

        if($current_language != 'en'){
            unset($form['field_region_target_id']);
        }
    }

}


function oab_frontoffice_views_post_render($view) {
    if ($view->id() !== 'VIEW_ID' && $view->getDisplay()->getPluginId() !== 'page') {
        return;
    }
    $request = \Drupal::request();

    if ($view->id() == 'subhomes') {
        if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)){
            // on recupere les valeurs dans oab.subhomes
            $connection = Database::getConnection();
            $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
            $collection = '';
            if($current_language == "fr") {
                $collection = 'language.fr';
            }
            if($current_language == "ru") {
                $collection = 'language.ru';
            }
            $sth = $connection->select('config', 'c')
                ->fields('c', array('data'))
                ->condition('name', 'oab.subhomes')
                ->condition('collection', $collection);
            $data = $sth->execute();
            $results = $data->fetchAll(\PDO::FETCH_OBJ);
            if(count($results) > 0) {
                $data = unserialize($results[0]->data);
                switch ($view->current_display) {
                    case 'page_press':
                        $route->setDefault('_title', $data['press_meta']);
                        $view->setTitle($data['press_meta']);
                        break;
                    case 'page_partners':
                        $route->setDefault('_title', $data['partner_meta']);
                        $view->setTitle($data['partner_meta']);
                        break;
                    case 'page_customer':
                        $route->setDefault('_title', $data['customer_meta']);
                        $view->setTitle($data['customer_meta']);
                        break;
                    case 'page_document':
                        $route->setDefault('_title', $data['library_meta']);
                        $view->setTitle($data['library_meta']);
                        break;
                    case 'page_blog':
                        $route->setDefault('_title', $data['blog_meta']);
                        $view->setTitle($data['blog_meta']);
                        break;
                    case 'page_magazine':
                        $route->setDefault('_title', $data['magazine_meta']);
                        $view->setTitle($data['magazine_meta']);
                        break;
                    case 'page_catalogue':
                        $route->setDefault('_title', $data['product_meta']);
                        $view->setTitle($data['product_meta']);
                        break;
                }
            }
        }
    }
}

function oab_frontoffice_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
  if ($route_match && $node = $route_match->getParameter('node')) {
    $breadcrumb->addCacheableDependency($node);
  }
}

/**
 * Suppression du cache pour les produits DVI lorsqu'on veut l'affichage subhome
 * pour pouvoir changer l'URL. Si on ne le fait pas, le changement de view_mode par
 * la fonction "theme_boosted_preprocess_views_view" ne fonctionne pas, car c'est caché
 * @param array $build
 * @param \Drupal\node\Entity\Node $entity
 * @param $view_mode
 */
function oab_frontoffice_node_build_defaults_alter(array &$build, \Drupal\node\Entity\Node $entity, $view_mode) {
    if ($entity->bundle() == "product"
        && DviHelper::isDVIProduct($entity)
        && ($view_mode == "subhome" || $view_mode == "subhome_distributeur")) {
            $build["#cache"] = array();

    }
}


/**
 * Implements hook_theme().
 */
function oab_frontoffice_theme($existing, $type, $theme, $path) {
	$theme = array();
	$theme['custom-righticonblock'] = array(
		'variables' => array(
			'synomiaSearchForm' => array(),
		),
		'template' => 'block--righticonblock-custom'
	);
	return $theme;
}


function getSocialBarParameters($pageTitle, $meta_description, $og_image)
{
	global $base_root;
	$current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
	$og_url = $base_root . \Drupal::request()->getRequestUri();

	##Je fais un tableau de toutes mes données nécessaires pour la création des urls "share"
	## pour chaque site
	$siteData = [
		'twitter' => [
			'url' => "http://www.twitter.com/intent/tweet",
			'params' => [
				'text' => $pageTitle,
				'url' => $og_url,
				'hashtags' => '',
				'via' => 'orangebusiness',
				'related' => '',
				'in-reply-to' => ''
			]
		],
		'facebook' => [
			'url' => "https://www.facebook.com/sharer/sharer.php",
			"params" => [
				'u' => $og_url
			]
		],
		'linkedin' => [
			'url' => "https://www.linkedin.com/shareArticle",
			'params' => [
				'mini' => 'true',
				'url' => $og_url,
				'title' => $pageTitle,
				'summary' => $meta_description,
				'source' => $og_url
			]
		],
		'rss_blogs' => [
			'url' => "/".$current_language."/blogs/rss.xml",
			'params' => []
		],
		'rss_magazine' => [
			'url' => "/".$current_language."/magazine/rss.xml",
			'params' => []
		],
		'rss_presse' => [
			'url' => "/".$current_language."/press/feed_rss.xml",
			'params' => []
		],
	];

	## Pour traiter les mails plus tard
	$mail = [
		'subject' => 'Viens voir sur Orange-Business.com',
		'body' => '<html><body><h1>Coucou c\'est un test</body></html>'
	];

	##Pour enregistrer les adresses recomposées
	$siteUrls = [];

	##je recompose les URLs share
	foreach ($siteData as $site => $data) {
		$paramsString = "";
		foreach ($data['params'] as $paramName => $value) {
			if (is_string($value) && strlen($value)>0)
				$paramsString .= $paramName . "=" . rawurlencode($value) . "&";
		}
		$siteUrls[$site] = $data['url'];
		if($paramsString != "") {
			$siteUrls[$site] .= "?"
				. rtrim($paramsString, "&");
		}
	}

	$current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
	switch($current_language){
		case 'fr':
			$og_locale = 'fr_FR';
			break;
		case 'en':
		case 'ru-en':
			$og_locale = 'en_US';
			break;
		case 'ru':
			$og_locale = 'ru_RU';
			break;
		default:
			$og_locale = 'fr_FR';
			break;
	}

	#J'enregistre mes urls et variables OG pour les avoir en JS
	$array_sharbar = array(
		'share_siteUrls' => $siteUrls,
		'og_locale' => $og_locale,
		'og_title' => $pageTitle,
		'og_desc' => $meta_description,
		'og_url' => $og_url,
		'og_image' => $og_image
	);
	return $array_sharbar;
}

function oab_frontoffice_mail_alter(&$message) {
    for($i = 0; $i < count($message["body"]); $i++){
        $message["body"][$i] = str_replace("http://", "https://", $message["body"][$i]);
    }
}

function oab_frontoffice_form_alter(&$form,\Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (isset($form['#webform_id']) && $form['#webform_id'] == "telechargement_documents") {

    foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          array_unshift($form['actions'][$action]['#submit'],'oab_frontoffice_telechargement_documents_form_submit' );
        }
    }
  } elseif (isset($form['#webform_id']) && $form['#webform_id'] == "dvi_contact_distributor") {

      foreach (array_keys($form['actions']) as $action) {

          if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
              array_unshift($form['actions'][$action]['#submit'],'oab_frontoffice_dvi_contact_distributor_form_submit' );
          }
      }
  }
}

/**
 * Fonction pour générer l'URL du fichier demandé
 *
 * Comme le fichier ne peut etre télécharger qu'après soumission du formulaire,
 * je ne passe que le nid dans le formulaire et je génère l'url du fichier lors de la soumission
 *
 * L'URL du fichier est nécessaire pour générer les mails et messages dans lesquels l'utilisateur peuvent dl les fichiers
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormState $form_state
 */
function oab_frontoffice_telechargement_documents_form_submit(array $form, Drupal\Core\Form\FormState &$form_state) {

    $node = \Drupal::routeMatch()->getParameter('node');
    if (NULL !== $node && $node instanceof \Drupal\node\NodeInterface) {

      ##Je tente de récuper le field_file du node d'origine
      if (NULL !== $field_file = $node->get('field_file')) {

        ##On load l'entity media contenant le fichier (c'est lui qui est dans le field du contenu de type document)
        $field_value = $field_file->getValue();
        $media = \Drupal\media_entity\Entity\Media::load($field_value[0]['target_id']);

        ##On load le file contenu dans l'entity media
        $file_value = $media->get('field_file')->getValue();
        $file_id = $file_value[0]['target_id'];
        $file_url = file_create_url(\Drupal\file\Entity\File::load($file_id)
          ->getFileUri());
        ##je remplace la valeur d'url_du_fichier par l'url générée
        $form_state->setValue('url_du_fichier', $file_url);
      }
    }


}

function oab_frontoffice_dvi_contact_distributor_form_submit(array $form, Drupal\Core\Form\FormState &$form_state) {

    $node = \Drupal::routeMatch()->getParameter('node');
    if (NULL !== $node && $node instanceof \Drupal\node\NodeInterface) {
        if ($node->bundle() == 'distributor') {
            $field_distrib_email = $node->get('field_email_address');

            $distribMail = "";
            if(isset($field_distrib_email[0])) {
                $value = $field_distrib_email[0]->getValue();
                $distribMail = $value['value'];
            }

            $form_state->setValue('distributeur_email', $distribMail);
            $form_state->setValue('distributeur_name', $node->getTitle());
            $form_state->setValue('distributeur_nid', $node->id());
        }

    }

}

/**
 * Modification des metatags pour rediriger les contenus 'homepage" vers la home du site, et pas le noeud "homepage"
 *
 * @param array $attachments
 */
function oab_frontoffice_page_attachments_alter(array &$attachments)
{
  $node = \Drupal::routeMatch()->getParameter('node');
  if (NULL !== $node && $node instanceof \Drupal\node\NodeInterface) {
    if ($node->bundle() == 'homepage') {
      if (isset($attachments["#attached"]['html_head_link'])) {
        $attachments["#attached"]['html_head_link'] = __seek_alternate($attachments["#attached"]['html_head_link']);
      }
    }
  }
}

/**
 * Petite fonction recursive pour trouver l'element cherché dans la fonction précédente
 * (C'est un tableau avec des sous tableaux, c'etait plus simple à faire en recursif)
 * @param $tab
 * @return array
 */
function __seek_alternate($tab) {
  if (isset($tab['rel']) && $tab['rel'] == "alternate") {
    $tab['href'] = Url::fromRoute('<front>')->toString();
  } elseif (is_array($tab)) {
    foreach ($tab as $key => $value) {
      $tab[$key] = __seek_alternate($value);
    }
  }

  return $tab;
}


/*******************************************************************************************************************/
/*************** METHODES POUR LES CARTES D'OFFICES QUI DOIVENT ETRE ACCESSIBLES PARTOUT (multi-JIRA) *************/
/*******************************************************************************************************************/


/**
 * Méthode qui renvoie le tableau des pays pour remplir le filtre Pays en JS
 * @return array
 */
function getCountriesForJS(){
	$keys = array();
	$query = Database::getConnection()->select('node_field_data', 'n');
	$query->leftjoin('node__field_office_country', 'c', 'n.nid = c.entity_id');
	$query->leftjoin('taxonomy_term_field_data', 'oc', 'oc.tid = c.field_office_country_target_id');
	$query->condition('n.type', 'office', '=');
	$query->condition('n.status', 1, '=');
	$query->addField('oc', 'tid', 'country_tid');
	$query->addField('oc', 'name', 'country_name');
	$query->addField('oc', 'langcode', 'country_langcode');
	$query->orderBy('oc.name');
	$results =	$query->execute()->fetchAll();

	$current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
	$table_countries = array();
	$table_countries['all'] = t('Country');
	foreach ($results as $country){
		if(!in_array($country->country_tid, $keys) && !empty($country->country_tid) && $country->country_langcode == $current_language){
			$keys[] = $country->country_tid;
			$table_countries[] = array('id' => $country->country_tid, "name" => $country->country_name);
		}
	}
	//pour ceux qui n'ont pas de traduction, on prend le libellé sans restriction de langue
	foreach ($results as $country){
		if(!in_array($country->country_tid, $keys) && !empty($country->country_tid)){
			$keys[] = $country->country_tid;
			$table_countries[] = array('id' => $country->country_tid, "name" => $country->country_name);
		}
	}
	return $table_countries;
}

/**
 * Méthode qui renvoie le tableau d'association [country id] => region_id
 * @return array
 */
function getArrayRegionsCountries() {
	$current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();

	$query = Database::getConnection()->select('node_field_data', 'n');
	$query->leftjoin('node__field_office_country', 'c', 'n.nid = c.entity_id');
	$query->leftjoin('taxonomy_term_field_data', 'oc', 'oc.tid = c.field_office_country_target_id');
	$query->leftjoin('taxonomy_term__field_country_code', 'occ', 'occ.entity_id = c.field_office_country_target_id');
	$query->leftjoin('node__field_region', 'r', 'n.nid = r.entity_id');
	$query->leftjoin('taxonomy_term_field_data', 't', 't.tid = r.field_region_target_id');
	$query->condition('n.type', 'office', '=');
	$query->condition('n.status', 1, '=');
	$query->addField('t', 'tid', 'region_tid');
	$query->addField('t', 'name', 'region_name');
	$query->addField('oc', 'tid', 'country_tid');
	$query->addField('oc', 'name', 'country_name');
	$query->addField('oc', 'langcode', 'country_langcode');
	$query->addField('occ', 'field_country_code_value', 'country_code');
	$results = $query->execute()->fetchAll();
	//tableau [pays id] => region id
	$table_country_region = array();
	foreach ($results as $rowCountryRegion) {
		$table_country_region[$rowCountryRegion->country_tid] = $rowCountryRegion->region_tid;
	}

	return $table_country_region;
}

/**
 * Méthode qui renvoie le tableau de pays (termes de taxo offices countrie) [country id] => country name
 * @return array
 */
function getCountries() {
	$query = Database::getConnection()->select('node_field_data', 'n');
	$query->leftjoin('node__field_office_country', 'c', 'n.nid = c.entity_id');
	$query->leftjoin('taxonomy_term_field_data', 'oc', 'oc.tid = c.field_office_country_target_id');
	$query->condition('n.type', 'office', '=');
	$query->condition('n.status', 1, '=');
	$query->addField('oc', 'tid', 'country_tid');
	$query->addField('oc', 'name', 'country_name');
	$query->addField('oc', 'langcode', 'country_langcode');
	$query->orderBy('oc.name');
	$results = $query->execute()->fetchAll();

	$current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
	$table_countries = array();
	$table_countries['all'] = t('Country');

	foreach ($results as $country) {
		if (!array_key_exists($country->country_tid, $table_countries) && !empty($country->country_tid) && $country->country_langcode == $current_language) {
			$table_countries[$country->country_tid] = $country->country_name;
		}
	}

	foreach ($results as $country) {
		if (!array_key_exists($country->country_tid, $table_countries) && !empty($country->country_tid)) {
			$table_countries[$country->country_tid] = $country->country_name;
		}
	}
	return $table_countries;
}

/**
 * Méthode qui renvoie le tableau de régions (termes de taxo region) [region id] => region name
 * @return array
 */
function getRegions(){
	$query = Database::getConnection()->select('node_field_data', 'n');
	$query->leftjoin('node__field_region', 'r', 'n.nid = r.entity_id');
	$query->leftjoin('taxonomy_term_field_data', 't', 't.tid = r.field_region_target_id');
	$query->condition('n.type', 'office', '=');
	$query->condition('n.status', 1, '=');
	$query->addField('t', 'tid', 'region_tid');
	$query->addField('t', 'name', 'region_name');
	$query->addField('t', 'langcode', 'region_langcode');
	$query->orderBy('t.name');
	$results =	$query->execute()->fetchAll();

	$table_regions = array();
	$table_regions['all'] = t('Region');

	$current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();

	foreach ($results as $region){
		if(!array_key_exists($region->region_tid, $table_regions)
			&& !empty($region->region_tid)
			&& $region->region_langcode == $current_language ){
			$table_regions[$region->region_tid] = $region->region_name;
		}
	}
	return $table_regions;
}

/*function oab_frontoffice_views_pre_render(\Drupal\views\ViewExecutable $view){
  if (isset($view) && ($view->storage->id() == 'subhomes')) {
    $view->element['#attached']['library'][] = 'oab_frontoffice/views-ajax-url';
  }
}*/