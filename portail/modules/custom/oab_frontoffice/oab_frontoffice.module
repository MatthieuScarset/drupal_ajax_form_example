<?php

use Drupal\Core\Menu\MenuLinkInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Url;

use Drupal\paragraphs\Entity\Paragraph;


function oab_frontoffice_preprocess_menu(&$variables) {
  if (isset($variables['items'])
    && is_array($variables['items'])) {
    foreach ($variables['items'] as &$item) {
      $menuLinkEntity = oab_frontoffice_load_link_entity_by_link($item['original_link']);
      if (!empty($menuLinkEntity)) {
        if (!empty($menuLinkEntity->link->first()->options['target'])) {
          $item['url']->setOption('target', $menuLinkEntity->link->first()->options['target']);
        }
      }
    }
  }
}


/**
 * Préparation du JS pour la génération des liens "Shares"
 * @param $variables
 */
function oab_frontoffice_preprocess_node(&$variables) {


  if (isset($variables["elements"]["#contextual_links"]["node"]["route_parameters"]["node"])) {

    ##Collecte de toutes les données nécessaires

    #Je recupère le nid puis je charge le node associé
    $nid = $variables["elements"]["#contextual_links"]["node"]["route_parameters"]["node"];
    $node = \Drupal\node\Entity\Node::load($nid);

    if (is_null($node) || $node === false)
      return;

    $meta_description = "";
    ##Je recupère le field_meta_description s'il existe
    if ($node->hasField('field_meta_decription'))
      $meta_description = $node->get('field_meta_description')->getValue();


    ##je recupère l'url du node et celui du site
    $node_url = Url::fromRoute('entity.node.canonical', array('node' => $nid), array('absolute' => TRUE))->toString();
    $site_url = \Drupal::request()->getHost();

    ##Je fais un tableau de toutes mes données nécessaires pour la création des urls "share"
    ## pour chaque site
    $siteData = [
      'twitter' => [
        'url' => "http://www.twitter.com/intent/tweet",
        'params' => [
          'text' => isset($variables["label"][0]["#context"]["value"])
            ? $variables["label"][0]["#context"]["value"]
            : "",
          'url' => $node_url,
          'hashtags' => '',
          'via' => 'orange_business',
          'related' => '',
          'in-reply-to' => ''
        ]
      ],
      'facebook' => [
        'url' => "https://www.facebook.com/sharer/sharer.php",
        "params" => [
          'u' => $node_url
        ]
      ],
      'linkedin' => [
        'url' => "https://www.linkedin.com/shareArticle",
        'params' => [
          'mini' => 'true',
          'url' => $node_url,
          'title' => isset($variables["label"][0]["#context"]["value"])
            ? $variables["label"][0]["#context"]["value"]
            : "",
          'summary' => $meta_description,
          'source' => $site_url
        ]
      ],

    ];

    ## Pour traiter les mails plus tard
    $mail = [
      'subject' => 'Viens voir sur Orange-Business.com',
      'body' => '<html><body><h1>Coucou c\'est un test</body></html>'
    ];

    ##Pour enregistrer les adresses recomposées
    $siteUrls = [];

    ##je recompose les URLs share
    foreach ($siteData as $site => $data) {
      $paramsString = "";
      foreach ($data['params'] as $paramName => $value) {
        if (strlen($value)>0)
          $paramsString .= $paramName . "=" . rawurlencode($value) . "&";
      }
      $siteUrls[$site] = $data['url'] . "?"
          .rtrim($paramsString, "&");
    }

    #J'enregistre mes urls pour les avoir en JS
    $variables['#attached'] = [
      'drupalSettings' => [
        'myLibrary' => [
          'share_siteUrls' => $siteUrls
        ],
      ],
    ];
  }
}

function oab_frontoffice_load_link_entity_by_link(MenuLinkInterface $menuLinkContentPlugin) {
  $entity = NULL;
  if ($menuLinkContentPlugin instanceof Drupal\menu_link_content\Plugin\Menu\MenuLinkContent) {
    list($entity_type, $uuid) = explode(':', $menuLinkContentPlugin->getPluginId(), 2);
    $entity = \Drupal::entityManager()->loadEntityByUuid($entity_type, $uuid);
  }
  return $entity;
}

function oab_frontoffice_link_alter(&$variables){
  $languages = \Drupal::languageManager()->getLanguages();

  if (isset($variables['url'])){
    try{
      $uri = $variables['url']->getUri();

      foreach($languages AS $key => $value) {
        $langcode = $value->getId();

        if ($uri === 'base:<front_' . $langcode . '>'){
          $new_url = \Drupal\Core\Url::fromRoute('<front>', array(), array());
          $variables['options']['language'] = $value;
          $variables['url'] = $new_url;
        }
      }
    }
    catch(\UnexpectedValueException $e){

    }
  }
}


/**
 * Implements hook_entity_view_alter().
 * @param array $build
 * @param EntityInterface $entity
 * @param EntityViewDisplayInterface $display
 */
function oab_frontoffice_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Cheking view_mode for node.
  if ($entity->getEntityType()->id() == 'node') {
    if (!empty($build['#attached']['html_head_link'])) {
      _remove_header_links($build);
    }
  }
}

function _remove_header_links(array &$attachments) {
  // Cheking html_head on attached tags in head.
  if (!isset($attachments['#attached']['html_head_link'])) {
    return;
  }

  // Array to unset.
  $unset_html_head_link = [
    'shortlink',
    'delete-form',
    'edit-form',
    'version-history',
    'revision',
    'display',
    'drupal:content-translation-overview',
    'drupal:content-translation-add',
    'drupal:content-translation-edit',
    'drupal:content-translation-delete',
  ];
  // Unset loop.
  foreach ($attachments['#attached']['html_head_link'] as $key => $value) {
    if (isset($value[0]['rel']) && in_array($value[0]['rel'], $unset_html_head_link)) {
      unset($attachments['#attached']['html_head_link'][$key]);
    }
  }
}

function oab_frontoffice_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display)
{
    if ($build['#view_mode'] == 'full') {
        $content_type = $entity->bundle();
        if (in_array($content_type, array('magazine', 'blog_post', 'document', 'simple_page', 'full_html'))) {
            $theme_term = '';

            $field_solution = isset($entity->field_solution) ? $entity->field_solution->getValue() : array();
            $field_industry = isset($entity->field_industry) ? $entity->field_industry->getValue() : array();
            $field_insight = isset($entity->field_insight) ? $entity->field_insight->getValue() : array();

            $field_blog_thematic = isset($entity->field_blog_thematic) ? $entity->field_blog_thematic->getValue() : array();
            $field_document_thematic = isset($entity->field_document_thematic) ? $entity->field_document_thematic->getValue() : array();
            $field_magazine_thematic = isset($entity->field_magazine_thematic) ? $entity->field_magazine_thematic->getValue() : array();

            if (!empty($field_insight)) {
                $theme_term = $field_insight[0]['target_id'];
            } elseif (!empty($field_blog_thematic)) {
                $theme_term = $field_blog_thematic[0]['target_id'];
            } elseif (!empty($field_document_thematic)) {
                $theme_term = $field_document_thematic[0]['target_id'];
            } elseif (!empty($field_magazine_thematic)) {
                $theme_term = $field_magazine_thematic[0]['target_id'];
            } elseif (!empty($field_industry)) {
                $theme_term = $field_industry[0]['target_id'];
            } elseif (!empty($field_solution)) {
                $theme_term = $field_solution[0]['target_id'];
            }

            if ($theme_term != '') {
                $term = \Drupal\taxonomy\Entity\Term::load($theme_term);
                //oabt($term, true);
                if (isset($term)) {
                    $build['theme_term'] = array(
                        '#markup' => $term->getName(),
                        'id' => $term->id(),
                    );
                }
            }
        }
        if ($content_type == 'product') {
            //on deserialise les données à passer au template
            $field_axiome_data = isset($entity->field_axiome_data) ? unserialize($entity->field_axiome_data->value) : array();
            if (count($field_axiome_data) > 0) {
                $build['axiome_data'] = $field_axiome_data;
            }
        }

        if ($content_type == 'homepage_eclairage') {

            $menu_tree = \Drupal::menuTree();
            $menu_name = 'menu-homepage-eclairage';

            // Build the typical default set of menu tree parameters.
            $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

            // Load the tree based on this set of parameters.
            $tree = $menu_tree->load($menu_name, $parameters);

            // Finally, build a renderable array from the transformed tree.
            $menu = $menu_tree->build($tree);

            $menu_html = \Drupal::service('renderer')->render($menu);
            //oabt($menu, true);
            $build['menu_homepage_eclairage'] = $menu;


            //first paragraph
            $firstParagraph = $entity->field_home_banner[0]->entity;
                // Access the paragraph entity like this:

           //oabt($firstParagraph->get('field_title')->getValue(), false);


           // $paragraphHomeBannerFirst = $entity->node.field_home_banner ;
           // $paragraph = Paragraph::load($paragraphHomeBannerFirst);
           // $field_title = $paragraph->field_title->value;
            //oabt($field_title, true);

            $build['firstbanner_homepage_eclairage'] = $firstParagraph->get('field_title')->getValue();


            $taxonomyId = $entity->field_home_playlists[0]->entity->get('field_playlist_taxonomy_term')->getValue() ;//[0]['target_id'];
            //var_dump(intval($taxonomyId));

            $build['taxonomy'][count($build['taxonomy'])] = $taxonomyId;
        }
    }
}


/**
 * cleane les options du menu déroulant des filtres exposés
 * @param $options du tableau
 */
function clean_exposed_filters_by_language($options, $txtAll){
	$current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
	foreach($options as $key=>$value){
		if($key != 'All'){
			$term = \Drupal\taxonomy\Entity\Term::load($key);
			if(isset($term) && $term != null) {
				$lang = $term->language();
				if ( $lang->getId() != $current_language ) {
					unset( $options[ $key ] );
				}
			}
		}else{
			$options['All'] = t($txtAll);
		}
	}
	return $options;
}

/**
 * Implements hook_views_query_alter().
 */
function oab_frontoffice_form_views_exposed_form_alter(&$form, &$form_state) {

  if (strpos($form['#id'], 'views-exposed-form-subhomes') !== false) {
    $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    if ($current_language == 'fr') {
      if ( isset($form['actions']['submit']['#value']) ) {
        $form['actions']['submit']['#value'] = "Filtrer";
      }
    }
  }

  // subhome blogs
  if ($form['#id'] == 'views-exposed-form-subhomes-page-blog') {
    $themes = clean_exposed_filters_by_language(
      $form['field_blog_thematic_target_id']['#options'],
      'Thematic'
    );
    $form['field_blog_thematic_target_id']['#options'] = $themes;
  }
  // subhome magazine
  if ($form['#id'] == 'views-exposed-form-subhomes-page-magazine') {
    $themes = clean_exposed_filters_by_language(
      $form['field_magazine_thematic_target_id']['#options'],
      'Thematic'
    );
    $form['field_magazine_thematic_target_id']['#options'] = $themes;

    $years = clean_exposed_filters_by_language(
        $form['field_year_target_id']['#options'],
        'Year'
    );
    $form['field_year_target_id']['#options'] = $years;

    $months = clean_exposed_filters_by_language(
        $form['field_month_target_id']['#options'],
        'Month'
    );
    $form['field_month_target_id']['#options'] = $months;
  }
  // subhome mediatheque
  if ($form['#id'] == 'views-exposed-form-subhomes-page-document') {
    $themes = clean_exposed_filters_by_language(
      $form['field_blog_thematic_target_id']['#options'],
      'Thematic'
    );
    $form['field_blog_thematic_target_id']['#options'] = $themes;

    $types = clean_exposed_filters_by_language(
      $form['field_document_type_target_id']['#options'],
      'Type'
    );
    $form['field_document_type_target_id']['#options'] = $types;

    $jobs = clean_exposed_filters_by_language(
      $form['field_jobs_target_id']['#options'],
      'Profession'
    );
    $form['field_jobs_target_id']['#options'] = $jobs;

    $industries = clean_exposed_filters_by_language(
      $form['field_industry_target_id']['#options'],
      'Industry'
    );
    $form['field_industry_target_id']['#options'] = $industries;
  }
  // subhome presse
  if ($form['#id'] == 'views-exposed-form-subhomes-page-press') {
    $targets = clean_exposed_filters_by_language(
      $form['field_type_target_id']['#options'],
      'Type'
    );
    $form['field_type_target_id']['#options'] = $targets;

    $solutions = clean_exposed_filters_by_language(
      $form['field_solution_target_id']['#options'],
      'Solution'
    );
    $form['field_solution_target_id']['#options'] = $solutions;

    $years = clean_exposed_filters_by_language(
      $form['field_year_target_id']['#options'],
      'Year'
    );
    $form['field_year_target_id']['#options'] = $years;

    $months = clean_exposed_filters_by_language(
      $form['field_month_target_id']['#options'],
      'Month'
    );
    $form['field_month_target_id']['#options'] = $months;
  }
  // subhome produits
  if ($form['#id'] == 'views-exposed-form-subhomes-page-catalogue') {
    $solutions = clean_exposed_filters_by_language(
      $form['field_solution_target_id']['#options'],
      'Solution'
    );
    $form['field_solution_target_id']['#options'] = $solutions;

    $industries = clean_exposed_filters_by_language(
      $form['field_industry_target_id']['#options'],
      'Industry'
    );
    $form['field_industry_target_id']['#options'] = $industries;

    $jobs = clean_exposed_filters_by_language(
      $form['field_jobs_target_id']['#options'],
      'Profession'
    );
    $form['field_jobs_target_id']['#options'] = $jobs;

  }
  // subhome temoignages
  if ($form['#id'] == 'views-exposed-form-subhomes-page-customer') {
    $solutions = clean_exposed_filters_by_language(
      $form['field_solution_target_id']['#options'],
      'Solution'
    );
    $form['field_solution_target_id']['#options'] = $solutions;

    $industries = clean_exposed_filters_by_language(
      $form['field_industry_target_id']['#options'],
      'Industry'
    );
    $form['field_industry_target_id']['#options'] = $industries;

    $jobs = clean_exposed_filters_by_language(
      $form['field_jobs_target_id']['#options'],
      'Profession'
    );
    $form['field_jobs_target_id']['#options'] = $jobs;
  }
  // subhome partenaires
  if ($form['#id'] == 'views-exposed-form-subhomes-page-partners') {
    $solutions = clean_exposed_filters_by_language(
      $form['field_solution_target_id']['#options'],
      'Solution'
    );
    $form['field_solution_target_id']['#options'] = $solutions;

    $types = clean_exposed_filters_by_language(
      $form['field_types_target_id']['#options'],
      'Category'
    );
    $form['field_types_target_id']['#options'] = $types;

    $regions = clean_exposed_filters_by_language(
      $form['field_regions_target_id']['#options'],
      'Geography'
    );
    $form['field_regions_target_id']['#options'] = $regions;

      $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
      if($current_language != 'en'){
          unset($form['field_regions_target_id']);
      }
  }
}

function oab_frontoffice_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
  if ($route_match && $node = $route_match->getParameter('node')) {
    $breadcrumb->addCacheableDependency($node);
  }
}

/**
 * Implements hook_theme().
 */
function oab_frontoffice_theme($existing, $type, $theme, $path) {
	$theme = array();
	$theme['custom-righticonblock'] = array(
		'variables' => array(
			'synomiaSearchForm' => array(),
		),
		'template' => 'block--righticonblock-custom'
	);
	return $theme;
}

