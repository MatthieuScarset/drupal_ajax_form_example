<?php

/**
 * @file
 * Contains oab_subhomes.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\oab_subhomes\Entity\SubhomeEntity;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_help().
 */
function oab_subhomes_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the oab_subhomes module.
    case 'help.page.oab_subhomes':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module for subhomes entity generation') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function oab_subhomes_theme($existing, $type, $theme, $path) {

    $theme = [];
    $theme['subhome_entity'] = [
        'render element' => 'elements',
        'path' => drupal_get_path('theme', 'theme_boosted') . '/templates/subhome_entity',
        'theme path'    => drupal_get_path('theme', 'theme_boosted') ,
        'template' => 'subhome_entity',
        'type'  => 'module',
    ];
    $theme['paragraph'] = [
        'render element' => 'elements',
        'path' => drupal_get_path('theme', 'theme_boosted') . '/templates/paragraphs',
        'theme path'    => drupal_get_path('theme', 'theme_boosted') ,
        'template' => 'paragraph',
        'type'  => 'module',
    ];
    $theme['subhome_entity_content_add_list'] = [
        'render element' => 'content',
        'variables' => ['content' => NULL],
        'file' => 'subhome_entity.page.inc',
    ];
    return $theme;
}

function oab_subhomes_preprocess_subhome_entity(&$variables) {
  /** @var Drupal\oab_subhomes\Entity\SubhomeEntity $subhome_entity */
    $subhome_entity = $variables['elements']['#subhome_entity'];
    foreach (\Drupal\Core\Render\Element::children($variables['elements']) as $key) {
        $variables['content'][$key] = $variables['elements'][$key];
    }
}


/**
* Implements hook_theme_suggestions_HOOK().
*/
function oab_subhomes_theme_suggestions_subhome_entity(array $variables) {
    $suggestions = [];
    $entity = $variables['elements']['#subhome_entity'];
    $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

    $suggestions[] = 'subhome_entity__' . $sanitized_view_mode;
    $suggestions[] = 'subhome_entity__' . $entity->bundle();
    $suggestions[] = 'subhome_entity__' . $entity->bundle() . '__' . $sanitized_view_mode;
    $suggestions[] = 'subhome_entity__' . $entity->id();
    $suggestions[] = 'subhome_entity__' . $entity->id() . '__' . $sanitized_view_mode;
    return $suggestions;
}

function oab_subhomes_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
    /**
     * @var Drupal\views\ViewExecutable $view
     * @var SubhomeEntity $entity
     */

    if (isset($variables['view'])) {
        $view = $variables['view'];
        if (preg_match('/^subhomes/', $view->id()) && isset ($view->argument['field_subhome_target_id'])) {

            $sid = $view->argument['field_subhome_target_id']->value;
            $entity = SubhomeEntity::loadBySubhomeId($sid);

            // Si on a trouvé une entité pour la subhome, on la load et on la passe à la vue
            if ($entity !== null) {
                $suggestions[] = 'views_view__' . $view->id() . '__' . $entity->bundle();
            }

        }
    }
}


function oab_subhomes_palette_orange_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL,
                                                         $cacheable) {
    $allowedValues = array (
        "black-on-orange"   => "Black on Orange",
        "white-on-orange"   => "White on Orange",
        "orange-on-white"   => "Orange on White",
        "black-on-white"    => "Black on White",
        "grey-on-white"     => "Grey on White",
        "orange-on-black"   => "Orange on Black",
        "white-on-black"    => "White on Black",
        "grey-on-black"     => "Grey on Black",
        "white-on-obs-grey"  => "White on OBS Grey",
        "black-on-yellow"   => "Black on Yellow",
        "black-on-blue"     => "Black on Blue",
        "black-on-green"    => "Black on Green",
        "black-on-purple"   => "Black on Purple",
        "black-on-pink"     => "Black on Pink"
    );
    return $allowedValues;
}

function oab_subhomes_btn_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
    $allowedValues = array (
        "btn-txt-white-bg-black"   => "Texte blanc, fond noir",
        "btn-txt-white-bg-transparent"   => "Texte blanc, fond transparent",
        "btn-txt-black-bg-white"   => "Texte noir, fond blanc",
        "btn-txt-black-bg-transparent"    => "Texte noir, fond transparent",
        "btn-txt-black-bg-orange"    => "Texte noir, fond orange",
        "btn-txt-white-bg-orange"    => "Texte blanc, fond orange",
    );
    return $allowedValues;
}

/**
 * HOOK_ENTITY_ACCESS
 *
 * Problèmes de droits pour les paragraphes utilisés dans la refonte de la subhome press. Je donne l'accès pour les voir
 */
function oab_subhomes_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
    if ($entity->getEntityTypeId() == 'paragraph'
        && ($entity->bundle() === 'subhome_presse_carrousel' || $entity->bundle() === 'default_button')
        && $operation == 'view'
    ) {
        return AccessResult::allowed();
    }

    return AccessResult::neutral();
}


function oab_subhomes_preprocess_views_view(&$variables) {

    /** @var Drupal\views\ViewExecutable $view */
    $view = $variables['view'];
    $id = $view->storage->id();

    if ($id == 'subhomes') {

        /*
         * Nouvelle gestion des subhomes
         * Je passe en variable l'entité subhome correspondante
         */
        if (isset($view->argument['field_subhome_target_id'])) {

            $sid = $view->argument['field_subhome_target_id']->value;
            $entity = SubhomeEntity::loadBySubhomeId($sid);

            // Si on a trouvé une entité pour la subhome et qu'elle est de type presse, je load les press_kits de la langue
            if ($entity !== null && $entity->bundle() === 'presse') {
                /** @var Drupal\node\Entity\Node[] $entities */
                /*$entities = \Drupal::entityTypeManager()->getStorage('node')
                    ->loadByProperties([
                        'type'=> 'press_kit',
                        'langcode' => $entity->language()->getId(),
                        'status' => true
                    ]);*/

                $query = \Drupal::entityQuery('node')
                    ->condition('status', 1)
                    ->condition('type', 'press_kit')
                    ->condition('langcode', $entity->language()->getId())
                    ->sort('changed' , 'DESC');

                $nids = $query->execute();
                $entities = \Drupal::entityTypeManager()->getStorage('node')
                    ->loadMultiple($nids);

                $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
                foreach ($entities as $entity ) {
                    $builded_entity = $view_builder->view($entity, 'subhome');
                    $variables[SubhomeEntity::TWIG_VAR_NAME]['press_kit'][] =
                        render($builded_entity);
                }
            }
        }
    }
}

function oab_subhomes_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

    if ($form_id == "subhome_entity_presse_edit_form") {
        $user = \Drupal::currentUser();

        // Pour les non admin, je bloque la partie "Config" de la subhome entity
        if ($user->id() != 1) {
            if (isset($form['#fieldgroups']['group_config']) && isset($form['#group_children'])) {
                foreach ($form['#group_children'] as $field => $group) {
                    if ($group == 'group_config') {
                        $form[$field]['#disabled'] = true;
                    }
                }
            }
        }

        // Ajout du validate pour le field visual et l'aplat de la partie Corporate
        $form['#validate'][] = 'oab_subhomes_check_visual_aplat';
        array_unshift($form['#validate'], 'oab_subhomes_check_group_team');
    }

    // Je fais la même chose pour les fields de l'entité Dossier de presse
    if ($form_id == 'node_press_kit_form' || $form_id == 'node_press_kit_edit_form' ) {
        $form['#validate'][] = 'oab_subhomes_check_visual_aplat';
    }
}


function oab_subhomes_check_group_team(&$form, Drupal\Core\Form\FormState &$form_state) {

    $afficher_equipe = $form_state->getValue('field_afficher_bloc_notre_equipe');

    if (isset($afficher_equipe['value']) && $afficher_equipe['value'] == 1) {
        foreach ($form['#fieldgroups']['group_team_details']->children as $field) {
            $form[$field]["#required"] = true;
        }
    }


}

function oab_subhomes_check_visual_aplat ($form, Drupal\Core\Form\FormState &$form_state) {

    if ($form['#form_id'] === 'subhome_entity_presse_edit_form') {
        $field_aplat = $form_state->getValue('field_corporate_aplat');
        $field_visuel = $form_state->getValue('field_corporate_visuel');
    } elseif ($form['#form_id'] == 'node_press_kit_form' || $form['#form_id'] == 'node_press_kit_edit_form') {
        $field_aplat = $form_state->getValue('field_aplat');
        $field_visuel = $form_state->getValue('field_visual');
    } else {
        return;
    }

    // Trop de conditions pour le field visual, je le met dans une variable
    $field_visual_is_empty = false;
    if ($field_visuel === null || count($field_visuel) == 0) {
        $field_visual_is_empty = true;
    }
    if (isset($field_visuel['target_id']) && strlen($field_visuel['target_id']) == 0) {
        $field_visual_is_empty = true;
    }

    // Petit check pour les visual et aplat : au moins l'un des deux doit être remplis
    if ($field_visual_is_empty
        && ($field_aplat === null || count($field_aplat) == 0)) {
        $form_state->setErrorByName('group_corporate', t('Either Aplat or Visual in Corporate Group should be set'));
    }
}
