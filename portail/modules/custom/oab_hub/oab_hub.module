<?php

use Drupal\oab_hub\Controller\OabHubController;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Pour le formulaire d'ajout d'une taxo Hub, je n'affiche que les subhomes de la langue en cours
 */
function oab_hub_form_taxonomy_term_hub_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $tids = array_keys($form[OabHubController::FIELD_SUBHOMES_ID]['widget']['#options']);
    $terms = \Drupal\taxonomy\Entity\Term::loadMultiple($tids);

    $removedTids = \Drupal::config(OabHubController::CONFIG_ID)
        ->get(OabHubController::CONFIG_FORM_REMOVED_SUBHOMES_TIDS);

    foreach ($terms as $term) {
        $lang = $term->language();
        if ( $lang->getId() != $current_language || in_array($term->id(), $removedTids)) {
            unset($form[OabHubController::FIELD_SUBHOMES_ID]['widget']['#options'][$term->id()]);
        }
    }

    #Pour les modifs, je bloque le machine_name
    $isNew = $form_state->getFormObject()->getEntity()->isNew();
    $isNewTranslation = $form_state->getFormObject()->getEntity()->isNewTranslation();
    if (!$isNew) {
        $form[OabHubController::FIELD_MN_SUFFIXE_ID]['widget'][0]['value']['#attributes']['disabled'] = 'disabled';
        $form[OabHubController::FIELD_URL_ID]['widget'][0]['value']['#attributes']['disabled'] = 'disabled';
    }
}

/**
 * hook_ENTITY_TYPE_insert
 * Hook pour créer les menus/blocks à la création d'un taxo HUB
 */
function oab_hub_taxonomy_term_presave(\Drupal\taxonomy\Entity\Term $term) {
    /**
     * Ajouter dans les if un test sur un paramètre ajouté dans l'array
     * des infos du term dans l'update pour l'ajout du term "portail"
     */

    ##on ne le fait que pour la création des termes pour le HUB
    if ($term->getVocabularyId() == OabHubController::HUB_VOCABULARY_ID &&
        ( $term->isNew() || $term->isNewTranslation())) {
            OabHubController::createMachineNameSuffixe($term);
            OabHubController::createMenus($term);
            OabHubController::checkUrl($term);
            OabHubController::createBlocks($term);
            OabHubController::createSubhomesUrl($term);
    }
}

/**
 * suppression des menus à la suppression d'un terme
 */
function oab_hub_taxonomy_term_delete(\Drupal\taxonomy\Entity\Term $term)  {
    if ($term->getVocabularyId() == OabHubController::HUB_VOCABULARY_ID) {

        #Je boucle sur toutes les langues pour supprimer les menus associés
        # aux traductions (le hook_translation_delete n'est pas appelé dans ce cas là)
        $languages = $term->getTranslationLanguages(false);
        foreach ( $languages as $langcode => $langinfo) {
            OabHubController::deleteMenus($term->getTranslation($langcode));
            OabHubController::deleteBlocks($term->getTranslation($langcode));
            OabHubController::deleteNodes($term->getTranslation($langcode));
            OabHubController::deleteUrl($term->getTranslation($langcode));
        }
        OabHubController::deleteMenus($term);
        OabHubController::deleteBlocks($term);
        OabHubController::deleteNodes($term);
        OabHubController::deleteUrl($term);
    }
}

/**
 * suppression des menus à la suppression de la trad d'un terme
 */
function oab_hub_taxonomy_term_translation_delete(\Drupal\taxonomy\Entity\Term $translation) {
    if ($translation->getVocabularyId() == OabHubController::HUB_VOCABULARY_ID) {
        OabHubController::deleteMenus($translation);
        OabHubController::deleteBlocks($translation);
        OabHubController::deleteNodes($translation);
        OabHubController::deleteUrl($translation);
    }
}


/**
 * Implements hook_views_query_alter().
 */
function oab_hub_views_query_alter(Drupal\views\ViewExecutable $view, Drupal\views\Plugin\views\query\QueryPluginBase $query) {

    ## Recuperation de tous les termes
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
        ->loadTree(OabHubController::HUB_VOCABULARY_ID,0,1,TRUE);
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();

    ##Je recupère et je découpe l'URL
    $uri = "";

    if (!\Drupal::request()->isXmlHttpRequest()) {
        //SI on n'est pas dans une requête AJAX, c'est simple
        $uri = \Drupal::request()->getRequestUri();
    } else {
        // Sinon, je recupère le referer pour avoir le hub d'origine
        // (Cas des boutons "voir plus"
        $referer = \Drupal::request()->headers->get('referer');
        if (strlen($referer) > 0 ) {
            $site_url = \Drupal::request()->getSchemeAndHttpHost();
            if (strpos($referer, $site_url) !== false) {
                $uri = substr($referer, strlen($site_url));
            }
        }
    }

    $uri_parts = explode('/', $uri);
    if ($uri_parts[0] === "") {
        array_shift($uri_parts);
    }

    if ($view->id() === "subhomes" && isset($uri_parts[1])) {

        ## je recupère le term de l'URL
        $pageTerm = false;
        foreach ($terms as $term) {
            $translations = $term->getTranslationLanguages();
            if (isset($translations[$langcode])) {
                $translated_term = $term->getTranslation($langcode);

                ## Je teste sur l'URL de la trad du term pour l'affichage en cours
                $term_url = $translated_term->get(OabHubController::FIELD_URL_ID)->first()->getString();
                if ($uri_parts[1] === $term_url) {

                    ##Si je trouve une URl qui correspond, je recupère le term pour faire le filtre
                    $pageTerm = $term;
                }
            }


        }

        #Si on a trouvé un terme dont l'URL correspond à notre URl,
        # on complete la query avec notre term
        if ($pageTerm !== false) {
            foreach ($query->where as $key_where => $where) {
                foreach ($where['conditions'] as $key_condition => $condition) {
                    if (isset($condition['field'])
                        && $condition['field'] == "node__field_hub.field_hub_target_id") {
                        unset($query->where[$key_where]['conditions'][$key_condition]);
                    }
                    if (isset($condition['field'])
                        && $condition['field'] == "node__field_hub_portal.field_hub_portal_value") {
                        unset($query->where[$key_where]['conditions'][$key_condition]);
                    }
                }
            }

            ##J'ajoute la condition pour filtrer sur notre taxo
            $query->where[0]['conditions'][] = [
                'field' => "node__field_hub.field_hub_target_id = :node__field_hub_field_hub_target_id",
                'value' => [
                    'node__field_hub_field_hub_target_id' => $term->id()
                ],
                'operator' => "formula"
            ];
        } else {
            #cas hub gestion du partage d élément sur les subhomes du portail
            foreach ($query->where as $key_where => $where) {
                foreach ($where['conditions'] as $key_condition => $condition) {
                    if (isset($condition['field'])
                        && $condition['field'] == "node__field_hub.field_hub_target_id") {
                        unset($query->where[$key_where]['conditions'][$key_condition]);
                    }
                }
            }
            if ($view->current_display <>"page_distributor") {
                $query->where[] = array(
                    'conditions' => array(
                        array(
                            'field' => 'node__field_hub.field_hub_target_id',
                            'value' => NULL,
                            'operator' => 'is',
                        ),
                        array(
                            'field' => 'node__field_hub_portal.field_hub_portal_value',
                            'value' => 1,
                            'operator' => '=',
                        )
                    ),
                    'type' => 'OR',
                );
            }
        }
    }

}




function oab_hub_pathauto_alias_alter(&$alias, array &$context) {

    if ((isset($context['module']) && $context['module'] === "node")
        && (isset($context['op']) && $context['op'] == "insert")
        && isset($context['data']['node'])
    ) {
        $hasPortail = false;

        $original_alias = $alias;

        /**
         * Ajouter un if pour checker si le portail est selectionné ici
         * c'est pour laisser l'alias de base qui pointe vers le portail
         */
        $on_portail = $context['data']['node']->get(OabHubController::NODE_FIELD_SHARE_ON_PORTAL);
        if ($on_portail !== null) {
            //kint($on_portail->first()->getValue()); die();
            $on_portail_value = $on_portail->first()->getValue();
            if ($on_portail_value['value'] == 1) {
                $hasPortail = true;
                oab_hub_drupal_message('URL créée : ', "$alias");
            }
        }

        $hubs = $context['data']['node']->get(OabHubController::NODE_FIELD_HUB);
        $langcode =  $context['data']['node']->language()->getId();
        if ($hubs->count() > 0) {
            $i = 0;
            while($i < $hubs->count()) {
                $hub = $hubs->get($i);
                $value = $hub->getValue();

                #Recuperation du term selectionné et du prefixe d'url de ce term
                $term = \Drupal\taxonomy\Entity\Term::load($value['target_id']);
                $term_url = $term->get(OabHubController::FIELD_URL_ID);
                $term_url = $term_url->first()->getString();

                if (!$hasPortail && $i == 0) {
                    $alias = "/" . $term_url . $original_alias;
                } else {
                    \Drupal::service('path.alias_storage')
                        ->save($context['source'], "/" . $term_url . $original_alias, $langcode);
                }
                oab_hub_drupal_message('URL créée : ', "$langcode/$term_url" . $original_alias);
                $i++;
            }
        }
    }
}

function oab_hub_entity_update(Drupal\Core\Entity\EntityInterface $entity) {

    /**
     * Je ne le fais que les pour les nodes et si le node possède le
     * field HUB/Taxo
     */
    if ($entity->getEntityTypeId() === 'node'
            && $entity->hasField(OabHubController::NODE_FIELD_HUB)) {

        $langcode = $entity->language()->getId();

        # Je recupère les hub ajoutés
        $newHubs = $entity->get(OabHubController::NODE_FIELD_HUB)->getValue();

        # Je recupère les hubs avant la modif
        $old_node = $entity->original;
        $oldHubs = $old_node->get(OabHubController::NODE_FIELD_HUB)->getValue();


        # Pour sauvegarder les ids des choix
        $newHubs_id = [];
        $oldHubs_id = [];

        # Pour sauvegarder les URL à créer/supprimer
        $toRemove = [];
        $toCreate = [];


        # je recupère tous les id des nouveaux hubs
        foreach ($newHubs as $value) {
            $newHubs_id[] = $value['target_id'];
        }

        # Je recupère tous les ids des anciens hubs
        foreach ($oldHubs as $value) {
            $oldHubs_id[] = $value['target_id'];
        }

        # Je recupère un alias pour ce node
        $alias = \Drupal::service('path.alias_manager')->getAliasByPath("/node/" . $entity->id());

        # je recupère les term des ancies hubs pour récuperer leurs URLs
        $oldHubs_terms = \Drupal\taxonomy\Entity\Term::loadMultiple($oldHubs_id);


        #Je recupère toutes les URL des hubs anciennement selectionnés
        $oldUrls = [];
        foreach ($oldHubs_terms as $term) {
            $oldUrls[] = $term->get(OabHubController::FIELD_URL_ID)->first()->getString();
        }

        #Je recupère toutes les parties de l'alias recupéré
        $alias_parts = explode('/', $alias);

        # je boucle sur toutes les parties de l'alias
        # et si je tombe sur une partie qui est une URL d'un des termes, je le supprime
        # afin de recupere l'alias de base d'un node de ce type
        foreach ($alias_parts as $key => $value) {
            if (in_array($value, $oldUrls)) {
                unset($alias_parts[$key]);
            }
        }
        $alias = implode('/', array_values($alias_parts));


        # Je recupère les nouveaux hubs (ceux qui sont dans new mais pas dans old)
        # ils sont donc à créer
        foreach ($newHubs_id as $id) {
            if (!in_array($id, $oldHubs_id))
                $toCreate[] = $id;
        }

        # Je fais l'inverse pour ceux à supprimer
        foreach ($oldHubs_id as $id) {
            if (!in_array($id, $newHubs_id))
                $toRemove[] = $id;
        }

        # Je crée les nouveaux Alias
        foreach ($toCreate as $term_id) {
            #Recuperation du term selectionné et du prefixe d'url de ce term
            $term = \Drupal\taxonomy\Entity\Term::load($term_id);
            $term_url = $term->get(OabHubController::FIELD_URL_ID);
            $term_url = $term_url->first()->getString();
            \Drupal::service('path.alias_storage')
                ->save("/node/" . $entity->id(), "/" . $term_url . $alias, $langcode);
            oab_hub_drupal_message('URL créée :', "/$langcode/$term_url" . $alias);
        }

        # Je supprime les anciens alias
        foreach ($toRemove as $term_id) {
            #Recuperation du term selectionné et du prefixe d'url de ce term
            $term = \Drupal\taxonomy\Entity\Term::load($term_id);
            $term_url = $term->get(OabHubController::FIELD_URL_ID);
            $term_url = $term_url->first()->getString();
           $ret = \Drupal::service('path.alias_storage')
                ->delete(array(
                            'alias' => "/" . $term_url . $alias,
                            "langcode"  => $langcode));
           if ($ret) {
               oab_hub_drupal_message("Alias supprimé ","/$langcode/$term_url" . $alias);
           } else {
               oab_hub_drupal_message("Erreur lors de la suppression de l'alias ","/$langcode/$term_url" . $alias, "error");
           }
        }




        ## Gestion de l'Alias inital (pour le portail)
        $on_portal = $entity->get(OabHubController::NODE_FIELD_SHARE_ON_PORTAL)->count() > 0 ?
                $entity->get(OabHubController::NODE_FIELD_SHARE_ON_PORTAL)->first()->getValue() :
                array();
        $old_on_portal = $old_node->get(OabHubController::NODE_FIELD_SHARE_ON_PORTAL)->count() > 0 ?
            $old_node->get(OabHubController::NODE_FIELD_SHARE_ON_PORTAL)->first()->getValue():
            array();

        ## Petits garde fous, et on ne fait que si la valeur a changé
        if ( (isset($on_portal['value']) && isset($old_on_portal['value']))
            && $on_portal['value'] != $old_on_portal['value']
        ) {
            ## Si on ajoute "portail" je crée l'alias
            if ($on_portal['value'] == 1) {
                \Drupal::service('path.alias_storage')
                    ->save("/node/" . $entity->id(), $alias, $langcode);
                oab_hub_drupal_message('URL créée :', "/$langcode" . $alias);
            } else {
                ## sinon, je le supprime
                $ret = \Drupal::service('path.alias_storage')
                    ->delete(array(
                        'alias' => $alias,
                        "langcode"  => $langcode));
                if ($ret) {
                    oab_hub_drupal_message("Alias supprimé ","/$langcode" . $alias);
                } else {
                    oab_hub_drupal_message("Erreur lors de la suppression de l'alias ","/$langcode/$term_url" . $alias, "error");
                }
            }


        }

    }
}

/**
 * Petite fonction pour essayer de mettre du texte en bold, mais ne fonctionne pas
 * (le "!url" ne semble pas reconnu).
 * Pour l'exemple, voir https://getlevelten.com/blog/kristin-brinner/drupal-set-message-cheatsheet-variables-links-and-formatting
 */
function oab_hub_drupal_message($msg, $url, $status = "status") {
    drupal_set_message(
        t("$msg $url",
           // array('!url' => '<strong>'.$url.'</strong>'))
        array()), $status, true);
}


/**
 * Hook des suggestions de theme pour les menus
 * pour créer un template generique par type de menu
 */
function oab_hub_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
    $menus = OabHubController::getDefaultBlockName();

    # A ajouter pour améliorer la validation : on ceheck le nom du menu avec le nom du hub à l'interieur pour réduire les erreurs
    $actifHub = OabHubController::getActifHub();


    $menu_name = false;
    if (!isset($variables['menu_name'])) {
        $variables['menu_name'] = "";
    }

    foreach ($menus as $menu) {
        if (strpos(str_replace('-', '_', $variables['menu_name']), $menu) !== false) {
            $menu_name = $menu;
        }

    }

    if ($menu_name !== false) {
        $suggestions[] = "menu__$menu_name";
    }

}

/**
 * Hook pour ajouter une classe à nos blocks
 */
function oab_hub_preprocess_block(&$variables) {

    $menus = OabHubController::getDefaultBlockName();

    # A ajouter pour améliorer la validation : on ceheck le nom du menu avec le nom du hub à l'interieur pour réduire les erreurs
    $actifHub = OabHubController::getActifHub();

    if (isset($variables['elements']['#base_plugin_id']) && $variables['elements']['#base_plugin_id'] == "system_menu_block") {
        foreach ($menus as $menu) {
            if (strpos($variables['attributes']['id'], str_replace('_', '', $menu)) !== false) {
                $variables['attributes']['class'][] = "hub_menu_$menu";
            }
        }
    }

}

/**
 * Hook_form_views_exposed_form_alter pour modifier les formulaire exposer
 */

function oab_hub_form_views_exposed_form_alter(&$form, &$form_state)
{
    if (strpos($form['#id'], 'views-exposed-form-subhomes') !== false) {
        $form["#action"] = OabHubController::getHubSubhomeUrl($form["#action"]);
    }
}