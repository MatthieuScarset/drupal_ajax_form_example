<?php

use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\media_entity\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\oab_backoffice\Form\OabSettingsPardotForm;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;


/**
 * Implements hook_library_info_alter().
 */
function oab_marketo_library_info_alter(&$libraries, $extension) {

  $node = \Drupal::routeMatch()->getParameter('node');
  if (isset($libraries['marketo'])) {
    $conf = Drupal::config(OabSettingsPardotForm::getConfigName());
    $domain = $conf->get('mkt_to_domain');
    $munchkin = $conf->get('mkt_to_munchkin_id');
    $base_url = "https:$domain/rs/$munchkin";
    $libraries['marketo']['js'][$base_url . '/images/forms2.min.js'] = ["#type" => "external"];
    $libraries['marketo']['js'][$base_url . '/images/enhancedFormFunctions-v2.js'] = ["#type" => "external"];
    $libraries['marketo']['js'][$base_url . '/images/simpledto-multi-domain.js'] = ["#type" => "external"];
    $libraries['marketo']['js'][$base_url . '/images/OBSExternalEmbedCode.js'] = ["#type" => "external"];
  }

}


/**
 * Implements hook_() oab_backoffice_page_attachments for Marketo.
 * @param array $attachments datas nécessaires pour la construction du webform marketo
 */
function oab_marketo_page_attachments(array &$attachments) {

  $current_language = Drupal::languageManager()->getCurrentLanguage()->getId();

  $node = \Drupal::routeMatch()->getParameter('node');
  $marketo_conf = \Drupal::config(OabSettingsPardotForm::getConfigName());

  if (is_object($node) != false && $node->bundle() == 'document' && $current_language === 'fr') {

    if (isset($node->field_file->target_id)) {
      $media = Media::load($node->field_file->target_id);
      if ($media !== null) {
        $file = File::load($media->field_file->target_id);
      }
    }

    $attachments['#attached']['library'][] = 'oab_marketo/marketo';

    $attachments['#attached']['drupalSettings']['data_for_construction_webform_marketo'] = [
      'mktoDomain' => $marketo_conf->get('mkt_to_domain'),
      'mktoMunchkinID' => $marketo_conf->get('mkt_to_munchkin_id'),
      'mktoFormID' => (int)$marketo_conf->get('mkt_to_form_id'),
      'customFollowUpUrl' => $marketo_conf->get('mkt_custom_follow_up_url'),
      'followUpMsgDiv' => "FormFollowUpMessage_" . (int)$marketo_conf->get('mkt_to_form_id'),
      'formName' => $marketo_conf->get('mkt_form_name'),
      'mktPdfName' => isset($media) ? $media->label() : '',
      'mktoPdfLink' => isset($file) ? $file->url('canonical', ['absolute' => true]) : null,
      'mktoPdfTheme' => _oab_get_labels_from_term($node->get('field_document_thematic')),
      'mktoPdfRubrique' => _oab_get_labels_from_term($node->get('field_subhome')),
      'mktoPdftype' => _oab_get_labels_from_term($node->get('field_document_type')),
      'mktoPdfSolution' => _oab_get_labels_from_term($node->get('field_solution')),
      'mktoPdfJobroles' => _oab_get_labels_from_term($node->get('field_job_profile')),
      'mktoPdfSegment' => null,
      'mktoPdfCustomerjourney' => null,
      'mktoPdfIndustrie' => _oab_get_labels_from_term($node->get('field_industry')),
      'mktoFieldOrder' =>["submitButton","LegalInfos"]
    ];

    $attachments['#attached']['drupalSettings']['data_for_tealium'] = [
      'version' => $marketo_conf->get('mkt_version'),
      'sous_domaine' => $marketo_conf->get('mkt_sous_domaine'),
      'univers_affichage' => $marketo_conf->get('mkt_univers_affichage'),
    ];

  }
}

function oab_marketo_preprocess_paragraph(&$variables) {

  if (!isset($variables['paragraph'])) {
    return;
  }

  $marketo_conf = \Drupal::config(OabSettingsPardotForm::getConfigName());

  /** @var Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  if ($paragraph->bundle() === 'marketo') {
    $variables['#attached']['library'][] = 'oab_marketo/marketo';

    $referer = str_replace(Drupal::request()->getSchemeAndHttpHost(), '', Drupal::request()->headers->get('referer'));

    $variables['#attached']['drupalSettings']['data_for_construction_webform_marketo'] = [
      'mktoDomain' => $marketo_conf->get('mkt_to_domain'),
      'mktoMunchkinID' => $marketo_conf->get('mkt_to_munchkin_id'),
      'mktoFormID' => (int) $paragraph->field_form_id->value,
      'formName' => $paragraph->field_title->value,
      'customFollowUpUrl' => $paragraph->field_redirection_url->first()->getUrl()->toString(),
      'followUpMsgDiv' => "FormFollowUpMessage_" . (int) $paragraph->field_form_id->value,
      'mktoFrom' => $referer,
      'mktoFieldOrder' =>["submitButton","LegalInfos"]
    ];

    $variables['#attached']['drupalSettings']['data_for_tealium'] = [
      'version' => $marketo_conf->get('mkt_version'),
      'sous_domaine' => $marketo_conf->get('mkt_sous_domaine'),
      'univers_affichage' => $marketo_conf->get('mkt_univers_affichage'),
    ];

  }
}


/**
 * Implements hook_preprocess_HOOK().
 */
function oab_marketo_preprocess_node(&$variables) {

  $current_language = Drupal::languageManager()->getCurrentLanguage()->getId();

  if (!isset($variables['node'])) {
    return;
  }

  /** @var Node $node */
  $node = $variables['node'];

  if ($node->bundle() === 'document' && $current_language === 'fr') {

      if (null !== ($media = Media::load($node->field_file->target_id))) {
        if (null !== ($file = File::load($media->field_file->target_id))) {
          $variables['document_file_absolute_url'] = $file->url('canonical', ['absolute' => true]);
        }
      }

      $mkto_config = \Drupal::config(OabSettingsPardotForm::getConfigName());
      $variables['mkto_form_id'] = $mkto_config->get('mkt_to_form_id');
      $variables['mkto_follow_up_message'] = $mkto_config->get('mkt_form_follow_up_message');
  }
}


/**
 * @param $field
 * @return string|null
 * une fonction qui retourne la liste des terms associé à un seul contenu
 */
function _oab_get_labels_from_term($field) {
  $ret = [];
  $field_values = $field->getValue();
  if (is_array($field_values)) {
    foreach ($field_values as $value) {
      if (isset($value['target_id'])) {
        $term = Term::load($value['target_id']);
        $ret[] = strtolower($term->label());
      }
    }
  }
  return count($ret) ? implode('|', $ret) : null;
}

