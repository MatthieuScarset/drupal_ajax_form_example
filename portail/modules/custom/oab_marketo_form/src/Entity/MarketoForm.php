<?php

namespace Drupal\oab_marketo_form\Entity;

use Drupal\Core\Annotation\Translation;
use Drupal\Core\Entity\Annotation\ContentEntityType;
use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Language\Language;
use Drupal\Core\Language\LanguageInterface;
use Drupal\oab_marketo_form\Entity\MarketoFormInterface;


/**
 * Defines the MailingListItem entity.
 *
 * @ContentEntityType(
 *   id = "marketo_form",
 *   label = @Translation("Marketo Form"),
 *   base_table = "marketo_form",
 *   admin_permission = "administer marketo form",
 *   translatable = FALSE,
 *   handlers = {
 *     "list_builder" = "Drupal\oab_marketo_form\MarketoFormListBuilder",
 *     "form" = {
 *       "add" = "Drupal\oab_marketo_form\Form\MarketoFormForm",
 *       "edit" = "Drupal\oab_marketo_form\Form\MarketoFormForm",
 *       "delete" = "Drupal\oab_marketo_form\Form\MarketoFormDeleteForm"
 *     },
 *      "views_data" = "Drupal\views\EntityViewsData",
 *      "access" = "Drupal\oab_marketo_form\MarketoFormAccessControlHandler",
 *      "view_builder" = "Drupal\Core\Entity\EntityViewBuilder",
 *   },
 *   entity_keys = {
 *     "id" = "mfid",
 *     "form_name" = "form_name",
 *     "form_id" = "form_id",
 *   },
 *   links = {
 *     "delete-form" = "/admin/marketo/form/delete/{marketo_form}",
 *     "collection" = "/admin/marketo",
 *     "add-form" = "/admin/marketo/form/add",
 *     "edit-form" = "/admin/marketo/form/edit/{marketo_form}"
 *   }
 * )
 */
class MarketoForm extends ContentEntityBase implements MarketoFormInterface {



  /**
   * Override label methods to return email instead of empty string as label is not used
   * @return string
   */
  public function label() {
    return $this->getFormName();
  }

  public function id() {
    return $this->getEntityKey('mfid');
  }


  public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
    $fields = [];

    $fields['mfid'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('ID'))
      ->setDescription(t('The ID of the item'))
      ->setReadOnly(TRUE);

    $fields['form_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Form name'))
      ->setDescription(t('The name of the form'))
      ->setRevisionable(true)
      ->setDisplayOptions('form', [
        'type' => 'textfield',
        'settings' => array(
          'display_label' => TRUE,
        )
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setRequired(true);



    $fields['form_id'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Form ID'))
      ->setDescription(t('The marketo id'))
      ->setRevisionable(true)
      ->setDisplayOptions('form', [
        'type' => 'texfield',
        'settings' => array(
          'display_label' => TRUE,
        )
      ])
      ->setRequired(true)
      ->setDisplayConfigurable('form', TRUE);


    $fields['redirection_url'] = BaseFieldDefinition::create('link')
      ->setLabel(t('Redirection URL'))
      ->setDescription(t('The url to redirect the user to'))
      ->setRevisionable(true)
      ->setDisplayOptions('form', [
        'type' => 'texfield',
        'settings' => array(
          'display_label' => TRUE,
        )
      ])
      ->setRequired(true)
      ->setDisplayConfigurable('form', TRUE);


    $fields['message_of_thanks'] = BaseFieldDefinition::create('text')
      ->setLabel(t('Message of thanks'))
      ->setDescription(t('Thanks the user for applying your form'))
      ->setRevisionable(true)
      ->setDisplayOptions('form', [
        'type' => 'text_format',
        'settings' => array(
          'display_label' => TRUE,
        )
      ])
      ->setRequired(true)
      ->setDisplayConfigurable('form', TRUE);

    $fields['langcode'] = BaseFieldDefinition::create('language')
      ->setLabel(t('Language'))
      ->setDescription(t('Which mailing list it belongs to'))
      ->setDisplayOptions('form', [
        'type' => 'hidden'
      ])
      ->setRequired(true);

    return $fields + parent::baseFieldDefinitions($entity_type); // TODO: Change the autogenerated stub
  }

  public function getFormName() {
    return $this->get('form_name')->value;
  }


  public function getFormId() {
    return $this->get('form_id')->value;
  }

  /**
   * @param bool $as_object
   * @return string|LanguageInterface
   */
  public function langcode($as_object = false) {
    $langcode = $this->get('langcode')->value;
    if ($as_object) {
      return $this->languageManager()->getLanguage($langcode);
    }
    return $langcode;
  }


}
