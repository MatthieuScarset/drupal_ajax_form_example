<?php

use Drupal\node\Entity\Node;
use Drupal\field\Entity\FieldConfig;
use Drupal\taxonomy\Entity\Term;

/**
 * @param $sandbox : XXXXX
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 *
 * Commentaire de fonction a ajouter par Tristan
 */
function processUpdateWithSandbox_8088(&$sandbox) {

    // Lors du premier passage du batch, initialisation des variables + création du field et MAJ des termes
    $insight_vid = "thematic";
    if (!isset($sandbox['total'])) {

        // Ajout du champ aux elements
        $bundles = ["custom_page", "press_kit", "press_release", "product"];

        foreach ($bundles as $bundle) {
            $field = FieldConfig::loadByName('node', $bundle, 'field_insight');
            if (empty($field)) {
                $config_array = array('field_name' => 'field_insight', 'entity_type' => 'node', 'bundle' => $bundle, 'required' => false,);
                FieldConfig::create($config_array)->save();
            }

            oabt_YmlImport('field.field.node.' . $bundle . '.field_insight.yml');
            oabt_YmlImport('core.entity_form_display.node.' . $bundle . '.default.yml');
            oabt_YmlImport('core.entity_view_display.node.' . $bundle . '.default.yml');
        }

        // Suppression de tous les anciens termes
        /** @var Drupal\taxonomy\Entity\Term[] $terms */
        $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($insight_vid, 0, NULL, TRUE);

        foreach ($terms as $term) {
            $term->delete();
        }

        // Ajout des nouveaux termes
        $new_terms = [
            'en' => [
                "Big Data",
                "Cloud",
                "Collaboration",
                "Connectivity",
                "Customer Experience",
                "Digital Transformation",
                "IoT",
                "Mobility",
                "News",
                "Security"],
            'fr' => [
                'Cloud',
                'Collaboration',
                'Consulting',
                'E-Santé',
                'Innovation',
                'IoT & Data Analytics',
                'Mobile',
                'Relation client',
                'Réseaux',
                'Sécurité'],
            'ru' => [
                'Безопасность',
                'Голосовые услуги',
                'Индустрия',
                'Корпоративные сети',
                'Мобильность',
                'Облачные вычисления',
                'Унифицированные коммуникации',
                'Управление ИТ']
        ];

        foreach ($new_terms as $lang => $terms) {
            foreach ($terms as $term_label) {
                /** @var Drupal\taxonomy\Entity\Term $term */
                $term = Term::create(['vid' => $insight_vid, 'name' => $term_label, 'langcode' => $lang]);
                $term->save();
            }
        }

        // Pour Blog, Page Full HTML et Page Simple, je transfère les données du field field_blog_thematic au field
        $query = \Drupal::entityQuery('node')
            ->condition('type', ['blog_post', 'full_html', 'page_simple', 'document'], 'IN');
        $query->condition(
            $query->orConditionGroup()
                ->exists('field_blog_thematic')
                ->exists('field_document_thematic')
        );
        $nids = $query->execute();

        $sandbox['total'] = count($nids);
        $sandbox['current'] = 0;
        $sandbox['last_nid'] = 0;
        \Drupal::messenger()->addStatus($sandbox['total'] . ' nodes to process.');
    }

    $nodes_per_batch = 100;

    // Pour Blog, Page Full HTML et Page Simple, je transfère les données du field field_blog_thematic au field
    $query = \Drupal::entityQuery('node')
        ->condition('type', ['blog_post', 'full_html', 'page_simple', 'document'], 'IN');
    $query->condition($query->orConditionGroup()
        ->exists('field_blog_thematic')
        ->exists('field_document_thematic'));
    $query->range(0, $nodes_per_batch);
    $query->sort('nid', 'ASC');
    $query->condition('nid', isset($sandbox['last_nid']) ? $sandbox['last_nid'] : 0, '>');

    $ids = $query->execute();
    $nodes = Node::loadMultiple($ids);
    $count = 0;

    $toUpdate = [];

    /** @var Node $node */
    foreach ($nodes as $node) {

        //$node = Node::load($id);

        $terms_to_set = [];


        if ($node->bundle() != 'document') {
            $field_blog_thematic = $node->get('field_blog_thematic')->getValue();

            foreach ($field_blog_thematic as $value) {
                $term_blog_thematic = Term::load($value['target_id']);

                $term_name = $term_blog_thematic->getName();
                if($term_name == 'Cloud Computing') {
                    $term_name = 'Cloud';
                }

                $terms = \Drupal::entityManager()->getStorage('taxonomy_term')->loadByProperties(['name' => $term_name, 'vid' => $insight_vid]);
                $term = reset($terms);

                if ($term !== null && $term !== false) {
                    $terms_to_set[] = $term;
                }
            }
        } else {
            $field_doc_thematic = $node->get('field_document_thematic')->getValue();

            foreach ($field_doc_thematic as $value) {
                $term_doc_thematic = Term::load($value['target_id']);

                $term_name = $term_doc_thematic->getName();

                $terms = \Drupal::entityManager()->getStorage('taxonomy_term')->loadByProperties(['name' => $term_name, 'vid' => $insight_vid]);
                $term = reset($terms);

                if ($term !== null && $term !== false) {
                    $terms_to_set[] = $term;
                }
            }
        }



        if ($node->hasField('field_insight')) {
            /* Pour garder la date de MAJ initiale ;) */
            $toUpdate[] = ['nid' => $node->id(), 'changed' => $node->getChangedTime()];

            $node->set('field_insight', $terms_to_set);
            $node->save();

            $count++;
        }
        $sandbox['current']++;
        $sandbox['last_nid'] = $node->id();

    }

    // A la fin, j'update les dates de MAJ des contenus pour garder l'initiale (pour eviter que l'ordre dans les subhomes soient modifiés
    // et que ca remonte d'anciens contenus)
    foreach ($toUpdate as $row) {
        $connection = \Drupal::database();
        $connection->update('node_field_data')
            ->fields(['changed' => $row['changed']])
            ->condition('nid', $row['nid'])
            ->execute();
    }


    if ($sandbox['total'] == 0) {
        $sandbox['#finished'] = 1;
    } else {
        $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
    }

    // Fin : retour du message d'info
    if ($sandbox['#finished'] == 1 || $sandbox['#finished'] == true) {
        \Drupal::messenger()->addStatus($sandbox['current'] . ' nodes processed. ' . $count . ' mis à jour. nid actuel : ' . $sandbox['last_nid']);
    }

}