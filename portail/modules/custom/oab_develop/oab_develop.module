<?php

use Symfony\Component\Yaml\Yaml;
use Drupal\locale\SourceString;
use Drupal\oab_develop\Form\OabLogSettingsForm;

define('LOG_DIR', 'public://log/');

class OAB_Trace{

  public static function debug($elem, $message="") {
    echo '<pre>';
    if ($message<>"") {
      echo $message.'<br>';
    }
    print_r($elem);
    echo '</pre>';
  }
  public static function lock($elem) {
    self::debug($elem);
    die();
  }
}


/**
 * fonction de raccourci oabt
 */
function oabt($elem, $lock=false, $message="") {
  if ($lock) {
    OAB_Trace::lock($elem);
  } else {
    OAB_Trace::debug($elem, $message);
  }
}

function taxonomy_rename_taxo($old, $new, $vid, $lang) {
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', $vid);
    $query->condition('langcode', $lang);
    $query->condition('name', $old);
    $entity = $query->execute();
    if (isset($entity) && !empty($entity)) {
        foreach ($entity as $tid => $value) {
            $tid_rename = $tid;
        }
    } else {
        // creation du terme
        $entity = \Drupal\taxonomy\Entity\Term::create([
            'vid' => $vid,
            'name' => $new,
            'langcode' => $lang,
        ]);
        $entity->save();
        $tid_rename = $entity->id();
    }
    if (isset($tid_rename)) {
        $connection = \Drupal\Core\Database\Database::getConnection();
        $query = $connection->update('taxonomy_term_field_data');
        $query->fields([
            'name' => $new,
        ]);
        $query->condition('tid', $tid_rename);
        $query->execute();
    }
}

function taxonomy_delete_taxo($name, $vid, $lang) {
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', $vid);
    $query->condition('langcode', $lang);
    $query->condition('name', $name);
    $tids = $query->execute();

    if (!empty($tids)) {
        $controller = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
        $entities = $controller->loadMultiple($tids);
        $controller->delete($entities);
    }
}

function taxonomy_rename_vocab($name_voca, $default_name, $vid, $lang) {
//    $query = \Drupal::entityQuery('config');
//    $query->condition('name', "taxonomy.vocabulary.".$vid);
//    $entity = $query->execute();

    $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::load($vid);
    if (!isset($vocabulary)) {

        // create vocabulary
        $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::create(array(
            'vid' => $vid,
            'description' => '',
            'content_translation' => true,
            'name' => $default_name,
        ));
        $vocabulary->save();
    }

    // enable translation
    $service = \Drupal::service('content_translation.manager');
    $service->setEnabled('taxonomy_term', $vid, true);

    $config_factory = \Drupal::configFactory();
    $config_group = $config_factory->getEditable('language.content_settings.taxonomy_term.'.$vid);
    $config_group->set("language_alterable", true);
    $config_group->set("default_langcode", "current_interface");
    $config_group->save(TRUE);

    // update default name in english
        $config_group = $config_factory->getEditable('taxonomy.vocabulary.'.$vid);
        $config_group->set("name", $default_name);
        $config_group->save(TRUE);


    if ($lang != 'en') {
        $voca_config = \Drupal::languageManager()->getLanguageConfigOverride($lang, 'taxonomy.vocabulary.'.$vid);
        $voca_config->set('name', $name_voca);
        $voca_config->save();
    }
}

/** Permet de tester une chaine de caractère date par rapport au format attendu
 * @param $date date fournie sous forme string
 * @param $format format de la chaine attendu
 * @return bool
 */
function isValidDate($date, $format) {
    $d = DateTime::createFromFormat($format, $date);
    return $d && $d->format($format) == $date;
}


/**
 * Creation d'un field en bdd
 */
function createField($field_name, $bundle, $label, $type = 'text_long', $required = FALSE, $entity_type_id = 'node', $other_config = array()) {

    $field_storage = \Drupal\field\Entity\FieldStorageConfig::loadByName($entity_type_id, $field_name);
    if (empty($field_storage)) {
        \Drupal\field\Entity\FieldStorageConfig::create(array(
            'field_name' => $field_name,
            'entity_type' => $entity_type_id,
            'type' => $type,
        ))->save();
    } else {
        drupal_set_message('Field `'.$field_name.'` already exists in bundle');
    }

    $field = \Drupal\field\Entity\FieldConfig::loadByName($entity_type_id, $bundle, $field_name);
    if (empty($field)) {
        $config_array = array(
            'field_name' =>  $field_name,
            'entity_type' => $entity_type_id,
            'bundle' => $bundle,
            'label' => $label,
            'required' => $required,
        );
        if (!empty($other_config)) {
            $config_array = array_merge($config_array, $other_config);
        }
        \Drupal\field\Entity\FieldConfig::create($config_array)->save();
    } else {
        drupal_set_message('Field `'.$field_name.'` already exists in bundle `'.$bundle.'`');
    }
}

/**
 * Creation d'un field en bdd
 */
function createFieldReference($field_name, $bundle, $label, $target, $type = 'text_long', $required = FALSE, $entity_type_id = 'node', $other_config = array()) {

    $field_storage = \Drupal\field\Entity\FieldStorageConfig::loadByName($entity_type_id, $field_name);
    if (empty($field_storage)) {
        \Drupal\field\Entity\FieldStorageConfig::create(array(
            'field_name' => $field_name,
            'entity_type' => $entity_type_id,
            'type' => $type,
            'settings' => array('target_type' => $target)
        ))->save();
    } else {
        drupal_set_message('Field `'.$field_name.'` already exists in bundle');
    }

    $field = \Drupal\field\Entity\FieldConfig::loadByName($entity_type_id, $bundle, $field_name);
    if (empty($field)) {
        $config_array = array(
            'field_name' =>  $field_name,
            'entity_type' => $entity_type_id,
            'bundle' => $bundle,
            'label' => $label,
            'required' => $required,
            ''
        );
        if (!empty($other_config)) {
            $config_array = array_merge($config_array, $other_config);
        }
        \Drupal\field\Entity\FieldConfig::create($config_array)->save();
    } else {
        drupal_set_message('Field `'.$field_name.'` already exists in bundle `'.$bundle.'`');
    }
}

function loadConfigField($folder, $key) {
    $config_path = drupal_get_path('module', 'oab_backoffice') . '/config/'.$folder.'/'.$key.'.yml';
    $data = Yaml::parse($config_path);
    \Drupal::configFactory()->getEditable($key)->setData($data)->save(TRUE);
}

/** Permet de sauvegarder les chaines de traduction
 * @param $source_import
 * @param $language_import "fr"
 * @param $translation_import
 * @return bool
 */

function oabt_TranslationImport($source_import, $language_import, $translation_import) {
  // traductions
  $translations = array(
    array(
      "source" => $source_import,
      "translation" => array($language_import => $translation_import)
    ),
  );

  $storage = \Drupal::service('locale.storage');

  foreach ($translations AS $translation) {
    $string = $storage->findString(array('source' => $translation['source']));
    if (is_null($string)) {
      $string = new SourceString();
      $string->setString($translation['source']);
      $string->setStorage($storage);
      $string->save();
    }

    foreach ($translation['translation'] AS $language => $translated_string) {
      // Create translation. If one already exists, it will be replaced.
      $translation = $storage->createTranslation(array(
        'lid' => $string->lid,
        'language' => $language,
        'translation' => $translated_string,
      ))->save();
    }
  }
}

/** Permet de faire un import yml d'un module au format fichier
 * @param $file_name nom du fichier avec extention .yml
 * @param $dir_name sous-arbo de config dans le module cible
 * @param $module_name module cible du fichier yml sous forme string
 * @return bool
 */
function oabt_YmlImport($file_name, $dir_name="/", $module_name="oab_backoffice") {

  $file_name_lessext =  substr($file_name, 0, -4);

  if ($dir_name=="/") {
    $tab_file_name_lessext = explode('.', $file_name);
    $dir_name .= $tab_file_name_lessext[1]."/";
  }

  $config_path = drupal_get_path('module', $module_name) . '/config' . $dir_name . $file_name;
  $data = Yaml::parse(file_get_contents($config_path));
  \Drupal::configFactory()->getEditable($file_name_lessext)->setData($data)->save(TRUE);

  return true;
}

function oabt_taxoAddDescription($term_id, $text) {
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('tid', $term_id);
    $entity = $query->execute();
    if (isset($entity)) {
        foreach ($entity as $tid) {
            // on update le champ description
            $term_update = \Drupal\taxonomy\Entity\Term::load($tid);
            $term_update->set('description', $text);
            $term_update->save();
        }
    }
}


/**
 * fonction de tracelog en fichier
 */
function oabt_tracelog($module, $message, $dirpath="oabt") {

    $dir = \Drupal::service('file_system')->realpath(LOG_DIR);
    if (!file_exists($dir)) {
        mkdir($dir);
    }

    $dir = \Drupal::service('file_system')->realpath(LOG_DIR . $dirpath);
    if (!file_exists($dir)) {
        mkdir($dir);
    }
    $file = date("Y_m_d")."_log.txt";
    $fp = fopen($dir."/".$file, 'a');

    fputs($fp, date("Y/m/d H:i ") . utf8_encode($module . ' | ' . $message) . PHP_EOL);
    fclose($fp);
}

/**
 * On check le dosier de log et on envoie par mail les fichier qui y sont présents, puis on supprime tout
 */
function oab_develop_cron() {
    $dir = \Drupal::service('file_system')->realpath(LOG_DIR . 'oabt');

    if (file_exists($dir)) {
        $files = array_diff(scandir($dir), array('..', '.'));

        if (count($files) > 0) {
            // Liste des destinataires en conf
            $mails = Drupal::config(OabLogSettingsForm::getConfigName())->get(OabLogSettingsForm::MAILS_DESTINATAIRE);

            // Préparation des fichiers
            $erreurs = "";
            foreach ($files as $file_name) {
                $erreurs .= file_get_contents($dir . '/' . $file_name);
                file_unmanaged_delete($dir . '/' . $file_name);
            }

            $params['subject'] = "Notifications d'erreurs sur orange-business.com";
            $params['body'] = "Veuillez trouvez en PJ les logs d'obs.com<br />" . nl2br($erreurs) . "<br />Cordialement,<br />L'equipe ruby";
            \Drupal::service('plugin.manager.mail')->mail('oab_develop', 'mail_log', $mails, 'fr', $params);
        }
    }
}

function oab_develop_mail($key, &$message, $params) {
    switch ($key) {
        case 'mail_log':
            $message['send'] = true;

            $message['subject'] = $params['subject'];
            $message['body'] = array($params['body']);
            break;
    }
}
