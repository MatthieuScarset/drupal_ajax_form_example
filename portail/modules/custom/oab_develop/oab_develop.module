<?php

use Symfony\Component\Yaml\Yaml;

class OAB_Trace{

  static function debug($elem, $message=""){
    echo '<pre>';
    if($message<>""){
      echo $message.'<br>';
    }
    print_r($elem);
    echo '</pre>';
  }
  static function lock($elem){
    self::debug($elem);
    die();
  }
}


/**
 * fonction de raccourci oabt
 */
function oabt($elem, $lock=false, $message=""){
  if($lock){
    OAB_Trace::lock($elem);
  }else{
    OAB_Trace::debug($elem,$message);
  }
}

function taxonomy_rename_taxo($old, $new, $vid, $lang){
	$query = \Drupal::entityQuery('taxonomy_term');
	$query->condition('vid', $vid);
	$query->condition('langcode', $lang);
	$query->condition('name', $old);
	$entity = $query->execute();
	if(isset($entity) && !empty($entity)) {
		foreach ($entity as $tid => $value){
			$tidRename = $tid;
		}
	}else{
		// creation du terme
		$entity = \Drupal\taxonomy\Entity\Term::create([
			'vid' => $vid,
			'name' => $new,
			'langcode' => $lang,
		]);
		$entity->save();
		$tidRename = $entity->id();
	}
	if(isset($tidRename)){
		$connection = \Drupal\Core\Database\Database::getConnection();
		$query = $connection->update('taxonomy_term_field_data');
		$query->fields([
			'name' => $new,
		]);
		$query->condition('tid',$tidRename);
		$query->execute();
	}
}

function taxonomy_delete_taxo($name, $vid, $lang){
	$query = \Drupal::entityQuery('taxonomy_term');
	$query->condition('vid', $vid);
	$query->condition('langcode', $lang);
	$query->condition('name', $name);
	$tids = $query->execute();

	if (!empty($tids)){
		$controller = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
		$entities = $controller->loadMultiple($tids);
		$controller->delete($entities);
	}
}

function taxonomy_rename_vocab($nameVoca, $defaultName, $vid, $lang){
//	$query = \Drupal::entityQuery('config');
//	$query->condition('name', "taxonomy.vocabulary.".$vid);
//	$entity = $query->execute();

	$vocabulary = \Drupal\taxonomy\Entity\Vocabulary::load($vid);
	if (!isset($vocabulary)) {

		// create vocabulary
		$vocabulary = \Drupal\taxonomy\Entity\Vocabulary::create(array(
			'vid' => $vid,
			'description' => '',
			'content_translation' => true,
			'name' => $defaultName,
		));
		$vocabulary->save();
	}

	// enable translation
	$service = \Drupal::service('content_translation.manager');
	$service->setEnabled('taxonomy_term',$vid, true );

	$config_factory = \Drupal::configFactory();
	$config_group = $config_factory->getEditable('language.content_settings.taxonomy_term.'.$vid);
	$config_group->set("language_alterable", true);
	$config_group->set("default_langcode", "current_interface");
	$config_group->save(TRUE);

	// update default name in english
		$config_group = $config_factory->getEditable('taxonomy.vocabulary.'.$vid);
		$config_group->set("name", $defaultName);
		$config_group->save(TRUE);


	if($lang != 'en'){
		$vocaConfig = \Drupal::languageManager()->getLanguageConfigOverride($lang,'taxonomy.vocabulary.'.$vid);
		$vocaConfig->set('name', $nameVoca);
		$vocaConfig->save();
	}
}

/** Permet de tester une chaine de caractÃ¨re date par rapport au format attendu
 * @param $date date fournie sous forme string
 * @param $format format de la chaine attendu
 * @return bool
 */
function isValidDate($date, $format)
{
	$d = DateTime::createFromFormat($format, $date);
	return $d && $d->format($format) == $date;
}


/**
 * Creation d'un field en bdd
 */
function createField($field_name, $bundle,  $label, $type = 'text_long', $required = FALSE, $entity_type_id = 'node', $other_config = array()){

	$field_storage = \Drupal\field\Entity\FieldStorageConfig::loadByName($entity_type_id, $field_name);
	if(empty($field_storage)) {
		\Drupal\field\Entity\FieldStorageConfig::create(array(
			'field_name' => $field_name,
			'entity_type' => $entity_type_id,
			'type' => $type,
		))->save();
	}else{
		drupal_set_message('Field `'.$field_name.'` already exists in bundle');
	}

	$field = \Drupal\field\Entity\FieldConfig::loadByName($entity_type_id, $bundle, $field_name);
	if(empty($field)) {
		$config_array = array(
			'field_name' =>  $field_name,
			'entity_type' => $entity_type_id,
			'bundle' => $bundle,
			'label' => $label,
			'required' => $required,
		);
		if(!empty($other_config)){
			$config_array = array_merge($config_array, $other_config);
		}
		\Drupal\field\Entity\FieldConfig::create($config_array)->save();
	}else{
		drupal_set_message('Field `'.$field_name.'` already exists in bundle `'.$bundle.'`');
	}
}

/**
 * Creation d'un field en bdd
 */
function createFieldReference($field_name, $bundle,  $label, $target, $type = 'text_long', $required = FALSE, $entity_type_id = 'node', $other_config = array()){

	$field_storage = \Drupal\field\Entity\FieldStorageConfig::loadByName($entity_type_id, $field_name);
	if(empty($field_storage)) {
		\Drupal\field\Entity\FieldStorageConfig::create(array(
			'field_name' => $field_name,
			'entity_type' => $entity_type_id,
			'type' => $type,
			'settings' => array('target_type' => $target)
		))->save();
	}else{
		drupal_set_message('Field `'.$field_name.'` already exists in bundle');
	}

	$field = \Drupal\field\Entity\FieldConfig::loadByName($entity_type_id, $bundle, $field_name);
	if(empty($field)) {
		$config_array = array(
			'field_name' =>  $field_name,
			'entity_type' => $entity_type_id,
			'bundle' => $bundle,
			'label' => $label,
			'required' => $required,
			''
		);
		if(!empty($other_config)){
			$config_array = array_merge($config_array, $other_config);
		}
		\Drupal\field\Entity\FieldConfig::create($config_array)->save();
	}else{
		drupal_set_message('Field `'.$field_name.'` already exists in bundle `'.$bundle.'`');
	}
}

function loadConfigField($folder, $key){
    $config_path = drupal_get_path('module', 'oab_backoffice') . '/config/'.$folder.'/'.$key.'.yml';
    $data = Yaml::parse($config_path);
    \Drupal::configFactory()->getEditable($key)->setData($data)->save(TRUE);
}

/** Permet de sauvegarder les chaines de traduction
 * @param $source_import
 * @param $language_import "fr"
 * @param $translation_import
 * @return bool
 */

function oabt_TranslationImport($source_import,$language_import,$translation_import) {
  // traductions
  $translations = array(
    array(
      "source" => $source_import,
      "translation" => array($language_import => $translation_import)
    ),
  );

  $storage = \Drupal::service('locale.storage');

  foreach ($translations AS $translation) {
    $string = $storage->findString(array('source' => $translation['source']));
    if (is_null($string)) {
      $string = new SourceString();
      $string->setString($translation['source']);
      $string->setStorage($storage);
      $string->save();
    }

    foreach ($translation['translation'] AS $language => $translated_string) {
      // Create translation. If one already exists, it will be replaced.
      $translation = $storage->createTranslation(array(
        'lid' => $string->lid,
        'language' => $language,
        'translation' => $translated_string,
      ))->save();
    }
  }
}


/** Permet de faire un import yml d'un module au format fichier
 * @param $file_name nom du fichier avec extention .yml
 * @param $dir_name sous-arbo de config dans le module cible
 * @param $module_name module cible du fichier yml sous forme string
 * @return bool
 */
function oabt_YmlImport($file_name,$dir_name="/",$module_name="oab_backoffice")
{

  $file_name_lessext =  substr($file_name,0,-4);

  if($dir_name=="/"){
    $tab_file_name_lessext = explode('.',$file_name);
    $dir_name .= $tab_file_name_lessext[1]."/";
  }

  $config_path = drupal_get_path('module', $module_name) . '/config' . $dir_name . $file_name;
  $data = Yaml::parse($config_path);
  \Drupal::configFactory()->getEditable($file_name_lessext)->setData($data)->save(TRUE);

  /*

  field.storage.node.field_phone_number.yml

  uuid: 0358c006-2a4c-4163-aaa1-c42e2c8f8fde
  langcode: en
  status: true
  dependencies:
    module:
      - node
  id: node.field_phone_number
  field_name: field_phone_number
  entity_type: node
  type: string
  settings:
    max_length: 255
    is_ascii: false
    case_sensitive: false
  module: core
  locked: false
  cardinality: 1
  translatable: false
  indexes: {  }
  persist_with_no_fields: false
  custom_storage: false

  CREATE TABLE `node__field_phone_number` (
    `bundle` varchar(128) CHARACTER SET ascii NOT NULL DEFAULT '' COMMENT 'The field instance bundle to which this row belongs, used when deleting a field instance',
    `deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT 'A boolean indicating whether this data item has been deleted',
    `entity_id` int(10) UNSIGNED NOT NULL COMMENT 'The entity id this data is attached to',
    `revision_id` int(10) UNSIGNED NOT NULL COMMENT 'The entity revision id this data is attached to',
    `langcode` varchar(32) CHARACTER SET ascii NOT NULL DEFAULT '' COMMENT 'The language code for this data item.',
    `delta` int(10) UNSIGNED NOT NULL COMMENT 'The sequence number for this data item, used for multi-value fields',
    `field_phone_number_value` varchar(255) NOT NULL
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='Data storage for node field field_phone_number.';

  CREATE TABLE `node_revision__field_phone_number` (
    `bundle` varchar(128) CHARACTER SET ascii NOT NULL DEFAULT '' COMMENT 'The field instance bundle to which this row belongs, used when deleting a field instance',
    `deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT 'A boolean indicating whether this data item has been deleted',
    `entity_id` int(10) UNSIGNED NOT NULL COMMENT 'The entity id this data is attached to',
    `revision_id` int(10) UNSIGNED NOT NULL COMMENT 'The entity revision id this data is attached to',
    `langcode` varchar(32) CHARACTER SET ascii NOT NULL DEFAULT '' COMMENT 'The language code for this data item.',
    `delta` int(10) UNSIGNED NOT NULL COMMENT 'The sequence number for this data item, used for multi-value fields',
    `field_phone_number_value` varchar(255) NOT NULL
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='Revision archive storage for node field field_phone_number.';


  */



  return true;
}


