<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\editor\Entity\Editor;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;

include_once 'includes/mediatheque.inc';
define ('CONTENT_TAXO_FIELDS', serialize(array('field_area', 'field_blog', 'field_customer_story', 'field_industry', 'field_magazine', 'field_partner', 'field_solution', 'field_section')));

/**
 * Implements hook_form_alter().
 */
function oab_backoffice_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //\Drupal::logger('oab_backoffice')->notice('form id = '.$form_id);
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $languages = \Drupal::languageManager()->getLanguages();

  $edit_form = false;

  if (preg_match('@node_(.*)_form@', $form_id)){
    $current_user_language = Drupal::currentUser()->getPreferredLangcode();
    $edit_form = true;
  }

  if (preg_match('@node_(.*)_edit_form@', $form_id)){
    $current_user_language = $current_language;

    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $node_language = $node->language();
      $node_langcode = $node_language->getId();

      $current_user_language = $node_langcode;
    }
    $edit_form = true;
  }

  // gestion de la taxonomie
  // affichage de la langue
  if (defined('CONTENT_TAXO_FIELDS')) {
    $CONTENT_TAXO_FIELDS = unserialize(CONTENT_TAXO_FIELDS);
    foreach ($CONTENT_TAXO_FIELDS AS $field) {
      if (isset($form[$field]['widget']['#options'])) {
        foreach ($form[$field]['widget']['#options'] AS $key => &$value) {
          if (is_int($key)) {
            $term = \Drupal\taxonomy\Entity\Term::load($key);

            $value .= ' (' . strtoupper($term->language()->getId()) . ')';

            $term_language = $term->language()->getId();
            if ($term_language !== $current_user_language
            && isset($languages[$term_language])
            && $edit_form){
              unset($form[$field]['widget']['#options'][$key]);
            }
          }
        }
      }
    }
  }

  // page de liste des taxonomies
  if ($form_id == 'taxonomy_overview_terms'){
    if (isset($form['terms'])){
      foreach ($form['terms'] AS $key => $value){
        if (preg_match('@^tid:@', $key)){
          if (isset($form['terms'][$key]['term']['#title'])
          && isset($form['terms'][$key]['#term'])
          && is_object($form['terms'][$key]['#term'])){
            $term_language = $form['terms'][$key]['#term']->language()->getId();
            $form['terms'][$key]['term']['#title'] .= ' (' . strtoupper($term_language) . ')';
          }
        }
      }
    }
  }

  // filtres exposés de views
  if ($form_id == 'views_exposed_form'){
    // $form['#id']
  }

  if ($form_id == 'node_profil_redacteur_form'
  || $form_id == 'node_profil_redacteur_edit_form'){
    $form['field_social_accounts']['#cardinality_multiple'] = false;

    if (isset($form['field_social_accounts']['widget'])
    && is_array($form['field_social_accounts']['widget'])){
      $form['field_social_accounts']['widget']['#cardinality_multiple'] = false;

      foreach ($form['field_social_accounts']['widget'] AS $key => &$value){
        if (isset($value['value']['#title'])) {
          switch ($key){
            case '0':
              $value['value']['#title'] = t('Twitter account');
              break;
            case '1':
              $value['value']['#title'] = t('LinkedIn account');
              break;
            case '2':
              $value['value']['#title'] = t('Viadeo account');
              break;
            case '3':
              $value['value']['#title'] = t('Google + account');
              break;
          }
          $value['value']['#title_display'] = 'before';
        }
        if (isset($value['_weight'])){
          $value['_weight']['#access'] = false;
        }
      }
    }
  }


  if ($form_id == 'node_container_form'
  || $form_id == 'node_container_edit_form') {

    if ($form_id == 'node_container_form') {
      if (isset($_GET['rendering_model_tid'])) {
        $tid = $_GET['rendering_model_tid'];
        $form['field_rendering_model']['widget']['#default_value'] = $tid;
      }
    }
    if (isset($form['field_rendering_model']['widget']['#default_value'])) {
      if (is_array($form['field_rendering_model']['widget']['#default_value'])) {
        $current_rendering_model = $form['field_rendering_model']['widget']['#default_value'][0];
      } else {
        $current_rendering_model = $form['field_rendering_model']['widget']['#default_value'];
      }
    }
    else{
      $current_rendering_model = 'Container';
    }
    // gestion du champ rendering model
    $form['field_rendering_model']['#disabled'] = TRUE;
    $form['field_rendering_model']['#access'] = FALSE;
    $form['field_rendering_model_markup'] = [
      '#type' => 'item',
      '#title' => $form['field_rendering_model']['widget']['#title'],
      '#markup' => $form['field_rendering_model']['widget']['#options'][$current_rendering_model],
      '#weight' => $form['field_rendering_model']['#weight'],
    ];
    $form['#fieldgroups']['group_general']->children[] = 'field_rendering_model_markup';
    $form['#group_children']['field_rendering_model_markup'] = 'group_general';

    // positionnement des champs dates
    if (isset($form['field_start_date'])
      && isset($form['field_end_date'])){
      $form['field_start_date']['#attributes']['style'] = 'float: left; margin-right: 30px;';
      $form['field_end_date']['#attributes']['style'] = 'float: left; margin-right: 30px;';
    }
    
  // lien pour accéder à l'aide au template
    //kprint_r($form['field_content_field']);
    /*$form['field_templating_tooltips'] = [
      '#type' => 'item',
      '#title' => '',
      '#markup' => '<a href=""><span class="ui-icon ui-icon-lightbulb"></span></a>',
      '#weight' => -99,
    ];
    $form['#fieldgroups']['group_contenu']->children[] = 'field_templating_tooltips';
    $form['#group_children']['field_templating_tooltips'] = 'group_contenu';*/

    // disposition des taxonomies
    foreach ($form['#fieldgroups']['group_taxonomie']->children AS $field){
      if (isset($form[$field])){
        //kprint_r($form[$field]['widget']);
        $form[$field]['#attributes']['style'] = "float: left; margin-right: 50px;";
        $form[$field]['widget']['#size'] = 15;
      }
    }

    $last_taxonomie = end($form['#fieldgroups']['group_taxonomie']->children);
    $form[$last_taxonomie]['#suffix'] = '<div class="clearfix"></div>';

    //gestion des taxonomies à afficher par type de container
    $hide_field_container = [
      'blog_post' => ['field_magazine', 'field_area', 'field_document_type', 'field_topic', 'field_file', 'field_country', 'field_city'],
      'magazine' => ['field_blog', 'field_area', 'field_document_type', 'field_topic', 'field_file', 'field_country', 'field_city'],
      'magazine_interview' => ['field_blog', 'field_area', 'field_document_type', 'field_topic', 'field_file', 'field_country', 'field_city'],
      'press_release' => ['field_blog', 'field_magazine', 'field_document_type', 'field_topic', 'field_profile'],
      'press_kit' => ['field_blog', 'field_magazine', 'field_document_type', 'field_topic', 'field_profile', 'field_country', 'field_city'],
      'document' => ['field_blog', 'field_magazine', 'field_profile', 'field_country', 'field_city'],
      'simple_page' => ['field_blog', 'field_magazine', 'field_document_type', 'field_topic', 'field_profile', 'field_file', 'field_country', 'field_city'],
      'case_study' => ['field_blog', 'field_magazine', 'field_document_type', 'field_topic', 'field_profile', 'field_file', 'field_country', 'field_city'],
    ];
    $required_fields = [
      'blog_post' => ['field_blog'],
      'magazine' => ['field_magazine'],
      'magazine_interview' => ['field_magazine'],
      'press_release' => ['field_file'],
      'press_kit' => ['field_file'],
      'document' => ['field_document_type'],
      'simple_page' => [],
      'case_study' => [],
    ];
    $current_container_type = \Drupal\taxonomy\Entity\Term::load($current_rendering_model);
    if (is_object($current_container_type)){
      $taxonomie_machine_name = $current_container_type->get('field_machine_name')->value;

      if (isset($hide_field_container[$taxonomie_machine_name])) {
        foreach ($hide_field_container[$taxonomie_machine_name] AS $field) {
          if (isset($form[$field])) {
            $form[$field]['#access'] = FALSE;
          }
        }
      }

      if (isset($required_fields[$taxonomie_machine_name])) {
        foreach ($required_fields[$taxonomie_machine_name] AS $field) {
          if (isset($form[$field])) {
            $form[$field]['widget']['#required'] = TRUE;
          }
        }
      }
    }

    if ($form_id == 'node_container_form') {
      $form['#title'] = t('Create @name', array('@name' => $current_container_type->get('name')->value));
    }
    else{
      $form['#title'] = t('<em>Edit @type</em> @title', array('@type' => $current_container_type->get('name')->value, '@title' => ""));
    }

    // valeur par défaut pour le champ "display_title"
    // dans le cas d'une edition et que la valeur n'existe pas encore
    if ($form_id == 'node_container_edit_form')
    {
      if ($node = \Drupal::routeMatch()->getParameter('node'))
      {
        $content_type = $node->bundle();
        $definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $content_type);
        if (isset($definitions)
        && array_key_exists('field_display_title', $definitions))
        {
          if ($display_title = $node->get('field_display_title')->getValue()) {
            if (!isset($display_title[0]['value'])) {
              $form['field_display_title']['widget']['value']['#default_value'] = TRUE;
            }
          }
        }
      }
    }
  }

  //pour la médiathèque : sélection des images dans la liste
  if($form_id == 'entity_browser_browse_medias_iframe_form'
    || $form_id =='entity_browser_browse_media_modal_form'
    || $form_id =='entity_browser_browser_file_modal_form')
  {
    $form['#attached']['library'][] = 'oab_backoffice/mediatheque';
  }

  // enlever les bouton "sauvegarder et publier" et "sauvegarder et dépublier"
  if (preg_match('@^node_@', $form_id)) {
    if (isset($form['actions']['publish'])) {
      $form['actions']['publish']['#access'] = FALSE;
    }
    if (isset($form['actions']['unpublish'])) {
      $form['actions']['unpublish']['#access'] = FALSE;
    }
    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#access'] = TRUE;
    }
  }

  if ($form_id == 'user_register_form'
  || $form_id == 'user_form'){
    if (isset($form['account']['roles']['#options'])
    && is_array($form['account']['roles']['#options'])){
      $roles_option = $form['account']['roles']['#options'];
      foreach($roles_option AS $key => $value){
        if ($key != 'authenticated') {
          if (!\Drupal::currentUser()->hasPermission('assign ' . $key . ' role')) {
            if (in_array($key, $form['account']['roles']['#default_value'])) {
              $form['account']['roles'][$key] = array(
                '#default_value' => TRUE,
                '#disabled' => TRUE
              );
            }
            else {
              unset($form['account']['roles']['#options'][$key]);
            }
          }
        }
      }
    }
  }

  // Ajout de champ dans les menus
  if($form_id == 'menu_link_content_menu_link_content_form') {
    $menuLinkEntity = _oab_backoffice_get_menu_link_entity_from_form_state($form_state);
    $linkOptions = $menuLinkEntity->link->first()->options;
    $linkTarget = !empty($linkOptions['target']) ? true : false;
    $linkIcon = !empty($linkOptions['icon']) ? $linkOptions['icon']: array();
    $linkClasstag = !empty($linkOptions['classtag']) ? $linkOptions['classtag']: array();

    $form['link_target'] = array(
      '#type' => 'checkbox',
      '#title' => t('Open in a new window'),
      '#description' => t('check to open the link in a new window'),
      '#default_value' => $linkTarget,
      '#weight' => -2
    );

    $form['link_icon'] = array(
        '#type' => 'textfield',
        '#title' => t('Font Awesome Icon'),
        '#description' => t('type your icon class code'),
        '#default_value' => $linkIcon,
        '#weight' => -3
    );

    $form['link_classtag'] = array(
        '#type' => 'textfield',
        '#title' => t('Link Tag Class'),
        '#description' => t('type your link tag class'),
        '#default_value' => $linkClasstag,
        '#weight' => -4
    );

    $form['actions']['submit']['#submit'][] = 'oab_backoffice_menu_link_submit';
  }
}

function oab_backoffice_menu_link_submit(&$form, FormStateInterface $form_state){
  $values = $form_state->getValues();
  $link_target = array();
  $link_icon = array();
  $link_classtag = array();

  if (isset($values['link_target'])
    && !empty($values['link_target'])) {
    $link_target = trim($values['link_target']);
  }

  if (isset($values['link_icon'])
      && !empty($values['link_icon'])) {
    $link_icon = trim($values['link_icon']);
  }

  if (isset($values['link_classtag'])
      && !empty($values['link_classtag'])) {
    $link_classtag = trim($values['link_classtag']);
  }

  $menuLinkEntity = _oab_backoffice_get_menu_link_entity_from_form_state($form_state);
  $options = $menuLinkEntity->link->first()->options;

  $changed = FALSE;
  if (empty($link_target)) {
    if (!empty($options['target'])) {
      unset($options['target']);
      $changed = TRUE;
    }
  }
  else {
    $options['target'] = $link_target ? '_blank' : '_self' ;
    $changed = TRUE;
  }

  if (empty($link_icon)) {
    if (!empty($options['icon'])) {
      unset($options['icon']);
      $changed = TRUE;
    }
  }
  else {
    $options['icon'] = $link_icon ;
    $changed = TRUE;
  }

  if (empty($link_classtag)) {
    if (!empty($options['classtag'])) {
      unset($options['classtag']);
      $changed = TRUE;
    }
  }
  else {
    $options['classtag'] = $link_classtag ;
    $changed = TRUE;
  }

  if ($changed) {
    $menuLinkEntity->link->first()->options = $options;
    $menuLinkEntity->save();
  }
}

function oab_backoffice_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match){
  switch ($route_name){
    case 'node.add_page':
      return '<h3>' . t('Please choose a model rendering :') . '</h3>';
      break;
  }
}

function oab_backoffice_ckeditor_css_alter(array &$css, Editor $editor) {
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/boosted/css/bootstrap-orange2015.min.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/boosted/css/boosted2015.min.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/font-awesome.min.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/background.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/buttons.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/shareIcons.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/textes.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/layout.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/nodes.css';
}


function oab_backoffice_menu_local_tasks_alter(&$data, $route_name){
  if (isset($data['tabs'][0]) && is_array($data['tabs'][0])){
    foreach ($data['tabs'][0] AS $key => $value){
      if (isset($value['#link']['url'])){
        $local_task_link_url = $value['#link']['url'];
        $routeName = $local_task_link_url->getRouteName();
        switch ($routeName){
          case 'system.admin_content':
            $data['tabs'][0][$key]['#weight'] = 0;
            break;
          case 'view.dashboard.page_1':
            $data['tabs'][0][$key]['#weight'] = 1;
            break;
          case 'view.media.media_page_list':
            $data['tabs'][0][$key]['#weight'] = 2;
            break;
          case 'view.files.page_1':
            $data['tabs'][0][$key]['#weight'] = 3;
            break;
          case 'comment.admin':
            $data['tabs'][0][$key]['#weight'] = 4;
            break;
        }
      }
    }
  }
}


function oab_backoffice_entity_view_mode_alter(&$view_mode, Drupal\Core\Entity\EntityInterface $entity, $context)
{
  if($view_mode == 'full')
  {
    $nid = $entity->nid->value;
    $content_type = $entity->bundle();
    if ($content_type == 'container') {
      $rendering_model = $entity->get('field_rendering_model')->getValue();
      if(isset($rendering_model[0]['target_id']) && !empty($rendering_model[0]['target_id']))
      {
        $rendering_model_tid = $rendering_model[0]['target_id'];
        $rendering_model_term = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->load($rendering_model_tid);
        //on vérifie que le machine_name a bien été renseigné
        if (isset($rendering_model_term->field_machine_name->value) && !empty($rendering_model_term->field_machine_name->value)) {
          $rendering_model_type = $rendering_model_term->field_machine_name->value;
        }
      }

      if(isset($rendering_model_type)) {
        switch ($rendering_model_type) {
          case 'blog_post' :
            $view_mode = 'blog_post';
            break;
          case 'magazine' :
          case 'magazine_interview' :
            $view_mode = 'magazine';
            break;
          case 'press_release' :
          case 'press_kit' :
            $view_mode = 'press_release';
            break;
          case 'case_study' :
            $view_mode = 'case_study';
            break;
          case 'simple_page' :
            $view_mode = 'simple_page';
            break;
          case 'document' :
            $view_mode = 'document';
            break;
        }
      }
    }
  }
}

function _oab_backoffice_get_menu_link_entity_from_form_state(FormStateInterface $form_state){
  $buildInfo = $form_state->getBuildInfo();
  $menuLinkContentForm = $buildInfo['callback_object'];
  return $menuLinkContentForm->getEntity();
}

// ajout du type de rendu des champs "path" pour la traduction
function oab_backoffice_config_schema_info_alter(&$definitions) {
  $definitions['path']['form_element_class'] = '\Drupal\config_translation\FormElement\Textfield';
}

/**
 * Implements hook_library_info_alter().
 */
function oab_backoffice_library_info_alter(&$libraries, $extension) {
  if ($extension == 'oab_backoffice' && isset($libraries['jira'])) {
    $jira_url = \Drupal::config('block.block.jirareportblock')->get('settings');
    if (isset($jira_url['jira_report_code'])){
      $libraries['jira']['js'] = [$jira_url['jira_report_code'] => array('external' => true)];
    }
  }
}

