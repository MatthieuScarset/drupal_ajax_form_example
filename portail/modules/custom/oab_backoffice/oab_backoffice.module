<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\editor\Entity\Editor;

define ('CONTENT_TAXO_FIELDS', serialize(array('field_area', 'field_blog', 'field_customer_story', 'field_industry', 'field_magazine', 'field_partner', 'field_solution')));

/**
 * Implements hook_form_alter().
 */
function oab_backoffice_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $languages = \Drupal::languageManager()->getLanguages();

  // gestion de la taxonomie
  // affichage de la langue
  // suppression de l'option s'elle appartient à une autre langue
  $edit_form = false;
  if (preg_match('@node_(.*)_edit_form@', $form_id)){
    $edit_form = true;
  }
  if (defined('CONTENT_TAXO_FIELDS')) {
    $CONTENT_TAXO_FIELDS = unserialize(CONTENT_TAXO_FIELDS);
    foreach ($CONTENT_TAXO_FIELDS AS $field) {
      if (isset($form[$field]['widget']['#options'])) {
        foreach ($form[$field]['widget']['#options'] AS $key => &$value){
          if (is_int($key)) {
            $term = \Drupal\taxonomy\Entity\Term::load($key);
            $term_language = $term->language()->getId();

            $value .= ' (' . t($term->language()->getName()) . ')';

            if ($term_language !== $current_language
            && isset($languages[$term_language])
            && $edit_form){
              unset($form[$field]['widget']['#options'][$key]);
            }
          }
        }
      }
    }
  }

  // filtres exposés de views
  if ($form_id == 'views_exposed_form'){
    // $form['#id']
  }

  if ($form_id == 'node_profil_redacteur_form'
  || $form_id == 'node_profil_redacteur_edit_form'){
    $form['field_social_accounts']['#cardinality_multiple'] = false;

    if (isset($form['field_social_accounts']['widget'])
    && is_array($form['field_social_accounts']['widget'])){
      $form['field_social_accounts']['widget']['#cardinality_multiple'] = false;

      foreach ($form['field_social_accounts']['widget'] AS $key => &$value){
        if (isset($value['value']['#title'])) {
          switch ($key){
            case '0':
              $value['value']['#title'] = t('Twitter account');
              break;
            case '1':
              $value['value']['#title'] = t('LinkedIn account');
              break;
            case '2':
              $value['value']['#title'] = t('Viadeo account');
              break;
            case '3':
              $value['value']['#title'] = t('Google + account');
              break;
          }
          $value['value']['#title_display'] = 'before';
        }
        if (isset($value['_weight'])){
          $value['_weight']['#access'] = false;
        }
      }
    }
  }

  if ($form_id == 'node_container_form'
  || $form_id == 'node_container_edit_form'){
    if ($form_id == 'node_container_form'){
      if(isset($_GET['rendering_model_tid'])) {
        $tid = $_GET['rendering_model_tid'];
        $form['field_rendering_model']['widget']['#default_value'] = $tid;
      }
    }
    if (is_array($form['field_rendering_model']['widget']['#default_value'])){
      $current_rendering_model = $form['field_rendering_model']['widget']['#default_value'][0];
    }
    else{
      $current_rendering_model = $form['field_rendering_model']['widget']['#default_value'];
    }
    // gestion du champ rendering model
    $form['field_rendering_model']['#disabled'] = TRUE;
    $form['field_rendering_model']['#access'] = FALSE;
    $form['field_rendering_model_markup'] = [
      '#type' => 'item',
      '#title' => $form['field_rendering_model']['widget']['#title'],
      '#markup' => $form['field_rendering_model']['widget']['#options'][$current_rendering_model],
      '#weight' => $form['field_rendering_model']['#weight'],
    ];
    $form['#fieldgroups']['group_general']->children[] = 'field_rendering_model_markup';
    $form['#group_children']['field_rendering_model_markup'] = 'group_general';

    // positionnement des champs dates
    if (isset($form['field_start_date'])
      && isset($form['field_end_date'])){
      $form['field_start_date']['#attributes']['style'] = 'float: left; margin-right: 30px;';
      $form['field_end_date']['#attributes']['style'] = 'float: left; margin-right: 30px;';
    }

    // lien pour accéder à l'aide au template
    //kprint_r($form['field_content_field']);
    /*$form['field_templating_tooltips'] = [
      '#type' => 'item',
      '#title' => '',
      '#markup' => '<a href=""><span class="ui-icon ui-icon-lightbulb"></span></a>',
      '#weight' => -99,
    ];
    $form['#fieldgroups']['group_contenu']->children[] = 'field_templating_tooltips';
    $form['#group_children']['field_templating_tooltips'] = 'group_contenu';*/

    // disposition des taxonomies
    foreach ($form['#fieldgroups']['group_taxonomie']->children AS $field){
      if (isset($form[$field])){
        //kprint_r($form[$field]['widget']);
        $form[$field]['#attributes']['style'] = "float: left; margin-right: 50px;";
        $form[$field]['widget']['#size'] = 15;
      }
    }

    $last_taxonomie = end($form['#fieldgroups']['group_taxonomie']->children);
    $form[$last_taxonomie]['#suffix'] = '<div class="clearfix"></div>';

    //gestion des taxonomies à afficher par type de container
    $hide_taxonomies_container = [
      'blog_post' => ['field_magazine', 'field_area'],
      'magazine' => ['field_blog', 'field_area'],
      'press_release' => ['field_blog', 'field_magazine', 'field_area'],
      'press_kit' => ['field_blog', 'field_magazine', 'field_area'],
      'document' => ['field_blog', 'field_magazine', 'field_area'],
      'simple_page' => ['field_blog', 'field_magazine', 'field_area'],
    ];
    $current_container_type = \Drupal\taxonomy\Entity\Term::load($current_rendering_model);
    if (is_object($current_container_type)){
      $taxonomie_machine_name = $current_container_type->get('field_machine_name')->value;

      if (isset($hide_taxonomies_container[$taxonomie_machine_name])) {
        foreach ($hide_taxonomies_container[$taxonomie_machine_name] AS $field) {
          if (isset($form[$field])) {
            $form[$field]['#access'] = FALSE;
          }
        }
      }
    }
  }
}

function oab_backoffice_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match){
  switch ($route_name){
    case 'node.add_page':
      return '<h3>' . t('Please choose a model rendering :') . '</h3>';
      break;
  }
}

function oab_backoffice_ckeditor_css_alter(array &$css, Editor $editor) {
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/bootstrap-orange2015.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/bootstrap-orange-theme2015.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/boosted2015.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/font-awesome.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/background.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/buttons.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/shareIcons.css';
  $css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/textes.css';
}