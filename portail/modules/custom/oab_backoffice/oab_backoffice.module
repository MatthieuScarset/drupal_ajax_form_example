<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\editor\Entity\Editor;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Database\Database;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Entity\EntityInterface;
use \Drupal\file\Entity\File;
use Drupal\Core\Datetime;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;
use Drupal\entity\Revision\RevisionableContentEntityBase;
use Drupal\workbench_moderation\Entity\ModerationState;
use \Drupal\oab_dvi\DviHelper;

//include_once 'includes/mediatheque.inc';
define ('CONTENT_TAXO_FIELDS', serialize(array('field_region',
	'field_job_profile',
	'field_market_segment',
	'field_industry',
	'field_solution',
	'field_partner_type',
	'field_document_type',
	'field_sub_family',
	'field_subhome')));


function oab_backoffice_mail($key, &$message, $params) {
    $token_service = \Drupal::token();
    $config = \Drupal::config('oab.gdpr_settings');

    switch ($key) {
        case 'gdpr_spoc_notice':
            $message['subject'] = $token_service->replace($config->get('mail_spoc_object'), ['webform' => $params['webform']]);
            $message['body'][] = $token_service->replace($config->get('mail_spoc_body'), ['webform' => $params['webform']]);
            break;
        case 'gdpr_creator_notice':
            $message['subject'] = $token_service->replace($config->get('mail_creator_object'), ['webform' => $params['webform']]);
            $message['body'][] = $token_service->replace($config->get('mail_creator_body'), ['webform' => $params['webform']]);
            break;
        case 'gdpr_business_owner_notice':
            $message['subject'] = $token_service->replace($config->get('mail_business_owner_object'), ['webform' => $params['webform']]);
            $message['body'][] = $token_service->replace($config->get('mail_business_owner_body'), ['webform' => $params['webform']]);
            break;
        case 'gdpr_publish_notice':
            $message['subject']  = $token_service->replace($config->get('mail_validation_object'), ['webform' => $params['webform']]);
            $message['body'][]  = $token_service->replace($config->get('mail_validation_body'), ['webform' => $params['webform']]);
            break;
    }
}


function oab_backoffice_node_access(Drupal\node\Entity\Node $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {

   if ($entity->getType() == 'webform' && $operation == 'view') {
        $webform_value = $entity->get('webform')->first()->getValue();
        $webform_machine_name = $webform_value['target_id'];
        $webform_entity = \Drupal::entityTypeManager()->getStorage('webform')->load($webform_machine_name);
        if ($webform_entity != null && $webform_entity instanceof Drupal\webform\Entity\Webform) {
            return _is_webform_authorized($webform_entity, $operation, $account);
        }

   }

    return Drupal\Core\Access\AccessResult::neutral();
}

/**
 * Gestion des droits d'accès à un webform
 */
function oab_backoffice_webform_access(Drupal\webform\Entity\Webform $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
    return _is_webform_authorized($entity, $operation, $account);
}


/**
 * Je regroupe tout dans une fonction perso, parce que je m'en sers dans plusieurs hook_access
 */
function _is_webform_authorized(Drupal\webform\Entity\Webform $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
    /**
     * Si l'utilisateur est un business owner, je lui donne les droits que sur les webforms auxquels il est business owner
     * pour voir les soumissions et faire des modifs
     */
    if (in_array('webform_business_owner', $account->getRoles())) {
        $form_bo = \Drupal\user\Entity\User::load($entity->getThirdPartySetting('oab_gdpr', 'gdpr_business_owner'));
        if ( ( $operation == "submission_view_any" || $operation == "update" )
            && $form_bo !== null
            && $form_bo->id() == $account->id()) {
            return Drupal\Core\Access\AccessResult::allowed();
        }
    }

    ## Submission page => page d'affichage du formulaire
    if ($operation == "submission_page" || $operation == "view") {

        $allowed = _check_authorized_view($entity, $account);
        if ($allowed) {
            return Drupal\Core\Access\AccessResult::allowed();
        } elseif( $allowed == false) {
            return Drupal\Core\Access\AccessResult::forbidden();
        } elseif ($allowed == null) {
            return Drupal\Core\Access\AccessResult::neutral();
        }
    }

    /* A garder pour afficher toutes les permissions des webforms
     * if (in_array('webform_manager', $account->getRoles())) {
        echo $entity->label() . " => " . $operation . " <br /> ";
    }*/


    return Drupal\Core\Access\AccessResult::neutral();
}


function _check_authorized_view($entity, $account) {
    $ret = false;
    $is_published = $entity->getThirdPartySetting('oab_gdpr', 'gdpr_form_published');

    //echo "is published : $is_published"; die();
    ##Je fais les accès au formulaire en spécifique si le formulaire n'est pas publié
    if ($is_published != 1 ) {

        ## Si c'est un webform admin ou si c'est l'administrateur
        if (in_array('webform_admin', $account->getRoles())
            || $account->id() == 1) {
            $ret = true;
        }

        ## S'il est business owner, il doit être le BO du form pour le voir
        if (in_array('webform_business_owner', $account->getRoles())
            && $entity->getThirdPartySetting('oab_gdpr', 'gdpr_business_owner') == $account->id()
        ) {
            $ret = true;
        }


        ## S'il est SPOC Securité, il doit être le SPOC du form pour le voir
        if (in_array('webform_spoc_securite', $account->getRoles())
            && $entity->getThirdPartySetting('oab_gdpr', 'gdpr_spoc_security') == $account->id()
        ) {
            $ret = true;
        }


        ## S'il est webform manager, il doit etre le "owner" du form pour le voir
        if (in_array('webform_manager', $account->getRoles())
            && $entity->getOwnerId() == $account->id()
        ) {
            $ret = true;
        }

        # Si aucune condition n'est remplie, on interdit l'accès au webform
        return $ret;
    }

    return null;
}

/*
* implement hook_token_info()
*/
function oab_backoffice_token_info(){
    $types['gdpr'] = array(
        'name' => t('GDPR tokens'),
        'description' => t('Token designed for webform mails')
    );
    $tokens['business-owner-mail'] = array(
        'name' => t('Business owner mail'),
        'description' => t('Business owner mail')
    );
    $tokens['creator-pseudo'] = array(
        'name' => t('Creator pseudo'),
        'description' => t('Creator pseudo')
    );
    $tokens['creator-mail'] = array(
        'name' => t('Creator mail'),
        'description' => t('Creator mail')
    );
    $tokens['form-title'] = array(
        'name' => t('Form title'),
        'description' => t('Form title')
    );
    $tokens['form-expiration-date'] = array(
        'name' => t('Form expiration date'),
        'description' => t('Form expiration date')
    );
    $tokens['form-id'] = array(
        'name' => t('Webform machine name'),
        'description' => t('Machine name of the webform')
    );
    $tokens['spoc-pseudo'] = array(
        'name' => t('Spoc security pseudo'),
        'description' => t('Spoc security pseudo')
    );
    $tokens['spoc-mail'] = array(
        'name' => t('Spoc security mail'),
        'description' => t('Spoc security mail')
    );


    return array(
        'types' => $types,
        'tokens' => array(
            'gdpr' => $tokens
        )
    );
}

/*
* implement hook_token()
*/
function oab_backoffice_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata){
    $replacements = array();

    if (isset($data['webform'])) {
        $webform = $data['webform'];
        if($type == 'gdpr') {
            foreach ($tokens as $name => $original) {
                switch ($name) {
                    case 'business-owner-mail':
                        $business_owner = \Drupal\user\Entity\User::load($webform->getThirdPartySetting('oab_gdpr', 'gdpr_business_owner'));
                        if ($business_owner !== null) {
                            $replacements[$original] = $business_owner->getEmail();
                        } else {
                            drupal_set_message(t("Le Business Owner n'a pas pu etre trouvé"), 'error', true);
                        }
                        break;
                    case 'creator-pseudo':
                        $replacements[$original] = $webform->getOwner()->getDisplayName();
                        break;
                    case 'creator-mail':
                        $replacements[$original] = $webform->getOwner()->getEmail();
                        break;
                    case 'form-title':
                        $replacements[$original] = $webform->get('title');
                        break;
                    case 'form-expiration-date':
                        $date = new \DateTime($webform->getThirdPartySetting('oab_gdpr', 'gdpr_expiration_date'));
                        $replacements[$original] = $date->format('d/m/Y');
                        break;
                    case 'data-delete-date':
                        $date = new \DateTime($webform->getThirdPartySetting('oab_gdpr', 'gdpr_data_delete_date'));
                        $replacements[$original] = $date->format('d/m/Y');
                        break;
                    case 'form-id':
                        $replacements[$original] = $webform->id();
                        break;
                    case 'spoc-pseudo':
                        $spoc = \Drupal\user\Entity\User::load($webform->getThirdPartySetting('oab_gdpr', 'gdpr_spoc_security'));
                        if ($spoc !== null) {
                            $replacements[$original] = $spoc->label();
                        } else {
                            drupal_set_message(t("Le SPOC Securité n'a pas pu etre trouvé"), 'error', true);
                        }
                        break;
                    case 'spoc-mail':
                        $spoc = \Drupal\user\Entity\User::load($webform->getThirdPartySetting('oab_gdpr', 'gdpr_spoc_security'));
                        if ($spoc !== null) {
                            $replacements[$original] = $spoc->getEmail();
                        } else {
                            drupal_set_message(t("Le SPOC Securité n'a pas pu etre trouvé"), 'error', true);
                        }
                        break;
                    case 'delete-data-date':
                        $date = new \DateTime($webform->getThirdPartySetting('oab_gdpr', 'gdpr_delete_data_date'));
                        $replacements[$original] = $date->format('d/m/Y');
                        break;
                }
            }
        }
    }

    return $replacements;
}

/*
 * A la creation d'un webform, on envoie des emails
 */
function oab_backoffice_webform_insert(Drupal\webform\Entity\Webform $entity) {
    $current_user = Drupal::currentUser();
    $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();

    //Lorsque le formulaire est créé par le webform admin, on n'envoie pas de mail
    if (!in_array('webform_admin', $current_user->getRoles())) {
        $token_service = \Drupal::token();

        $config = \Drupal::config('oab.gdpr_settings');

        /*\Drupal::logger('oab_gdpr')->notice($token_service->replace($config->get('mail_spoc_object'), ['webform' => $entity]));
        \Drupal::logger('oab_gdpr')->notice($token_service->replace($config->get('mail_spoc_body'), ['webform' => $entity]));*/

        #mail to SPOC Security
        $spoc_security = \Drupal\user\Entity\User::load($entity->getThirdPartySetting('oab_gdpr', 'gdpr_spoc_security'));
        if ($spoc_security !== null) {
            \Drupal::service('plugin.manager.mail')
                ->mail('oab_backoffice', 'gdpr_spoc_notice', $spoc_security->getEmail(), $current_language, array('webform'=> $entity));
        } else {
            drupal_set_message(t("L'email au SPOC Securité n'a pas pu être envoyé"), 'error', true);
        }

        # mail au createur du webform
        $mail_creator = $current_user->getEmail();
        \Drupal::service('plugin.manager.mail')
            ->mail('oab_backoffice', 'gdpr_creator_notice', $mail_creator, $current_language,  array('webform'=> $entity));

        # mail au business owner
        $business_owner = \Drupal\user\Entity\User::load($entity->getThirdPartySetting('oab_gdpr', 'gdpr_business_owner'));
        if ($business_owner !== null ) {
            $mail_business_owner = $business_owner->getEmail();
            \Drupal::service('plugin.manager.mail')
                ->mail('oab_backoffice', 'gdpr_business_owner_notice', $mail_business_owner, $current_language,  array('webform'=> $entity));
        } else {
            drupal_set_message(t("L'email au Business Owner n'a pas pu être envoyé"), 'error', true);
        }
    }

}


/**
 * Fonction appellée à la validation de l'edition d'un webform pour sauvegarder nos paramètres spécifiques à la GDPR
 */
function _oab_webform_gdpr_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {

    if ($entity = $form_state->getFormObject()->getEntity()) {
        $entity->setThirdPartySetting('oab_gdpr', 'gdpr_business_owner', $form_state->getValue('gdpr_business_owner'));
        $entity->setThirdPartySetting('oab_gdpr', 'gdpr_spoc_security', $form_state->getValue('gdpr_spoc_security'));
        $entity->setThirdPartySetting('oab_gdpr', 'gdpr_expiration_date', $form_state->getValue('gdpr_expiration_date'));

        # Creation de la date à laquelle les données seront supprimées. Si y a pas de valeur pour la date de fin du formulaire, ca crée à la date du jour
        $expiration_date = new \DateTime($form_state->getValue('gdpr_expiration_date'));
        $expiration_date->add(new \DateInterval('P6M'));

        $entity->setThirdPartySetting('oab_gdpr', 'gdpr_data_delete_date', $expiration_date->format('Y-m-d'));

        $entity->setThirdPartySetting('oab_gdpr', 'gdpr_form_published', $form_state->getValue('gdpr_form_published'));
    }
}


/**
 * Implements hook_form_alter().
 */
function oab_backoffice_form_alter(&$form, FormStateInterface $form_state, $form_id) {


    if ($form_id == "node_webform_form") {
        $options = $form['webform']['widget'][0]['target_id']["#options"];

        $ret = [];
        $current_user = Drupal::currentUser();
        foreach ($options as $machine_name => $name) {
            if (is_array($name)) {
                $ret[$machine_name] = [];

                foreach($name as $key => $value) {
                    $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($key);
                    if (_check_authorized_view($webform, $current_user)) {
                        $ret[$machine_name][$key] = $value;
                    }
                }

                if (count($ret[$machine_name]) == 0) {
                    unset($ret[$machine_name]);
                }
            } else {
                $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($machine_name);
                if (_check_authorized_view($webform, $current_user)) {
                    $ret[$machine_name] = $name;
                }
            }
        }

        $form['webform']['widget'][0]['target_id']["#options"] = $ret;
    }

    /**
     * Pour la GDPR, hook des webform pour ajouter des éléments
     */
    if ($form_id == "webform_add_form" || $form_id == 'webform_settings_form') {
        $entity = $form_state->getFormObject()->getEntity();

        $form['gdpr_informations'] = [
            '#type' => 'details',
            '#title'    => t('GDPR Information'),
            '#open' => true,
        ];

        $form['gdpr_informations']['gdpr_form_published'] = [
            '#type' => 'checkbox',
            '#title'    => t('Form published'),
            '#default_value' => ($entity->getThirdPartySetting('oab_gdpr', 'gdpr_form_published') !== null ) ? $entity->getThirdPartySetting('oab_gdpr', 'gdpr_form_published') : false,
            '#access' => false,
            "#disabled" => "disabled"
        ];

        $business_owner = \Drupal\user\Entity\User::load($entity->getThirdPartySetting('oab_gdpr', 'gdpr_business_owner'));
        $current_user = Drupal::currentUser();
        // j'affiche la checkbox si on est dans les settings du webform et l'utilisateur connecté est le "business owner" du formulaire en question
        if ($form_id == 'webform_settings_form') {

            ##Je n'affiche la publication que si on édite le formulaire, pas à la création
            $form['gdpr_informations']['gdpr_form_published']['#access'] = true;

            ## Je le rend cliquable que si l'utilisateur courant est le business_owner
            if (  $current_user->id() == 1
                || ( $business_owner !== null
                    && (
                         in_array('webform_admin', $current_user->getRoles())
                        ||  (
                            in_array('webform_business_owner', $current_user->getRoles())
                            && $current_user->id() === $business_owner->id()
                        )
                    )
                )
            ) {
               $form['gdpr_informations']['gdpr_form_published']['#disabled'] = false;
            }
        }


        $form['gdpr_informations']['gdpr_business_owner'] = [
            '#type' => 'entity_autocomplete',
            '#title'    => t('Business Owner'),
            '#default_value' => \Drupal\user\Entity\User::load($entity->getThirdPartySetting('oab_gdpr', 'gdpr_business_owner')),
            '#target_type' => "user",
            '#settings' => [
                'match_operator'    => "CONTAINS"
            ],
            "#selection_settings"   => [
                'include_anonymous' => false,
                'filter' => [
                    'role' => ['webform_business_owner'],
                ],
            ],
            '#required' => true,
        ];

        # Je donne les droits à l'admin de se selectionner
        if ($current_user->id() == 1) {
            $form['gdpr_informations']['gdpr_business_owner']["#selection_settings"]['filter']['role'][] = "administrator";
        }


        $form['gdpr_informations']['gdpr_spoc_security'] = [
            '#type' => 'entity_autocomplete',
            '#title'    => t('SPOC Security'),
            "#default_value"    => \Drupal\user\Entity\User::load($entity->getThirdPartySetting('oab_gdpr', 'gdpr_spoc_security')),
            '#required' => true,
            '#target_type' => "user",
            '#settings' => [
                'match_operator'    => "CONTAINS"
            ],
            "#selection_settings"   => [
                'include_anonymous' => false,
                'filter' => [
                    'role' => ['webform_spoc_securite'],
                ],
            ],
        ];
        # Je donne les droits à l'admin de se selectionner
        if ($current_user->id() == 1) {
            $form['gdpr_informations']['gdpr_spoc_security']["#selection_settings"]['filter']['role'][] = "administrator";
        }


        $form['gdpr_informations']['gdpr_expiration_date'] = [
            '#type' => 'date',
            '#title'    => t('Form expiration date'),
            '#default_value'    => $entity->getThirdPartySetting('oab_gdpr', 'gdpr_expiration_date')
        ];

        if (in_array('webform_manager', $current_user->getRoles())) {
            $form['gdpr_informations']['gdpr_expiration_date']['#required'] = true;
        }


        //array_unshift($form['actions']['submit']['#submit'],'_oab_webform_gdpr_submit' );

        ## Je place mon submit, pour éviter qu'il soit en dernière place, sinon ca crée des erreurs
        $old_submit = $form['actions']['submit']['#submit'];
        $submit = array_slice($old_submit, 0, count($old_submit) - 1, true) +
            ["ne_pas_supprimer" => "_oab_webform_gdpr_submit"] +
            array_slice($old_submit, count($old_submit) - 1, count($old_submit) - 1, true) ;

        $form['actions']['submit']['#submit'] = array_values($submit);
        $form['#validate'][] = '_oab_webform_gdpr_validate';
    }



	//\Drupal::logger('oab_backoffice')->notice('form id = '.$form_id);
	$current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
	$languages = \Drupal::languageManager()->getLanguages();
	$current_user_language = Drupal::currentUser()->getPreferredLangcode();

	$edit_form = false;
	if (preg_match('@node_(.*)_edit_form@', $form_id)){
		$current_user_language = $current_language;

		if ($node = \Drupal::routeMatch()->getParameter('node')) {
			$node_language = $node->language();
			$node_langcode = $node_language->getId();

			$current_user_language = $node_langcode;
		}
		$edit_form = true;
	}

	// formulaire replicate
  if (preg_match('@node_(.*)_replicate_form@', $form_id)){
    $form['#attributes']['class'][] = "replicate-form";
  }
  
	// on checke les langues auxquelles l utilisateur a droit
	if (preg_match('@node_(.*)_edit_form@', $form_id) || preg_match('@node_(.*)_delete_form@', $form_id)){
		$user = \Drupal::currentUser();
		$userId = $user->id();
		if(!in_array('administrator', $user->getRoles())) {
			$node = \Drupal::routeMatch()->getParameter('node');
			$node_language = $node->language();
			$node_langcode = $node_language->getId();
			$connection = Database::getConnection();
			$sth = $connection->select('user__field_access_language', 'f')
				->fields('f', array('field_access_language_target_id'))
				->condition('f.entity_id', $userId, '=');
			$data = $sth->execute();
			$results = $data->fetchAll(\PDO::FETCH_OBJ);
			$canEdit = false;
			if (count($results) != 0) {
				foreach ($results as $r) {
					if ($r->field_access_language_target_id == $node_langcode) {
						$canEdit = true;
						break;
					}
				}
			}
			if ($canEdit !== true) {
				drupal_set_message(t('You can not edit/delete this node cause you don\'t have access to this language.'), 'error', TRUE);
				$response = new Symfony\Component\HttpFoundation\RedirectResponse('/admin/content');
				$response->send();
				exit();
			}
		}
	}

	// gestion de la taxonomie
	// affichage de la langue
	/*if (defined('CONTENT_TAXO_FIELDS')) {
		$CONTENT_TAXO_FIELDS = unserialize(CONTENT_TAXO_FIELDS);
		foreach ($CONTENT_TAXO_FIELDS AS $field) {
			if (isset($form[$field]['widget']['#options'])) {
				$new_select_options = array();
				foreach ($form[$field]['widget']['#options'] AS $key => $value) {
					if (is_int($key)) {
						$term = \Drupal\taxonomy\Entity\Term::load($key);
						$value .= ' (' . strtoupper($term->language()->getId()) . ')';
						$new_select_options[$key] = $value;
					}
				}
				$form[$field]['widget']['#options'] = $new_select_options;
			}
		}
	}*/

	// page de liste des taxonomies
	if ($form_id == 'taxonomy_overview_terms'){
		if (isset($form['terms'])){
			foreach ($form['terms'] AS $key => $value){
				if (preg_match('@^tid:@', $key)){
					if (isset($form['terms'][$key]['term']['#title'])
						&& isset($form['terms'][$key]['#term'])
						&& is_object($form['terms'][$key]['#term'])){
						$term_language = $form['terms'][$key]['#term']->language()->getId();
						$form['terms'][$key]['term']['#title'] .= ' (' . strtoupper($term_language) . ')';
					}
				}
			}
		}
	}

	// filtres exposés de views
	if ($form_id == 'views_exposed_form'){
		if ($form['#id'] == 'views-exposed-form-medias-entity-browser-entity-browser-media'){
			$form['field_tags_target_id']['#size'] = 30;
		}
	}

	if ($form_id == 'node_profile_form'
		|| $form_id == 'node_profile_edit_form'){
		$form['field_social_accounts']['#cardinality_multiple'] = false;

		if (isset($form['field_social_accounts']['widget'])
			&& is_array($form['field_social_accounts']['widget'])){
			$form['field_social_accounts']['widget']['#cardinality_multiple'] = false;

			foreach ($form['field_social_accounts']['widget'] AS $key => &$value){
				if (isset($value['value']['#title'])) {
					switch ($key){
						case '0':
							$value['value']['#title'] = t('Twitter account');
							break;
						case '1':
							$value['value']['#title'] = t('LinkedIn account');
							break;
						case '2':
							$value['value']['#title'] = t('Viadeo account');
							break;
						case '3':
							$value['value']['#title'] = t('Google + account');
							break;
					}
					$value['value']['#title_display'] = 'before';
				}
				if (isset($value['_weight'])){
					$value['_weight']['#access'] = false;
				}
			}
		}
	}


	if (in_array($form_id, array( 'node_blog_post_form', 'node_blog_post_edit_form',
		'node_customer_story_form', 'node_customer_story_edit_form',
		'node_document_form', 'node_document_edit_form',
		'node_magazine_form', 'node_magazine_edit_form',
		'node_press_kit_form', 'node_press_kit_edit_form',
		'node_press_release_form', 'node_press_release_edit_form',
		'node_industry_form', 'node_industry_edit_form',
		'node_solution_form', 'node_solution_edit_form',
		'node_product_form', 'node_product_edit_form',
		'node_partner_form', 'node_partner_edit_form',
		'node_region_form', 'node_region_edit_form',
		'node_simple_page_form', 'node_simple_page_edit_form',
		'node_country_form', 'node_country_edit_form',
		'node_full_html_form', 'node_full_html_edit_form',
        'node_distributor_form', 'node_distributor_edit_form'))) {

		$form['#attached']['library'][] = 'oab_backoffice/metadata';

		// positionnement des champs dates
		if (isset($form['field_start_date'])
			&& isset($form['field_end_date'])
		) {
			$form['field_start_date']['#attributes']['style'] = 'float: left; margin-right: 30px;';
			$form['field_end_date']['#attributes']['style'] = 'float: left; margin-right: 30px;';
		}

		// disposition des taxonomies
		if(isset($form['#fieldgroups']['group_classer'])){
			foreach ($form['#fieldgroups']['group_classer']->children AS $field) {
				if (isset($form[$field])) {
					$form[$field]['#attributes']['style'] = "float: left; margin-right: 50px;";
					$form[$field]['widget']['#size'] = 15;
				}
			}
		}

		if(isset($form['#fieldgroups']['group_taxonomie']->children)){
			$last_taxonomie = end($form['#fieldgroups']['group_taxonomie']->children);
			$form[$last_taxonomie]['#suffix'] = '<div class="clearfix"></div>';
		}

        // Disable browser HTML5 validation
        $form['#attributes']['novalidate'] = 'novalidate';

		//on cache la partie avancée metatags pour les utilisateurs sauf digital admin et admin
		$roles = \Drupal::currentUser()->getRoles();
		if(!in_array("administrator", $roles) && !in_array("digital_admin", $roles))
		{
			$form['field_metatags']['#access'] = false;
		}
	}



	/*
		// valeur par défaut pour le champ "display_title"
		// dans le cas d'une edition et que la valeur n'existe pas encore
		if ($form_id == 'node_container_edit_form') {
		  if ($node = \Drupal::routeMatch()->getParameter('node')) {
			$content_type = $node->bundle();
			$definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $content_type);
			if (isset($definitions)
			  && array_key_exists('field_display_title', $definitions)
			) {
			  if ($display_title = $node->get('field_display_title')->getValue()) {
				if (!isset($display_title[0]['value'])) {
				  $form['field_display_title']['widget']['value']['#default_value'] = TRUE;
				}
			  }
			}
		  }

		}
	  }

	  //pour la médiathèque : sélection des images dans la liste
	  if($form_id == 'entity_browser_browse_medias_iframe_form'
		|| $form_id =='entity_browser_browse_media_modal_form'
		|| $form_id =='entity_browser_browser_file_modal_form')
	  {
		$form['#attached']['library'][] = 'oab_backoffice/mediatheque';
	  }
	*/

	if ($form_id == 'user_register_form'
		|| $form_id == 'user_form'){
		if (isset($form['account']['roles']['#options'])
			&& is_array($form['account']['roles']['#options'])){
			$roles_option = $form['account']['roles']['#options'];
			foreach($roles_option AS $key => $value){
				if ($key != 'authenticated') {
					if (!\Drupal::currentUser()->hasPermission('assign ' . $key . ' role')) {
						if (in_array($key, $form['account']['roles']['#default_value'])) {
							$form['account']['roles'][$key] = array(
								'#default_value' => TRUE,
								'#disabled' => TRUE
							);
						}
						else {
							unset($form['account']['roles']['#options'][$key]);
						}
					}
				}
			}
		}
	}

	// Ajout de champ dans les menus
	if($form_id == 'menu_link_content_menu_link_content_form') {
		$menuLinkEntity = _oab_backoffice_get_menu_link_entity_from_form_state($form_state);
		$linkOptions = $menuLinkEntity->link->first()->options;
		$linkTarget = !empty($linkOptions['target']) ? true : false;
		$linkIcon = !empty($linkOptions['icon']) ? $linkOptions['icon']: array();
		$linkClasstag = !empty($linkOptions['classtag']) ? $linkOptions['classtag']: array();

		$form['link_target'] = array(
			'#type' => 'checkbox',
			'#title' => t('Open in a new window'),
			'#description' => t('check to open the link in a new window'),
			'#default_value' => $linkTarget,
			'#weight' => -2
		);

		$form['link_icon'] = array(
			'#type' => 'textfield',
			'#title' => t('Font Awesome Icon'),
			'#description' => t('type your icon class code'),
			'#default_value' => $linkIcon,
			'#weight' => -3
		);

		$form['link_classtag'] = array(
			'#type' => 'textfield',
			'#title' => t('Link Tag Class'),
			'#description' => t('type your link tag class'),
			'#default_value' => $linkClasstag,
			'#weight' => -4
		);

		$form['actions']['submit']['#submit'][] = 'oab_backoffice_menu_link_submit';
	}

    // langue RU pour les webforms
    if (preg_match('@webform_submission_(.*)_form@', $form_id) && $current_language == 'ru'){
        $form['elements']['actions']['#submit__label'] = 'Отправить';
    }


	//preselection des departements et segments de marché sur les PARTNERS
	if (in_array($form_id, array( 'node_partner_form' )))
	{
		if(isset($form['field_departments'])){
			//par défaut on sélectionne tous les départements
			$form['field_departments']['widget']['#default_value']  = array_keys($form['field_departments']['widget']['#options']);
		}
		if(isset($form['field_market_segment'])){
			//par défaut on sélectionne +50 et +250 salariés
			$default_label = array();
			$default_values = array();
			if($current_language == "fr"){
				$default_label = array('+ 50 salariés', '+ 250 salariés');
			}
			elseif ($current_language == "en"){
				$default_label = array('+ 50 employees', '+ 250 employees');
			}
			if(!empty($default_label)){
				foreach ($default_label as $label){
					$query = \Drupal::entityQuery('taxonomy_term');
					$query->condition('vid', 'market_segments');
					$query->condition('name', $label);
					$entity = $query->execute();

					if(!empty($entity)) {
						$default_values[] = array_pop($entity);
					}
				}
				if(!empty($default_values)){
					$form['field_market_segment']['widget']['#default_value']  = $default_values;
				}
			}
		}
	}

    ######## Gestion des produits DVI
    if ($form_id === "node_product_form" || $form_id === "node_product_edit_form") {
        ##A la creation d'un produit, je rajoute une fonction de vérification
        ## pour ajouter des verifications spécifiques en fonction du choix de l'user
        $form["#validate"][] = 'oab_backoffice_check_dvi_product_form_validate';
        $langcode = $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
        if ($langcode !== "en"  && $langcode != "fr" &&
            isset($form[DviHelper::FIELD_IS_DVI_PRODUCT_NAME])) {
            $form[DviHelper::FIELD_IS_DVI_PRODUCT_NAME]['widget']['#type'] = "hidden";
        }
    }


    /**
     * Pour les formulaires "contact_commercial", on ajoute le titre du produit de la page
     * sur laquelle on a cliqué sur le bouton pour accèder à ce formulaire
     */
    if (isset($form["#webform_id"]) && $form["#webform_id"] == "contact_commercial"
        && $current_language == "fr") {

        ##On recupère l'URL d'origine
        $url = $_SERVER['HTTP_REFERER'];
        if ($url !== null) {

            ##On recupère l'alias
            $path = preg_replace('/\//','',parse_url($url,PHP_URL_PATH),1);
            $path = str_replace($current_language, '', $path);

            ##On recupère le /node/xxx depuis l'alias
            $org_path = \Drupal::service('path.alias_manager')
                ->getPathByAlias("$path");

            ##On recupère le nid qui est dans l'url
            if(preg_match('/node\/(\d+)/', $org_path, $matches)) {

                ##on load le noad
                $node = \Drupal\node\Entity\Node::load($matches[1]);
                if ($node !== null && $node->getType() == "product") {
                    ##On set enfin la value, seulement pour les produits
                    $form['elements']['origin_product_name']['#value'] = $node->getTitle();
                }
            }
        }
    }


    if (in_array($form_id, array( 'node_blog_post_form', 'node_blog_post_edit_form',
        'node_customer_story_form', 'node_customer_story_edit_form',
        'node_custom_page_form', 'node_custom_page_edit_form',
        'node_document_form', 'node_document_edit_form',
        'node_full_html_form', 'node_full_html_edit_form',
        'node_homepage_form', 'node_homepage_edit_form',
        'node_magazine_form', 'node_magazine_edit_form',
        'node_industry_form', 'node_industry_edit_form',
        'node_product_form', 'node_product_edit_form',
        'node_profile_form', 'node_profile_edit_form',
        'node_simple_page_form', 'node_simple_page_edit_form',
        'node_solution_form', 'node_solution_edit_form'))) {

        $user_roles = \Drupal::currentUser()->getRoles();

        if(count($user_roles)==2 &&
            isset($user_roles[0]) && $user_roles[0] == "authenticated" &&
            isset($user_roles[1]) && $user_roles[1] == "chief_editor_hub" ) {
            //rend le champ obligatoire
            $form["field_hub"]["widget"]["#required"] = true;
            $form["field_hub_portal"]['#disabled'] = true;

        }
    }


}


function oab_backoffice_entity_update(EntityInterface $entity) {

    /**
     * Envoi des mails aux users specifiés lors de la publication d'un webform
     */
    if ($entity instanceof Drupal\webform\Entity\Webform) {
        $current_user = Drupal::currentUser();
        $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();

        $old_webform = $entity->original;

        $isPublished = $entity->getThirdPartySetting('oab_gdpr', 'gdpr_form_published');
        $old_isPublished = $old_webform->getThirdPartySetting('oab_gdpr', 'gdpr_form_published');

        ## Si le webform vient d'etre publié et que ce n'est pas un admin qui vient de le publier
        if ($isPublished
            && $isPublished !== $old_isPublished
            && !in_array('webform_admin', $current_user->getRoles())
            && $current_user->id() != 1      #Je ne le fait pas pour l'admin et les ebform_admin
        ) {
            #mail to Everyone pour la validation

            $spoc = \Drupal\user\Entity\User::load($entity->getThirdPartySetting('oab_gdpr', 'gdpr_spoc_security'));
            if ($spoc !== null ) {
                $mail_spoc = $spoc->getEmail();
                \Drupal::service('plugin.manager.mail')
                    ->mail('oab_backoffice', 'gdpr_publish_notice', $mail_spoc, $current_language, array('webform' => $entity));
            }

            $mail_creator = $entity->getOwner()->getEmail();
            \Drupal::service('plugin.manager.mail')
                ->mail('oab_backoffice', 'gdpr_publish_notice', $mail_creator, $current_language, array('webform'=> $entity));

            $business_owner = \Drupal\user\Entity\User::load($entity->getThirdPartySetting('oab_gdpr', 'gdpr_business_owner'));
            if ($business_owner !== null) {
                $mail_business_owner = $business_owner->getEmail();
                \Drupal::service('plugin.manager.mail')
                    ->mail('oab_backoffice', 'gdpr_publish_notice', $mail_business_owner, $current_language, array('webform'=> $entity));
            }

        }
    }

    /** @var \Drupal\file\Entity\File $entity */
    if ($entity instanceof Drupal\file\Entity\File) {
        $image = \Drupal::service('image.factory')->get($entity->getFileUri());
        /** @var \Drupal\Core\Image\Image $image */
        if ($image->isValid()) {
            $image_uri = $entity->getFileUri();
            // on vide les caches en BDD (pas trouvé mieux pour la top zone)
            $connection = Database::getConnection();
            $connection->delete('cache_render')->condition('cid', '%topzone%', 'LIKE')->execute();
            // on regénère les styles
            $styles = ImageStyle::loadMultiple();
            /** @var \Drupal\image\Entity\ImageStyle $style */
            $tabRefresh = array(
                'file_entity_browser_thumbnail',
                'homepage_expertise',
                'homepage_solution_banner',
                'homepage_news',
                'homepage_top_zone',
                'large',
                'medium',
                'subhome',
                'thumbnail',
                'top_zone',
                'top_zone_big'
                );
            foreach ($styles as $style) {
                if(in_array($style->id(), $tabRefresh)){
                    $destination = $style->buildUri($image_uri);
                    $style->createDerivative($image_uri, $destination);
                }
            }
        }
    }
}

function oab_backoffice_menu_link_submit(&$form, FormStateInterface $form_state){
	$values = $form_state->getValues();
	$link_target = array();
	$link_icon = array();
	$link_classtag = array();

	if (isset($values['link_target'])
		&& !empty($values['link_target'])) {
		$link_target = trim($values['link_target']);
	}

	if (isset($values['link_icon'])
		&& !empty($values['link_icon'])) {
		$link_icon = trim($values['link_icon']);
	}

	if (isset($values['link_classtag'])
		&& !empty($values['link_classtag'])) {
		$link_classtag = trim($values['link_classtag']);
	}

	$menuLinkEntity = _oab_backoffice_get_menu_link_entity_from_form_state($form_state);
	$options = $menuLinkEntity->link->first()->options;

	$changed = FALSE;
	if (empty($link_target)) {
		if (!empty($options['target'])) {
			unset($options['target']);
			$changed = TRUE;
		}
	}
	else {
		$options['target'] = $link_target ? '_blank' : '_self' ;
		$changed = TRUE;
	}

	if (empty($link_icon)) {
		if (!empty($options['icon'])) {
			unset($options['icon']);
			$changed = TRUE;
		}
	}
	else {
		$options['icon'] = $link_icon ;
		$changed = TRUE;
	}

	if (empty($link_classtag)) {
		if (!empty($options['classtag'])) {
			unset($options['classtag']);
			$changed = TRUE;
		}
	}
	else {
		$options['classtag'] = $link_classtag ;
		$changed = TRUE;
	}

	if ($changed) {
		$menuLinkEntity->link->first()->options = $options;
		$menuLinkEntity->save();
	}
}


function oab_backoffice_ckeditor_css_alter(array &$css, Editor $editor) {
	$css[] = drupal_get_path('theme', 'theme_boosted') . '/boosted/css/bootstrap-orange2015.min.css';
	$css[] = drupal_get_path('theme', 'theme_boosted') . '/boosted/css/boosted2015.min.css';
	$css[] = drupal_get_path('theme', 'theme_boosted') . '/css/font-awesome.min.css';
	$css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/background.css';
	$css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/buttons.css';
	$css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/shareIcons.css';
	$css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/textes.css';
	$css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/layout.css';
	$css[] = drupal_get_path('theme', 'theme_boosted') . '/css/templating/nodes.css';
}


function oab_backoffice_menu_local_tasks_alter(&$data, $route_name){
	if (isset($data['tabs'][0]) && is_array($data['tabs'][0])){
		foreach ($data['tabs'][0] AS $key => $value){
			if (isset($value['#link']['url'])){
				$local_task_link_url = $value['#link']['url'];
				$routeName = $local_task_link_url->getRouteName();
				switch ($routeName){
					case 'system.admin_content':
						$data['tabs'][0][$key]['#weight'] = 0;
						break;
					case 'view.dashboard.page_1':
						$data['tabs'][0][$key]['#weight'] = 1;
						break;
					case 'view.media.media_page_list':
						$data['tabs'][0][$key]['#weight'] = 2;
						break;
					case 'view.files.page_1':
						$data['tabs'][0][$key]['#weight'] = 3;
						break;
					case 'comment.admin':
						$data['tabs'][0][$key]['#weight'] = 4;
						break;
				}
			}
		}
	}
}



function _oab_backoffice_get_menu_link_entity_from_form_state(FormStateInterface $form_state){
	$buildInfo = $form_state->getBuildInfo();
	$menuLinkContentForm = $buildInfo['callback_object'];
	return $menuLinkContentForm->getEntity();
}

// ajout du type de rendu des champs "path" pour la traduction
function oab_backoffice_config_schema_info_alter(&$definitions) {
	$definitions['path']['form_element_class'] = '\Drupal\config_translation\FormElement\Textfield';
}


/**
 * Implements hook_library_info_alter().
 */
function oab_backoffice_library_info_alter(&$libraries, $extension) {
	if ($extension == 'oab_backoffice' && isset($libraries['jira'])) {
		$jira_url = \Drupal::config('block.block.jirareportblock')->get('settings');
		if (isset($jira_url['jira_report_code'])){
			$libraries['jira']['js'] = [$jira_url['jira_report_code'] => array('external' => true)];
		}
	}
}




/*
 function oab_backoffice_query_alter(Drupal\Core\Database\Query\AlterableInterface $query) {

  $node = \Drupal::routeMatch();
  $user = \Drupal::currentUser();
  if($node->getRouteName() == 'comment.admin' && $query->hasTag('entity_query_comment') && in_array("blogger", $user->getRoles())) {
    $query->condition('comment_field_data.uid', $user->id());
  }

}
*/

/**
 * Altération du formulairede mise en place des redirections
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function oab_backoffice_form_redirect_redirect_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
	//Pour ajouter le / après l'url et avant le champ source de la redirection
	// RUBYPORTAILOBS-2753 "Ajout d'un / avant le champs path dans les redirections"
	if(isset($form['redirect_source']['widget'][0]['path']['#field_prefix']))
	{
		$form['redirect_source']['widget'][0]['path']['#field_prefix'] = $form['redirect_source']['widget'][0]['path']['#field_prefix'].'/';
	}
}


function oab_backoffice_entity_embed_alter(&$build, $entity, &$context) {
	if (isset($build['#attributes']['data-align']) && $build['#attributes']['data-align'] == 'center') {
		$build['#attributes']['class'][] = 'text-align-center';
	}
}



/**
 * Implements hook_views_data_alter().
 */
function oab_backoffice_views_data_alter(array &$data) {
	/*$data['node']['node_month'] = array(
		'title' => t('Node month'),
		'field' => array(
			'title' => t('Node month'),
			'help' => t('Flags a specific node month.'),
			'id' => 'node_month',
		),
	);*/
	$data['node_field_data']['node_month'] = array(
		'title' => t('Node Month filter'),
		'filter' => array(
			'title' => t('Node month filter'),
			'help' => t('Provides a custom filter for nodes by the month of creation.'),
			'field' => 'created',
			'id' => 'node_month'
		),
	);
	$data['node_field_data']['node_year'] = array(
		'title' => t('Node Year filter'),
		'filter' => array(
			'title' => t('Node year filter'),
			'help' => t('Provides a custom filter for nodes by the year of creation.'),
			'field' => 'created',
			'id' => 'node_year'
		),
	);
}


/**
 * Implements hook_views_post_render().
 */
function oab_backoffice_views_post_render(Drupal\views\ViewExecutable $view) {

  /**
   * Modification de l'affichage des remontées pour l'autocomplete des rebonds
   * Ajout du type de contenu et du NID
   */
  if ($view->id() == 'rebond_entity_reference') {

    foreach ($view->result as $i => $result) {
      #On recupère les données nécessaires
      $node_type = $result->_entity->get('type')->entity->label();
      $node_id = $result->_entity->id();
      $node_label =  $result->_entity->getTitle();

      #On set la nouvelle valeur
      $view->result[$i]->_entity->get('title')->setValue(array(0=>"$node_label ($node_type : $node_id)"));
    }
  }

    if ($view->id() == 'product_autocomplete') {
        foreach ($view->result as $i => $result) {
            #On recupère les données nécessaires
            $node_lang = $result->_entity->language()->getName();
            $node_label =  $result->_entity->getTitle();
            $langcode = strtoupper(substr($node_lang, 0, 2));
            #On set la nouvelle valeur
           $view->result[$i]->_entity->get('title')->setValue(array(0=>"$node_label ($langcode)"));
        }
    }
}

/**
 * Implements hook_views_pre_render().
 */
function oab_backoffice_views_pre_render(Drupal\views\ViewExecutable $view) {

    if ($view->id() == 'content') {
      foreach ($view->result as $i => $result) {
            # On recupère les données nécessaires
         $node_type = $result->_entity->get('type')->entity->id();
          if($node_type == 'product'){
            $node_label =  $result->_entity->getTitle();
            $node_axiome_data =  $result->_entity->get('field_axiome_data')->getValue();
            if(isset($node_axiome_data[0]['value'])){
              $data = unserialize($node_axiome_data[0]['value']);
              if(isset($data['Attributes']['nom_offre_commerciale']) && $data['Attributes']['nom_offre_commerciale'] != ''){
                $offre_commerciale = $data['Attributes']['nom_offre_commerciale'];
                # On set la nouvelle valeur
                $view->result[$i]->_entity->get('title')->setValue(array(0=>"$offre_commerciale ($node_label)"));
              }
            }
          }

          if (isset($result->workbench_revision_tracker_revision_id)
            && $result->workbench_revision_tracker_revision_id != 0
            && $result->workbench_revision_tracker_revision_id !== null ) {

            #kint($result->workbench_revision_tracker_revision_id);

            $maRevision = node_revision_load($result->workbench_revision_tracker_revision_id);
            $moderationState = $maRevision->get('moderation_state')->getValue();
            #Obligé de load le ModerationState complet, il n'y est pas dans l'objet de la revision.....
            $moderationStateObject = ModerationState::load( $moderationState[0]['target_id']);
            $result->workbench_revision_tracker_revision_id = $moderationStateObject->get('label');

          }
      }
    }
}

function oab_backoffice_transliteration_overrides_alter(&$overrides, $langcode) {
    if ($langcode == 'ru') {
        // changements demandés par Alexandra (majuscules et minuscules)
        // caractère ч ӵ => ch
        $overrides[0x0447] = $overrides[0x0427] = $overrides[0x04F4] = $overrides[0x04F5] = 'ch';
        // caractère я => ya
        $overrides[0x042F] = $overrides[0x044F] = 'ya';
        // caractère ж ӂ ӝ => zh
        $overrides[0x04C1] = $overrides[0x04C2] = $overrides[0x0416] = $overrides[0x0436] = $overrides[0x04DC] = $overrides[0x04DD] = 'zh';
        // caractères Ё, ё => e
        $overrides[0x0401] = $overrides[0x0451] = "e";
        // caractères Й, й => i
        $overrides[0x0419] = $overrides[0x0439] = "i";
        // caractères Х, х => kh
        $overrides[0x0425] = $overrides[0x0445] = "kh";
        // caractères Ц, ц => ts
        $overrides[0x0426] = $overrides[0x0446] = "ts";
        // caractères Ш, ш => sh
        $overrides[0x0428] = $overrides[0x0448] = "sh";
        // caractères Щ, щ => sch
        $overrides[0x0429] = $overrides[0x0449] = "sch";
        // caractères Ы, ы, Ӹ, ӹ => i
        $overrides[0x042B] = $overrides[0x044B] = $overrides[0x04F8] = $overrides[0x04F9] = "i";
        // caractères Э, э, Ӭ, ӭ => e
        $overrides[0x042D] = $overrides[0x044D] = $overrides[0x04EC] = $overrides[0x04ED] = "e";
        // caractères Ю, ю => yu
        $overrides[0x042E] = $overrides[0x044E] = "yu";
    }
}

/**
 * Implements hook_cron().
 * Suppression des resultats des webforms de plus d'un an
 */
function oab_backoffice_cron() {
  ##Je fais la vérif' qu'une fois par jour, à 1h du mat'
  #(2h, mais du coup, y a 1h de decalage par rapport à l'heure D8)
  if( date('G',  \Drupal::time()->getCurrentTime()) == 2) {

      ##je recupère la date d'il y a un an
      $date = new Datetime\DrupalDateTime('1 year ago', new \DateTimezone(DATETIME_STORAGE_TIMEZONE));
      $formatted = $date->format('U');    ## Format milliseconde

      ##Query pour retrouver toutes les submissions antérieures à un an
      $query = \Drupal::entityQuery('webform_submission')
          ->condition('created', $formatted, '<');
      $results = $query->execute();

      ##je load toutes les submissions trouvées
      $storage = \Drupal::entityTypeManager()->getStorage('webform_submission');
      $webform_submissions = $storage->loadMultiple($results);
      $nbSubmissions = count($webform_submissions);   ##Nb pour le log

      ##Suppression de toutes les entités trouvées
      $storage->delete($webform_submissions);


      #####################################
      #####################################
      # Suppression des elements du dossier d'export des listes de documents du site
      \Drupal\oab_backoffice\Controller\OabExportFileListController::clearStorageDir();


  }
}

/**
 * fonction qui retournent les valeurs disponibles pour le choix de la couleur du block Rebond Wysiwyg
 */
function oab_backoffice_paragraph_rebond_wysiwyg_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  return [
    "#f60"        => "Orange",
    "#fff"        => "White",
    "#000"        => "Black",
    "#55bc87"     => "Green",
    "#a786d5"     => "Purple",
    "#4bb4e6"     => "Blue",
    "#ffd200"     => "Yellow",
    "#ffb4e6"     => "Pink",
    "#595959"     => "Grey",
    "#8F8C87"     => "Dark grey",
    "#58595b"     =>"Darker grey",
    "#333333"     => "Grey black",
  ];
}


/**
 * Ajout de vérification lors de la création d'un produit DVI
 *  Si l'utilisateur à coché la case "Produit DVI", alors il faut :
 *      - qu'il ait selectionné "Produits DVI" dans la taxo Subhome (rubrique)
 *      - qu'il ait selectionné au moins un element dans la taxo Market Segment DVI
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormState $form_state
 */
function oab_backoffice_check_dvi_product_form_validate(array $form, Drupal\Core\Form\FormState &$form_state) {

  ##Je commence par recupérer les valeurs rentrées par l'user
  $userValues = $form_state->getUserInput();

  if (isset($userValues['langcode'][0]['value'])){
    $content_language = $userValues['langcode'][0]['value'];
  }
  else{
    $content_language = null;
  }

  ## Si l'utilisateur a coché "Produit DVI", on effectue des vérifications supplémentaires
  if (isset($userValues[DviHelper::FIELD_IS_DVI_PRODUCT_NAME])
    && $userValues[DviHelper::FIELD_IS_DVI_PRODUCT_NAME] == "1" ) {


    #Petite gestion pour la langue, pour afficher le bon element....
    $node = $form_state->getFormObject()->getEntity();
    $langcode = $node->langcode->value;

    ##Si la lang n'est pas fr ou en, je met un message d'erreur et je quitte
    if ($langcode != "en" && $langcode != "fr") {
      $form_state->setErrorByName(DviHelper::FIELD_IS_DVI_PRODUCT_NAME,
        t("DVI product is not available in your language. Please check \"No\" at DVI Product to process"));
      return;
    }


    ## 1. Il faut que l'utilisateur ait selectionné la subhome "Produits DVI"

    ##Je recupère les éléments selectionnés dans la taxo Subhome (false si le field n'existe pas..)
    $field_taxoSubhome = isset($userValues[DviHelper::FIELD_SUBHOME_NAME])
      ? $userValues[DviHelper::FIELD_SUBHOME_NAME]
      : false;

    $isTaggedDvi = false;                    ##Pour connaitre le résultat
    $taxoSubhomeTid = DviHelper::getProductDviSubhomeTid($content_language);  ##Je recupère le tid de la taxo ProductDvi
    ##translation faite toute seule par la fonction

    ##Je boucle sur tous les éléments selectionnés
    if (is_array($field_taxoSubhome)) {
      foreach ($field_taxoSubhome as $element) {

        ##Si un des elements est taggué, je passe à true
        if ($element == $taxoSubhomeTid) {
          $isTaggedDvi = true;
        }
      }
    }

    ##Si on n'a pas trouvé la taxo Subhome Produit DVI, je fais remonter une erreur
    if (!$isTaggedDvi) {

      ##On remonte l'erreur
      $form_state->setErrorByName(DviHelper::FIELD_SUBHOME_NAME,
        t("Since you declare the product as DVI, you must select \"Products DVI\" as a subhome"));
    }

    ## 2. Il faut que l'utilisateur ait selectionné au moins un element dans Market Segment

    ##Je recupère la valeur rentrée pour la taxo DVI Market Segment
    $field_mstaco = isset($userValues[DviHelper::FIELD_DVI_MARKET_SEGMENT_NAME])
      ? $userValues[DviHelper::FIELD_DVI_MARKET_SEGMENT_NAME]
      : false;

    ##Si on ne recup pas d'array, ou si l'array est vide (ie. rien n'a ete selectionné)
    ## je remonte un message d'erreur
    if (!is_array($field_mstaco) || (is_array($field_mstaco) && count($field_mstaco) == 0)) {
      $form_state->setErrorByName(DviHelper::FIELD_DVI_MARKET_SEGMENT_NAME,
        t("Since you declare the product as DVI, you need to select at least one element of the DVI Market Segment taxonomy"));
    }
  }
}


/**
 * Implements hook_pathauto_alias_alter().
 */
function oab_backoffice_pathauto_alias_alter(&$alias, array &$context) {

    ##Modification de l'alias créé lors de la creation d'un produit DVI
    ## (un produit DVI est un contenu de type produit, mais l'URL diffère)
    if (isset($context['bundle']) && $context['bundle'] == 'product'
        && isset($context['op']) && $context['op'] == "insert"
        && isset($context['data']['node'])
    ) {
        ##Recuperation du produit
        $node = $context['data']['node'];

        ##je recupère la valeur contenue dans l'element IsDviProduct
        $isDvi_array = $node->get(DviHelper::FIELD_IS_DVI_PRODUCT_NAME)->getValue();
        if (is_array($isDvi_array) && count($isDvi_array) > 0 ) {
            $isDvi_value = $isDvi_array[0]['value'];

            #Si on a un produit DVI
            if ($isDvi_value == "1") {

                ##Je sépare l'alias pré-créé par le système
                $alias_parts = explode('/', $alias);

                ##Si le premier element du tableau est un string vide, je le supprime
                ## (très probable que l'URL commence par "/" et dans ce cas, PHP ajoute un string vide au debut)
                if (isset($alias_parts[0]) && $alias_parts[0] == "") {
                    array_shift($alias_parts);
                }

                #j'ajoute en début la partie de l'URL spécifique à DVI
                array_unshift($alias_parts, DviHelper::DVI_PRODUCT_URL);

                ##En bouclant sur tous les éléments, je recrée l'alias
                $newAlias = "";
                foreach ($alias_parts as $part) {
                    $newAlias .= "/$part";
                }

                ## Puis je set l'alias avec le mien
                $alias = $newAlias;
            }
        }
    }

}

/**
 * Implements hook_theme().
 */
function oab_backoffice_theme($existing, $type, $theme, $path) {
    return [
        'oab_export_file_list__ending_page'  => [
            'variables' => [
                "file_url"      => NULL,
                "origin_url"    => NULL
            ],
            'template'  => 'OabExportFileList/oab-export-file-list--ending-page'
        ],
    ];
}
