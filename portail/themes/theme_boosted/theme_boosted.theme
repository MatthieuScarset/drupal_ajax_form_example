<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function theme_boosted_theme_suggestions_form_alter(array &$suggestions, array $variables) {
    $suggestions[] = 'form__' . $variables['element']['#form_id'];
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */

function theme_boosted_theme_suggestions_node_alter(array &$suggestions, array $variables) {
}

function theme_boosted_preprocess_node(&$variables) {

}

function theme_boosted_preprocess_page(&$variables) {
  if (\Drupal::routeMatch()->getParameter('node')) {
    $node = \Drupal::routeMatch()->getParameter('node');
  }
  if (\Drupal::routeMatch()->getParameter('node_preview')) {
    $node = \Drupal::routeMatch()->getParameter('node_preview');
  }
  if($revision = \Drupal::routeMatch()->getParameter('node_revision')) {
    $node = node_revision_load($revision);
  }
  if (is_object($node)
  && get_class($node) == 'Drupal\node\Entity\Node') {
    $content_type = $node->bundle();
    $definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $content_type);
    if (isset($definitions)
    && array_key_exists('field_display_title', $definitions)) {
      $display_title = $node->get('field_display_title')->getValue();
      if (isset($display_title[0]['value'])
      && $display_title[0]['value'] == 0
      && isset($variables['page']['content']['theme_boosted_page_title'])
      ) {
        $variables['page']['content']['theme_boosted_page_title']['#access'] = FALSE;
      }
    }
  }
}

function theme_boosted_preprocess_views_view(&$variables){
  $view = $variables['view'];
  $id = $view->storage->id();

  if ($id == 'subhomes'){
    if (isset($view->display_handler->options['arguments'])
      && is_array($view->display_handler->options['arguments'])) {
      foreach ($view->display_handler->options['arguments'] AS $field_arg_key => $field_arg_value) {
        if (isset($field_arg_value['default_argument_type'])
          && $field_arg_value['default_argument_type'] == 'config_key') {
          if (isset($field_arg_value['default_argument_options']['config_name'])
            && !empty($field_arg_value['default_argument_options']['config_name'])
            && isset($field_arg_value['default_argument_options']['config_key'])
            && !empty($field_arg_value['default_argument_options']['config_key'])){
            $term_variable = \Drupal::config($field_arg_value['default_argument_options']['config_name'])->get($field_arg_value['default_argument_options']['config_key']);
            if (!is_null($term_variable)) {
              $term = \Drupal\taxonomy\Entity\Term::load((int)$term_variable);

              if (isset($term)
                && is_object($term)) {
                $variables['views_term'] = $term->getDescription();
              }
            }
          }
        }
      }
    }
  }
}

function theme_boosted_preprocess_field(&$variables){
  /*
  $element = $variables['element'];
  if ($element['#field_name'] == 'field_commentaire'){
    $variables['attributes']['class'][] = 'field-comments';
    $variables['attributes']['class'][] = 'col';
    $variables['attributes']['class'][] = 'col-md-8';
    $variables['attributes']['class'][] = 'col-sm-12';
  }
  */
}

function theme_boosted_preprocess_file_link(&$variables){
  $file = $variables['file'];
  $options = array();

  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);
  // @todo Wrap in file_url_transform_relative(). This is currently
  // impossible. As a work-around, we currently add the 'url.site' cache context
  // to ensure different file URLs are generated for different sites in a
  // multisite setup, including HTTP and HTTPS versions of the same site.
  // Fix in https://www.drupal.org/node/2646744.
  $url = file_create_url($file_entity->getFileUri());
  $variables['#cache']['contexts'][] = 'url.site';

  $mime_type = $file->getMimeType();
  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();

  $file_type = strtr($mime_type, array('application/' => '', 'audio/' => '', 'image/' => '', 'multipart/' => '', 'text/' => '', 'video/' => ''));

  //$node = \Drupal::request()->attributes->get('node');
  //ksr($node->get('field_file'));

  $link_text = t("Download") . " " . strtr($file_type, array('/' => '-', '.' => '-'));
  $options['attributes']['title'] = $file_entity->getFilename();

  // Classes to add to the file field for icons.
  $classes = array(
    'file',
    // Add a specific class for each and every mime type.
    'file--mime-' . strtr($mime_type, array('/' => '-', '.' => '-')),
    // Add a more general class for groups of well known MIME types.
    'file--' . file_icon_class($mime_type),
  );

  // Set file classes to the options array.
  $variables['attributes'] = new Attribute($variables['attributes']);
  $variables['attributes']->addClass($classes);

  $variables['link'] = \Drupal::l($link_text, Url::fromUri($url, $options));
}

?>