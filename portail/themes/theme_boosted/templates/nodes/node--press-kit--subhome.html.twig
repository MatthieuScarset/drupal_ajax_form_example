{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% set createdDate = node.getCreatedTime %}
{% set day = createdDate|date("d") %}
{% set month = createdDate|date("F") %}
{% set year = createdDate|date("Y") %}
{% set node_title = label %}

{% set tmp_month = month|trans %}
{% set lang = node.get('langcode').getValue()[0].value %}
{% if lang == 'fr' or  lang == 'ru' %}
    {% set month = tmp_month|lower %}
{% endif %}

{##############}
{# Je tourne sur tous les field_file (même s'il n'y en a qu'un seul
parce que c'est enregistré dans un array) #}{#
{% for key, my_field_file in content.field_file  %}
   {% set media = my_field_file.entity %}
   {% set file_entity = media.field_file.entity %}
    {% if file_entity is not null and file_entity.filesize.value is not null %}
        <a href="{{ file_url(file_entity.getFileUri) }}" class="link-subhomes" target="_blank">
            <div class="display-subhomes">
                <div class="encart col-lg-12">
                    <div class="bigKey col-lg-5 "><span>{{ day }}</span></div>
                    <div class="lowKey col-lg-7 "><span>
                        {{ month|trans }}<br/>{{ year }}</span>
                    </div>
                </div>
                {# Pour faire la marge du trait identique aux autres blocs,
                je suis obligé de la mettre dans un col-lg-12 aussi
                <div class="col-lg-12">
                    <div class="border col-lg-12"></div>
                </div>
                <div class="txt col-lg-12">
                            <span>{{ 'Press folder'|trans }} - {{ file_entity.getFilename | file_format }}
                                    {{ file_entity.getsize | format_bytes }} </span>
                            <div>{{ node_title|length > 20 ? node_title|slice(0, 20) ~ '...' : node_title }}</div>

                </div>
            </div>
        </a>
    {% endif %}
{% endfor %}#}

{# black-on-orange #}

{# Si j'ai une visual, je le met en fond #}

{% if (content.field_visual['#items']|length > 0) %}
    {% set img_uri = "" %}
    {% for key, image in content.field_visual  %}
        {%if image.entity %}
            {% set media = image.entity %}
            {% set file = media.field_image.entity %}
            {% set img_uri = file_url(file.uri.value) %}
        {% endif %}
    {% endfor %}
    <div class="elem-press-kit" style="background-image: url({{ img_uri }})">
{# Sinon c'est l'aplat qui est utilisé #}
{% else  %}
    {% set aplat_class = 'black-on-orange' %}
     {% if content.field_aplat.0 is not empty%}
         {% set aplat_class = content.field_aplat.0['#markup'] %}
     {% endif %}
     <div class="elem-press-kit {{ aplat_class }}">
{% endif %}
        <h3>{{ node_title }}</h3>

         {% if content.field_file.0['#media'].field_file.entity is not null %}
             <span class="file-info">
                 <a href="{{ file_url(content.field_file.0['#media'].field_file.entity.getFileUri) }}">
                     {{ 'Download press kit'|trans }}</a> - {{ content.field_file.0['#media'].field_file.entity.getFilename | file_format }}
                 {{ content.field_file.0['#media'].field_file.entity.getsize | format_bytes }}
             </span>
         {% endif %}

    </div>
{##############}