<?php

/**
 * @file
 * Functions to support theming in the OBS backoffice theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function theme_obs_backoffice_preprocess_html(&$variables) {
  // If on a node add or edit page, add a node-layout class.
  global $config;
  $variables['header_env'] = $config['header_env'];

  $path_args = explode('/', \Drupal::request()->getPathInfo());
  if ($suggestions = theme_get_suggestions($path_args, 'page', '-')) {
    foreach ($suggestions as $suggestion) {
      if ($suggestion === 'page-node-edit' || strpos($suggestion, 'page-node-add') !== FALSE) {
        $variables['attributes']['class'][] = 'node-form-layout';
      }
    }
  }
}

/**
 * Implements hook_pre_render_HOOK() for menu-local-tasks templates.
 *
 * Use preprocess hook to set #attached to child elements
 * because they will be processed by Twig and drupal_render will
 * be invoked.
 */
function theme_obs_backoffice_preprocess_menu_local_tasks(&$variables) {
  if (!empty($variables['primary'])) {
    $variables['primary']['#attached'] = array(
      'library' => array(
        'theme_obs_backoffice/drupal.nav-tabs',
      ),
    );
  }
  elseif (!empty($variables['secondary'])) {
    $variables['secondary']['#attached'] = array(
      'library' => array(
        'theme_obs_backoffice/drupal.nav-tabs',
      ),
    );
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
function theme_obs_backoffice_preprocess_menu_local_task(&$variables) {
  $variables['attributes']['class'][] = 'tabs__tab';
}


/**
 * Implements hook_preprocess_HOOK() for block content add list templates.
 *
 * Displays the list of available custom block types for creation, adding
 * separate variables for the label and url.
 */
function theme_obs_backoffice_preprocess_block_content_add_list(&$variables) {
  /*
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $options = array('query' => \Drupal::request()->query->all());
      $variables['types'][$type->id()]['url'] = \Drupal::url('block_content.add_form', array('block_content_type' => $type->id()), $options);
    }
  }
  */
}

/**
 * Implements hook_preprocess_block() for block content.
 *
 * Disables contextual links for all blocks.
 */
function theme_obs_backoffice_preprocess_block(&$variables) {
  if (isset($variables['title_suffix']['contextual_links'])) {
    unset($variables['title_suffix']['contextual_links']);
    unset($variables['elements']['#contextual_links']);
    $variables['attributes']['class'] = array_diff($variables['attributes']['class'], ['contextual-region']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for block admin page templates.
 */
function theme_obs_backoffice_preprocess_admin_block_content(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $key => $item) {
      $variables['content'][$key]['url'] = $item['url'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action templates.
 */
function theme_obs_backoffice_preprocess_menu_local_action(array &$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'button--primary';
  $variables['link']['#options']['attributes']['class'][] = 'button--small';

  // We require Modernizr's touch test for button styling.
  $variables['#attached']['library'][] = 'core/modernizr';
}

/**
 * Implements hook_element_info_alter().
 */
function theme_obs_backoffice_element_info_alter(&$type) {
  // We require Modernizr for button styling.
  if (isset($type['button'])) {
    $type['button']['#attached']['library'][] = 'core/modernizr';
  }
}

/**
 * Implements hook_preprocess_install_page().
 */
function theme_obs_backoffice_preprocess_install_page(&$variables) {
  // OBS backoffice has custom styling for the install page.
  $variables['#attached']['library'][] = 'theme_obs_backoffice/install-page';
}

/**
 * Implements hook_preprocess_maintenance_page().
 */
function theme_obs_backoffice_preprocess_maintenance_page(&$variables) {
  // OBS backoffice has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'theme_obs_backoffice/maintenance-page';
}

function theme_obs_backoffice_preprocess_views_view_field(&$variables) {
	if ($variables['field']->field == 'moderation_state_update'){
		$result = $variables['row']->_entity;

		if( $result !== null && $result->get('moderation_state_update') !== null){
			$moderationStateUpdate = $result->get('moderation_state_update')->getValue();
			$mod = \Drupal\scheduled_updates\Entity\ScheduledUpdate::load($moderationStateUpdate[0]['target_id']);

			if ($mod->update_timestamp !== null){
				$updateState = $mod->field_moderation_state->getValue();
				$updateTimestamp = $mod->update_timestamp->getValue();
				$date = \Drupal\Core\Datetime\DrupalDateTime::createFromTimestamp($updateTimestamp[0]['value']);

				if (isset($updateState[0]['target_id'])){
					$variables['output'] = "Scheduled on ".$date." for ".$updateState[0]['target_id'];
				}else{
					$variables['output'] = "Scheduled on ".$date;
				}
			}else{
				$variables['output'] = '';
			}
		}else{
			$variables['output'] = '';
		}
	}
}