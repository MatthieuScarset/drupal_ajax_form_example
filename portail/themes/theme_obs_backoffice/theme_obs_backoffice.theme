<?php

/**
 * @file
 * Functions to support theming in the OBS backoffice theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function theme_obs_backoffice_preprocess_html(&$variables) {
  // If on a node add or edit page, add a node-layout class.
  $path_args = explode('/', \Drupal::request()->getPathInfo());
  if ($suggestions = theme_get_suggestions($path_args, 'page', '-')) {
    foreach ($suggestions as $suggestion) {
      if ($suggestion === 'page-node-edit' || strpos($suggestion, 'page-node-add') !== FALSE) {
        $variables['attributes']['class'][] = 'node-form-layout';
      }
    }
  }
}

/**
 * Implements hook_pre_render_HOOK() for menu-local-tasks templates.
 *
 * Use preprocess hook to set #attached to child elements
 * because they will be processed by Twig and drupal_render will
 * be invoked.
 */
function theme_obs_backoffice_preprocess_menu_local_tasks(&$variables) {
  if (!empty($variables['primary'])) {
    $variables['primary']['#attached'] = array(
      'library' => array(
        'theme_obs_backoffice/drupal.nav-tabs',
      ),
    );
  }
  elseif (!empty($variables['secondary'])) {
    $variables['secondary']['#attached'] = array(
      'library' => array(
        'theme_obs_backoffice/drupal.nav-tabs',
      ),
    );
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
function theme_obs_backoffice_preprocess_menu_local_task(&$variables) {
  $variables['attributes']['class'][] = 'tabs__tab';
}

/**
 * Implements hook_preprocess_HOOK() for list of available node type templates.
 */
function theme_obs_backoffice_preprocess_node_add_list(&$variables) {
  if (!empty($variables['content'])) {
    /** @var \Drupal\node\NodeTypeInterface $type */
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $variables['types'][$type->id()]['url'] = \Drupal::url('node.add', array('node_type' => $type->id()));
    }

   // kprint_r($variables);
    // Pour le type de contenu "Container", on crée des entrées spéciales pour chaque terme
    // RUBYPORTAILOBS-2430
    if(isset($variables['types']['container']))
    {
      $content_types_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('rendering_model', 0, null, true);
      foreach($content_types_terms as $type_term)
      {
          $variables['types'][$type_term->tid->value]['label'] = $type_term->name->value;
          $variables['types'][$type_term->tid->value]['url'] = \Drupal::url('node.add', array('node_type' => 'container', 'rendering_model_tid' => $type_term->tid->value ));
      }
      unset($variables['types']['container']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for block content add list templates.
 *
 * Displays the list of available custom block types for creation, adding
 * separate variables for the label and url.
 */
function theme_obs_backoffice_preprocess_block_content_add_list(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $options = array('query' => \Drupal::request()->query->all());
      $variables['types'][$type->id()]['url'] = \Drupal::url('block_content.add_form', array('block_content_type' => $type->id()), $options);
    }
  }
}

/**
 * Implements hook_preprocess_block() for block content.
 *
 * Disables contextual links for all blocks.
 */
function theme_obs_backoffice_preprocess_block(&$variables) {
  if (isset($variables['title_suffix']['contextual_links'])) {
    unset($variables['title_suffix']['contextual_links']);
    unset($variables['elements']['#contextual_links']);

    $variables['attributes']['class'] = array_diff($variables['attributes']['class'], ['contextual-region']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for block admin page templates.
 */
function theme_obs_backoffice_preprocess_admin_block_content(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $key => $item) {
      $variables['content'][$key]['url'] = $item['url'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action templates.
 */
function theme_obs_backoffice_preprocess_menu_local_action(array &$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'button--primary';
  $variables['link']['#options']['attributes']['class'][] = 'button--small';

  // We require Modernizr's touch test for button styling.
  $variables['#attached']['library'][] = 'core/modernizr';
}

/**
 * Implements hook_element_info_alter().
 */
function theme_obs_backoffice_element_info_alter(&$type) {
  // We require Modernizr for button styling.
  if (isset($type['button'])) {
    $type['button']['#attached']['library'][] = 'core/modernizr';
  }
}

/**
 * Implements hook_preprocess_install_page().
 */
function theme_obs_backoffice_preprocess_install_page(&$variables) {
  // OBS backoffice has custom styling for the install page.
  $variables['#attached']['library'][] = 'theme_obs_backoffice/install-page';
}

/**
 * Implements hook_preprocess_maintenance_page().
 */
function theme_obs_backoffice_preprocess_maintenance_page(&$variables) {
  // OBS backoffice has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'theme_obs_backoffice/maintenance-page';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Changes vertical tabs to container and adds meta information.
 */
function theme_obs_backoffice_form_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  $form['#theme'] = array('node_edit_form');
  $form['#attached']['library'][] = 'theme_obs_backoffice/node-form';

  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = array(
    '#attributes' => array('class' => array('entity-meta__header')),
    '#type' => 'container',
    '#group' => 'advanced',
    '#weight' => -100,
    'published' => array(
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => $node->isPublished() ? t('Published') : t('Not published'),
      '#access' => !$node->isNew(),
      '#attributes' => array(
        'class' => 'entity-meta__title',
      ),
    ),
    'changed' => array(
      '#type' => 'item',
      '#wrapper_attributes' => array('class' => array('entity-meta__last-saved', 'container-inline')),
      '#markup' => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ),
    'author' => array(
      '#type' => 'item',
      '#wrapper_attributes' => array('class' => array('author', 'container-inline')),
      '#markup' => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()->getUsername(),
    ),
  );
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';



  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'theme_obs_backoffice_node_form_submit';
    }
  }
}

function theme_obs_backoffice_form_node_container_delete_form_alter(&$form, FormStateInterface $form_state) {
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'theme_obs_backoffice_node_form_submit';
    }
  }
}

function theme_obs_backoffice_node_form_submit(&$form, &$form_state) {

  $node = $form_state->getFormObject()->getEntity();
  $title = $node->getTitle();
  if (isset($node->field_rendering_model)){
  $field_rendering_model = $node->field_rendering_model->getValue();
  if (isset($field_rendering_model[0]['target_id']) && !empty($field_rendering_model[0]['target_id'])) {
    $tid = $field_rendering_model[0]['target_id'];
    // Load the label of the model
    $type = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($tid)
      ->label();
  }
  else { // recuperer le Tid dans les autres cas, en attendant, on met juste le type container
    $type = \Drupal::entityTypeManager()
      ->getStorage('node_type')
      ->load($node->bundle())
      ->label();
  }

  // Unset previous set messages.
  drupal_get_messages('status');

  switch ($form['#form_id']) {
    case 'node_container_form':
      $t_args = array('@type' => $type, '%title' => $node->link($node->label()));
      drupal_set_message(t('@type %title has been created.', $t_args));
      break;
    case 'node_container_edit_form':
      $t_args = array('@type' => $type, '%title' => $node->link($node->label()));
      drupal_set_message(t('@type %title has been updated.', $t_args));
      break;
    case 'node_container_delete_form':
      $t_args = array('@type' => $type, '%title' => $title);
      drupal_set_message(t('The @type %title has been deleted.', $t_args));
      break;
  }
  }
}


function theme_obs_backoffice_preprocess_page_title(&$variables) {

  // recuperation du TID dans l'URL pour determiner le modele en cours de creation/edition/suppression

  $urlParameters= \Drupal::request()->query->all();
  if (isset($urlParameters['rendering_model_tid'])) {
    $tid = $urlParameters['rendering_model_tid'];
  }



  $content_creation = \Drupal::routeMatch()->getParameter('node_type');

  if (isset($content_creation)
  && is_object($content_creation)) {

    //CREATION

    if ($content_creation->get('type') == 'container'
    && isset($tid)) {
      //This is a new node.CREATE CONTENT

      $bundle_label = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
      if (isset( $bundle_label)) {
        $bundle_label = $bundle_label->label();
      }

      // display new title : Create 'modele'
      $variables['title'] = t('Create @name', array('@name' => $bundle_label));

    }
  } else {
    // EDITION or SUPPRESSION

    // Load the node entity from current route
    $node = \Drupal::routeMatch()->getParameter('node');
    if (isset($node) && is_object($node)) {

      $title = $node->getTitle();
      $content_type = $node->bundle();

      if ($content_type == 'container') {
        $field_rendering_model = $node->field_rendering_model->getValue();

        if (isset($field_rendering_model[0]['target_id']) && !empty($field_rendering_model[0]['target_id'])) {
          $tid = $field_rendering_model[0]['target_id'];


          // Load the label of the bundle
          $bundle_label = \Drupal::entityTypeManager()
              ->getStorage('taxonomy_term')
              ->load($tid)
              ->label();

          /* solution utilisant les arguments dans le PATH*/
          $path_args = explode('/', \Drupal::request()->getPathInfo());

          end($path_args);
          $content_mode = $path_args[key($path_args)];

          if ($content_mode == 'edit') {
            // This is a node in Edition
            $variables['title'] = t('<em>Edit @type</em> @title', array('@type' => $bundle_label, '@title' => $title));

          } else if ($content_mode == 'delete') {
            // This is a node in delete mode

          }
        }
      }
    }
  }

}


function theme_obs_backoffice_form_entity_browser_browse_medias_iframe_form_alter(&$form, FormStateInterface $form_state) {
//kpr($form);
  //exit;
}
