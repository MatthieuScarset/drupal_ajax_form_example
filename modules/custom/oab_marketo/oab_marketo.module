<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\node\NodeStorage;
use Drupal\oab_backoffice\Form\OabSettingsPardotForm;
use Drupal\oab_marketo\AltaresTokenService;
use Drupal\oab_marketo\Form\ParagraphDeleteForm;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;


function oab_marketo_entity_type_build(array &$entity_types) {
  $entity_types['paragraph']->setFormClass('entity_delete', ParagraphDeleteForm::class);
}

/**
 * Implements hook_paragraph_access().
 */
function oab_marketo_paragraph_access(ParagraphInterface $paragraph, $operation, AccountInterface $account) {

  if ($paragraph->bundle() === 'marketo') {
    return AccessResult::allowedIfHasPermission($account, "$operation marketo form");
  }

  return AccessResult::neutral();
}


/**
 * Implements hook_ENTITY_TYPE_create_access().
 * @param AccountInterface $account
 * @param array $context
 * @param $entity_bundle
 * @return AccessResult
 */
function oab_marketo_paragraph_create_access(AccountInterface $account, array $context, $entity_bundle) {
  if ($entity_bundle === 'marketo') {
    if ($account->hasPermission('create marketo form')) {
      return AccessResult::allowed();
    } else {
      return AccessResult::forbidden();
    }
  }

  return AccessResult::neutral();
}


/**
 * Implements hook_library_info_alter().
 * Lorsqu'on utilise la librairie Marketo, on ajoute des JS externes avec une URL dépendante de paramètres
 */
function oab_marketo_library_info_alter(&$libraries, $extension) {

  if (isset($libraries['marketo'])) {
    $conf = Drupal::config(OabSettingsPardotForm::getConfigName());
    $domain = $conf->get('marketo.general.mkto_domain');
    $munchkin = $conf->get('marketo.general.mkto_munchkin_id');

    $base_url = "https:$domain/rs/$munchkin";
    $library = $conf->get('marketo.general.libraries');

    if ($domain !== null && $domain !== ""
        && $munchkin !== null && $munchkin !== "") {
//      $libraries['marketo']['js'][$base_url . '/images/forms2.min.js'] = ["#type" => "external"];
//      $libraries['marketo']['js'][$base_url . '/images/enhancedFormFunctions-v2.js'] = ["#type" => "external"];
//      $libraries['marketo']['js'][$base_url . '/images/simpledto-multi-domain.js'] = ["#type" => "external"];
//      $libraries['marketo']['js'][$base_url . '/images/OBSExternalEmbedCode.js'] = ["#type" => "external"];
        $libraries['marketo']['js'][$base_url . '/images/' . $library['awe']] = ["#type" => "external"];
        $libraries['marketo']['js'][$base_url . '/images/' . $library['enhanced_form']] = ["#type" => "external"];
        $libraries['marketo']['js'][$base_url . '/images/' . $library['simple_dto']] = ["#type" => "external"];
        $libraries['marketo']['js'][$base_url . '/images/' . $library['forms2']] = ["#type" => "external"];
        $libraries['marketo']['js'][$base_url . '/images/' . $library['photoclient']] = ["#type" => "external"];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK
 *
 * @param $variables
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function oab_marketo_preprocess_paragraph(&$variables) {

  if (!isset($variables['paragraph'])) {
    return;
  }
  $formName = 'contact';

  $marketo_conf = \Drupal::config(OabSettingsPardotForm::getConfigName());

  /** @var Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  if ($paragraph->bundle() === 'marketo') {
    $variables['#attached']['library'][] = 'oab_marketo/marketo';

    if ($paragraph->field_redirection_url->count() > 0) {
      $redirection_url = $paragraph->field_redirection_url->first()->getUrl()->toString();
    }

    if (isset($paragraph->field_order) && $paragraph->field_order->count() > 0) {
      $fields = $paragraph->field_order->value;
      $list_field = array_filter(array_map('trim', explode("\n", $fields)));
    }

    if($variables['elements']['#view_mode'] === 'marketo_document_form') {
      $node = \Drupal::routeMatch()->getParameter('node');
      if (!empty($node)) {
        if (NULL !== ($media = Media::load($node->field_file->target_id))) {
          if (NULL !== ($file = File::load($media->field_file->target_id ?? 0))) {
            $variables['document_file_absolute_url'] = $file->createFileUrl();
          }
        }
      }

      $formName = $paragraph->field_title->value;
      $variables['mkto_form_id'] = $paragraph->field_form_id->value;;
      $variables['mkto_follow_up_message'] = $paragraph->field_message_of_thanks->value;
      if (isset($list_field)) {
        if (!in_array("submitButton", $list_field)) {
          array_push($list_field, "submitButton");
        }
        if (!in_array("LegalInfos", $list_field)) {
          array_push($list_field, "LegalInfos");
        }
      }
    }


    // Si le field "require altares" est activé
    if (isset($paragraph->field_requires_altares->value) && $paragraph->field_requires_altares->value) {
      /** @var AltaresTokenService $altares_token_service */
      $altares_token_service =  Drupal::service('oab_marketo.altares_token.service');
      $token = $altares_token_service->createToken();
      $variables['#attached']['drupalSettings']['marketo_altares_token'] = $token->getToken();
      $variables['#cache']['max-age'] = 0;
      $variables['elements']['#cache']['max-age'] = 0;
      \Drupal::service('page_cache_kill_switch')->trigger();
    }

    $variables['#attached']['drupalSettings']['marketo_data'] = [
      'mktoDomain' => $marketo_conf->get('marketo.general.mkto_domain'),
      'mktoMunchkinID' => $marketo_conf->get('marketo.general.mkto_munchkin_id'),
      'mktoFormID' => (int) $paragraph->field_form_id->value,
      'formName' => $formName,
      'useAltares' => (bool) $paragraph->field_requires_altares->value,
      'customFollowUpUrl' => isset($redirection_url) ? $redirection_url : "",
      'followUpMsgDiv' => "FormFollowUpMessage_" . (int) $paragraph->field_form_id->value,
      'mktoFieldOrder' => isset($list_field) ? $list_field : ["submitButton","LegalInfos"]
    ];

    $variables['#attached']['drupalSettings']['marketo_data_for_tealium'] = [
      'version' => $marketo_conf->get('marketo.general.mkto_version'),
      'sous_domaine' => $marketo_conf->get('marketo.general.mkto_sous_domaine'),
      'univers_affichage' => $marketo_conf->get('marketo.general.mkto_univers_affichage'),
    ];

  }
}


/**
 * Implements hook_preprocess_HOOK().
 */
function oab_marketo_preprocess_node(&$variables) {

  if (!isset($variables['node'])) {
    return;
  }

  /** @var Node $node */
  $node = $variables['node'];

  if ($node->bundle() === 'document') {

      if (null !== ($media = Media::load($node->field_file->target_id))) {
        if (null !== ($file = File::load($media->field_file->target_id ?? 0))) {
          $variables['document_file_absolute_url'] = $file->createFileUrl();
        }
      }

    $mkto_config = \Drupal::config(OabSettingsPardotForm::getConfigName());
    $variables['marketo_config_pid'] = $mkto_config->get('marketo.document.paragraph_id');;

      // Ajout de la librairie marketo
      $variables['#attached']['library'][] = 'oab_marketo/marketo';

      // Variables nécessaires pour l'instanciation du formulaire par les scripts marketo
      $variables['#attached']['drupalSettings']['marketo_data'] = [
        'mktoPdfName' => $node->label(),
        'mktoPdfLink' => isset($file) ? $file->createFileUrl() : null,
        'mktoPdfTheme' => _oab_get_labels_from_term($node->get('field_document_thematic')),
        'mktoPdfRubrique' => _oab_get_labels_from_term($node->get('field_subhome')),
        'mktoPdftype' => _oab_get_labels_from_term($node->get('field_document_type')),
        'mktoPdfSolution' => _oab_get_labels_from_term($node->get('field_solution')),
        'mktoPdfJobroles' => _oab_get_labels_from_term($node->get('field_job_profile')),
        'mktoPdfSegment' => null,
        'mktoPdfCustomerjourney' => null,
        'mktoPdfIndustrie' => _oab_get_labels_from_term($node->get('field_industry')),
      ];

      $variables['#attached']['drupalSettings']['marketo_data_for_tealium'] = [
        'version' => $mkto_config->get('marketo.general.mkto_version'),
        'sous_domaine' => $mkto_config->get('marketo.general.mkto_sous_domaine'),
        'univers_affichage' => $mkto_config->get('marketo.general.mkto_univers_affichage'),
      ];

  }
}


/**
 * @param $field
 * @return string|null
 * une fonction qui retourne la liste des terms associé à un seul contenu
 */
function _oab_get_labels_from_term($field) {
  $ret = [];
  $field_values = $field->getValue();
  if (is_array($field_values)) {
    foreach ($field_values as $value) {
      //var_dump($value['target_id']);
      if (isset($value['target_id'])) {
        $term = Term::load($value['target_id']);
        if(isset($term)) {
          $ret[] = strtolower($term->label());
        }
      }
    }
  }
  return count($ret) ? implode('|', $ret) : null;
}


/**
 * Implements hook_views_pre_render().
 */
function oab_marketo_views_pre_render(ViewExecutable $view) {

  $current_user = Drupal::currentUser();
  if ($view->id() === 'marketo_paragraph_entity_browser' && $view->current_display === 'page_list') {
    if (isset($view->field['dropbutton']->options['fields']['nothing'])) {
      if (!$current_user->hasPermission('edit marketo form')) {
        $view->field['dropbutton']->options['fields']['nothing'] = false;
      }
    }
    if (isset($view->field['dropbutton']->options['fields']['nothing_1'])) {
      if (!$current_user->hasPermission('delete marketo form')) {
        $view->field['dropbutton']->options['fields']['nothing_1'] = false;
      }
    }
  }
}


/**
 * Purge invalid cron
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function oab_marketo_cron_token() {
  $query = \Drupal::entityQuery('altares_token');
  $condition = $query
    ->orConditionGroup()
    ->condition('valid', 0)
    ->condition('expires', date('U'), '<');

  $query->condition($condition);
  $result = $query->execute();

  $storage = \Drupal::entityTypeManager()->getStorage('altares_token');
  $storage->delete($storage->loadMultiple($result));
}

