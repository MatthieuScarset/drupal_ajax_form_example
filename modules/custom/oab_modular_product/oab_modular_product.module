<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\oab_modular_product\Services\OabModularProductService;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function oab_modular_product_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {

  /*
   * Ici, on ne va gérer que les alterations du formulaire du paragraph
   */
  if (!isset($entity_form['#bundle'])) {
    return;
  }

  /** @var OabModularProductService $conf_modular_product */
  $conf_modular_product = \Drupal::service('oab_modular_product.settings');

  $title_short = $conf_modular_product->getShortTitleMaxCharacter();
  $title_long = $conf_modular_product->getLongTitleMaxCharacter();
  $description = $conf_modular_product->getLongDescriptionMaxCharacter();

  $size_title_short = min(150, $conf_modular_product->getShortTitleMaxCharacter()+10);

  $module = [
    'module_list',
    'module_key_figures_items',
    'module_key_figures',
    'module_title_and_highlight'
  ];

  if (in_array($entity_form['#bundle'], $module)) {

    if (isset($entity_form['field_title'])) {
      $entity_form['field_title']['widget'][0]['value']['#maxlength'] = $title_short;
      $entity_form['field_title']['widget'][0]['value']['#size'] = $size_title_short;
      $entity_form['field_title']['widget'][0]['value']['#description'] .= ' '.FieldFilteredMarkup::create("$title_short characters max");
    }

    if (isset($entity_form['field_description'])) {
      $entity_form['field_description']['widget'][0]['value']['#maxlength'] = $title_short;
      $entity_form['field_description']['widget'][0]['value']['#size'] = $size_title_short;
      $entity_form['field_description']['widget'][0]['value']['#description'] .= ' '.FieldFilteredMarkup::create("$title_short characters max");
    }

    if (isset($entity_form['field_highlight'])) {
      if ($entity_form['#bundle'] === 'module_title_and_highlight') {
        $nbChar = $description;
      }
      else {
        $nbChar = $title_long;
      }

      $entity_form['field_highlight']['widget'][0]['value']['#maxlength'] = $nbChar;
      $entity_form['field_highlight']['widget'][0]['value']['#description'] .= ' ' .FieldFilteredMarkup::create("$nbChar characters max");
    }
  }


  // gestion nombres characters Module Header Default
  if($entity_form['#bundle'] === 'module_header_default') {
    if (isset($entity_form['field_title'])) {
      $entity_form['field_title']['widget'][0]['value']['#maxlength'] = $title_short;
      $entity_form['field_title']['widget'][0]['value']['#size'] = $size_title_short;
      $entity_form['field_title']['widget'][0]['value']['#description'] .= ' ' . FieldFilteredMarkup::create($title_short . ' characters max');
    }

    if (isset($entity_form['field_highlight'])) {
      $entity_form['field_highlight']['widget'][0]['value']['#maxlength'] = 350;
      $entity_form['field_highlight']['widget'][0]['value']['#description'] .= ' ' . FieldFilteredMarkup::create('350 characters max');
      $entity_form['field_highlight']['widget'][0]['value']['#rows'] = 4;
    }
  }

  $mp_modules = [
    'module_3_4_colonnes',
    'module_exemples',
    'module_services',
    'module_benefits',
    'module_partner',
    'module_steps',
    'module_text_video_image',
    'module_customer_space',
    'module_video'
  ];

  $module = [
    'module_list',
    'module_key_figures_items',
    'module_key_figures',
    'module_title_and_highlight',
    'cross_link_items'
  ];

  $max_char_short_title = $conf_modular_product->getShortTitleMaxCharacter();
  $max_char_description = $conf_modular_product->getLongDescriptionMaxCharacter();
  $field_title_markup = FieldFilteredMarkup::create("$max_char_short_title characters max");
  $field_description_markup = FieldFilteredMarkup::create("$max_char_description characters max");

  $size_title_short = min(150, $conf_modular_product->getShortTitleMaxCharacter()+10);


  if (in_array($entity_form['#bundle'], $mp_modules) || in_array($entity_form['#bundle'], $module)) {
    $fields = [
      'field_accroche',
      'field_highlight',
      'field_title'
      ];

    foreach ($fields as $field) {
      if (isset($entity_form[$field])) {
        $field_max_length = $field === 'field_title' ? $max_char_short_title : $max_char_description;
        $field_description = $field === 'field_title' ? $field_title_markup : $field_description_markup;
        $entity_form[$field]['widget'][0]['value']['#maxlength'] = $field_max_length;
        $entity_form[$field]['widget'][0]['value']['#description'] .= ' '.$field_description;

        if ($field === 'field_highlight') {
          $entity_form[$field]['widget'][0]['value']['#rows'] = 2;
        } elseif ($field === 'field_title') {
          $entity_form[$field]['widget'][0]['value']['#size'] = $size_title_short;
        }
      }
    }
  }

  if ($entity_form['#bundle'] === 'module_text_video_image') {
    $parents = $entity_form['field_visual']['#parents'];
    $parents_needed = array_slice($parents, 1, -1);
    $parent_path = implode("][", $parents_needed);
    $input_name = $parents[0].'['.$parent_path.'][field_media_type]';
    $entity_form['field_visual']['#states'] = [
      'visible' => [
        ':input[name="'.$input_name.'"]' => ['value' => 'image'],
      ],
      'required' => [
        ':input[name="'.$input_name.'"]' => ['value' => 'image'],
      ]
    ];
    $entity_form['field_video']['#states'] = [
      'visible' => [
        ':input[name="'.$input_name.'"]' => ['value' => 'video'],
      ],
      'required' => [
        ':input[name="'.$input_name.'"]' => ['value' => 'video'],
      ]
    ];
  }
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
function oab_modular_product_field_widget_single_element_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  /*
   * Ici, on ne va gérer que les alterations du formulaire du paragraph
   */
  if (!isset($element['#paragraph_type'])) {
    return;
  }


  /** @var OabModularProductService $conf_modular_product */
  $conf_modular_product = \Drupal::service('oab_modular_product.settings');

  $user_roles = \Drupal::currentUser()->getRoles();
  $user_is_admin = in_array('administrator', $user_roles);

  $mp_modules = [
    'module_3_4_colonnes_items',
    'module_exemples_items',
    'module_detail_offre',
    'module_detail_offre_items',
    'module_benefits_item',
    'module_faq',
    'module_step',
    'module_presentation',
    'module_cross_sell',
    'module_blog',
    'detail_gamme_items_offres',
    'module_detail_gamme',
    'module_detail_gamme_items',
  ];

  $mp_sous_modules = [
    'titre_and_description_and_link',
    'titre_and_description',
  ];

  $max_char_short_title = $conf_modular_product->getShortTitleMaxCharacter();
  $max_char_long_title = $conf_modular_product->getLongTitleMaxCharacter();
  $max_char_description = $conf_modular_product->getLongDescriptionMaxCharacter();

  $size_title_short = min(150, $conf_modular_product->getShortTitleMaxCharacter()+10);
  $size_title_long = min(150, $conf_modular_product->getLongTitleMaxCharacter()+10);
  $size_description = min(150, $conf_modular_product->getLongDescriptionMaxCharacter()+10);

  if (in_array($element['#paragraph_type'], $mp_modules)) {
    if (isset($element['subform']['field_title'])) {
      $element['subform']['field_title']['widget'][0]['value']['#maxlength'] = $max_char_short_title;
      $element['subform']['field_title']['widget'][0]['value']['#size'] = $size_title_short;
      $element['subform']['field_title']['widget'][0]['value']['#description']
        .= ' '.FieldFilteredMarkup::create($max_char_short_title.' characters max');
    }

    if (isset($element['subform']['field_tab_title'])) {
      $element['subform']['field_tab_title']['widget'][0]['value']['#maxlength'] = $max_char_short_title;
      $element['subform']['field_tab_title']['widget'][0]['value']['#size'] = $size_title_short;
      $element['subform']['field_tab_title']['widget'][0]['value']['#description']
        .=  ' '.FieldFilteredMarkup::create($max_char_short_title.' characters max');
    }

    if (isset($element['subform']['field_exemple_key_points'])) {
      $element['subform']['field_exemple_key_points']['widget'][0]['value']['#maxlength'] = $max_char_description;
      $element['subform']['field_exemple_key_points']['widget'][0]['value']['#size'] = $size_description;
      $element['subform']['field_exemple_key_points']['widget'][0]['value']['#description']
        .= ' '.FieldFilteredMarkup::create($max_char_description.' characters max');
    }

    if (isset($element['subform']['field_accroche'])) {
      $element['subform']['field_accroche']['widget'][0]['value']['#maxlength'] = $max_char_description;
      $element['subform']['field_accroche']['widget'][0]['value']['#description']
        .= ' '.FieldFilteredMarkup::create($max_char_description.' characters max');
    }

    if (isset($element['subform']['field_highlight'])) {
      $element['subform']['field_highlight']['widget'][0]['value']['#maxlength'] = $max_char_description;
      $element['subform']['field_highlight']['widget'][0]['value']['#description']
        .= ' ' .FieldFilteredMarkup::create($max_char_description.' characters max');
      $element['subform']['field_highlight']['widget'][0]['value']['#rows'] = 2;
    }

    if (isset($element['subform']['field_key_points'])) {
      $element['subform']['field_key_points']['widget'][0]['value']['#maxlength'] = $max_char_description;
      $element['subform']['field_key_points']['widget'][0]['value']['#size'] = $size_description;
      $element['subform']['field_key_points']['widget'][0]['value']['#description']
        .= ' '.FieldFilteredMarkup::create($max_char_description.' characters max');
    }

    if (isset($element['subform']['field_key_points_step'])) {
      $element['subform']['field_key_points_step']['widget'][0]['value']['#maxlength'] = $max_char_description;
      $element['subform']['field_key_points_step']['widget'][0]['value']['#size'] = $size_description;
      $element['subform']['field_key_points_step']['widget'][0]['value']['#description']
        .= ' '.FieldFilteredMarkup::create($max_char_description.' characters max');
    }

    if (isset($element['subform']['field_description'])) {
      $element['subform']['field_description']['widget'][0]['value']['#maxlength'] = $max_char_description;
      $element['subform']['field_description']['widget'][0]['value']['#size'] = $size_description;
      $element['subform']['field_description']['widget'][0]['value']['#description']
        .= ' '.FieldFilteredMarkup::create($max_char_description.' characters max');
    }
  }

  if (in_array($element['#paragraph_type'], $mp_sous_modules)) {
    if (isset($element['subform']['field_title'])) {
      $element['subform']['field_title']['widget'][0]['value']['#maxlength'] = $max_char_long_title;
      $element['subform']['field_title']['widget'][0]['value']['#size'] = $size_title_long;
      $element['subform']['field_title']['widget'][0]['value']['#description']
        .= ' '.FieldFilteredMarkup::create($max_char_long_title.' characters max');
    }

    if (isset($element['subform']['field_accroche'])) {
      $element['subform']['field_accroche']['widget'][0]['value']['#maxlength'] = $max_char_description;
      $element['subform']['field_accroche']['widget'][0]['value']['#description']
        .= ' '.FieldFilteredMarkup::create($max_char_description.' characters max');
    }
  }

  if ($element['#paragraph_type'] === 'module_faq') {
  /*
   * liste des fields seulement modifiable par les admins
   */

    $field_restricted = [
      'field_title',
      'field_highlight',
      'field_panel_title',
      'field_function',
      'field_visual'
    ];

    foreach ($field_restricted as $field_name) {
      if (isset($element['subform'][$field_name])) {
        if ($user_is_admin) {
          $element['subform'][$field_name]['widget']['#access'] = true;
        }
        else {
          $element['subform'][$field_name]['widget']['#access'] = false;
        }
      }
    }
    $element['subform']["field_highlight"][0]['token_tree'] = array(
      '#theme' => 'token_tree_link',
      '#token_types' => array('obs'),
      '#weight' => 90,
      '#global_types' => FALSE,
      '#click_insert' => TRUE,
    );
  }

  if ($element['#paragraph_type'] === 'module_benefits_item') {
    if (isset($element['subform']["field_icon"])) {
      $element['subform']["field_icon"][0]['token_tree'] = [
        '#theme' => 'token_tree_link',
        '#token_types' => ['icomoon'],
        '#weight' => 90,
        '#global_types' => FALSE,
        '#click_insert' => TRUE,
      ];
    }
  }

  if ($element['#paragraph_type'] === 'module_presentation') {
    $element['subform']['field_for_who_title']['#states'] = [
      'visible' => [
        ':input[name="field_presentation[0][subform][field_enable_for_who][value]"]' => ['checked' => TRUE],
      ]
    ];
    $element['subform']['field_for_who_links_list']['#states'] = [
      'visible' => [
        ':input[name="field_presentation[0][subform][field_enable_for_who][value]"]' => ['checked' => TRUE],
      ]
    ];
    $element['subform']['field_visual']['#states'] = [
      'visible' => [
        ':input[name="field_presentation[0][subform][field_media_type]"]' => ['value' => 'image'],
      ],
      'required' => [
        ':input[name="field_presentation[0][subform][field_media_type]"]' => ['value' => 'image'],
      ]
    ];
    $element['subform']['field_video']['#states'] = [
      'visible' => [
        ':input[name="field_presentation[0][subform][field_media_type]"]' => ['value' => 'video'],
      ],
      'required' => [
        ':input[name="field_presentation[0][subform][field_media_type]"]' => ['value' => 'video'],
      ]
    ];
  }

  if ($element['#paragraph_type'] === 'module_cross_sell_item') {
    $position = $element['subform']['#parents'][4];

    $element['subform']['field_internal_product']['#states'] = [
      'visible' => [
        ':input[name="field_cross_sell[0][subform][field_offer_item]['.$position.'][subform][field_external_product][value]"]'
        => ['checked' => FALSE],
      ]
    ];

    $element['subform']['external_product'] = [
      '#type' => 'fieldset',
      '#title' => t('External Offer'),
      '#states' => [
        'visible' => [
          ':input[name="field_cross_sell[0][subform][field_offer_item]['.$position.'][subform][field_external_product][value]"]'
          => ['checked' => TRUE],
        ]
      ],
      '#weight' => 500,
      'field_name' => $element['subform']['field_name'],
      'field_highlight' => $element['subform']['field_highlight'],
      'field_redirection_url' => $element['subform']['field_redirection_url'],
      'field_key_points' => $element['subform']['field_key_points']

    ];

    unset($element['subform']['field_name']);
    unset($element['subform']['field_highlight']);
    unset($element['subform']['field_redirection_url']);
    unset($element['subform']['field_key_points']);
  }
}

/**
 * Implements hook_form_alter().
 */
function oab_modular_product_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (in_array($form_id, array('node_modular_product_form', 'node_modular_product_edit_form'))) {
    /** @var \Drupal\oab_modular_product\Services\OabModularProductService $conf_modular_product */
    $conf_modular_product = \Drupal::service('oab_modular_product.settings');
    $title_short = $conf_modular_product->getShortTitleMaxCharacter();
    $description = $conf_modular_product->getLongDescriptionMaxCharacter();
    $size_title_short = min(150, $conf_modular_product->getShortTitleMaxCharacter()+10);

    if (isset($form['field_product_name'])) {
      $form['field_product_name']['widget'][0]['value']['#maxlength'] = $title_short;
      $form['field_product_name']['widget'][0]['value']['#size'] = $size_title_short;
      $form['field_product_name']['widget'][0]['value']['#description'] .= ' '.FieldFilteredMarkup::create($title_short.' characters max');
    }

    if (isset($form['field_teaser'])) {
      $form['field_teaser']['widget'][0]['value']['#maxlength'] = $description;
      $form['field_teaser']['widget'][0]['value']['#description'] .= ' '.FieldFilteredMarkup::create($description.' characters max');
    }
    oab_modular_product_hide_wysiwyg_paragraph($form);
  }

  if (in_array($form_id, ['node_corporate_form', 'node_corporate_edit_form'])) {
    oab_modular_product_hide_wysiwyg_paragraph($form);
  }
}

function oab_modular_product_hide_wysiwyg_paragraph(&$form) {

  if (isset($form["field_enable_wysiwyg_paragraph"])) {
    //On rend la case à cocher Enable Wysywyg paragraph accessible uniquement pour les admins
    if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
      $form['field_enable_wysiwyg_paragraph']['#disabled'] = TRUE;
    }

    //on vérifie si le paragraph WYSIWYG est activé ou non => s'il ne l'est pas on le supprime des options disponibles pour les modules
    if (isset($form["field_enable_wysiwyg_paragraph"]['widget']['value']["#default_value"]) &&
      $form["field_enable_wysiwyg_paragraph"]['widget']['value']["#default_value"] === false &&
      isset($form["field_modules"]["widget"]["actions"]["bundle"]["#options"]['paragraph_wysiwyg'])) {

      //le paragraph WYSIWYG n'est pas actif, on le supprime des choix pour les modules
      unset($form["field_modules"]["widget"]["actions"]["bundle"]["#options"]['paragraph_wysiwyg']);
    }
  }

  return $form;
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function oab_modular_product_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() === "paragraph") {
    if ($bundle === "module_steps" && isset($fields['field_step'])) {
      $fields['field_step']->addConstraint('ModularProductMinItems');
    } elseif (($bundle === "module_customer_space" || $bundle === "module_benefits") && isset($fields['field_item'])) {
      $fields['field_item']->addConstraint('ModularProductMinItems');
    }
  }


  if ($entity_type->id() === "node" && $bundle === "modular_product") {
    if (isset($fields['field_modules'])) {
      $fields['field_modules'] -> addConstraint('ModularProductOrderModule');
      $fields['field_modules'] -> addConstraint('ModularProductModuleRequired');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oab_modular_product_preprocess_field(&$variables) {

  if ($variables['field_name'] === "field_link_button") {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['element']['#object'];

    if (isset($paragraph->field_call_to_action_type)) {
      $variables['link_type'] = $paragraph->field_call_to_action_type->value;

      if ($paragraph->field_call_to_action_type->value === "lien") {
        /** @var \Drupal\Core\Field\FieldItemListInterface $field_link_button */
        $field_link_button = $paragraph->field_link_button;

        /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $link_item */
        $link_item =$field_link_button->first();

        if ($link_item->isExternal()) {
          $variables['attributes']['class'][] = 'icon-Redo';
          $variables['attributes']['target'][] = '_blank';
        }
        else {
          $variables['attributes']['class'][] = 'o-link-arrow';
        }
      }
      else {
        $variables['attributes']['class'][] = 'btn btn-primary';
      }
    }
  }

  $field_offre = [
    'field_offres_inclus',
    'field_offres_exclus',
    'field_documentation'
  ];

  if (in_array($variables['field_name'], $field_offre)) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['element']['#object'];
    if (isset($paragraph->field_offres_inclus) ||
        isset($paragraph->field_offres_exclus) ||
        isset($paragraph->field_documentation)) {
      $is_single = false;
      $parent = $paragraph->getParentEntity();
      $number_items = count($parent->field_items);

      if (1 == $number_items) {
        $is_single = true;
      }
      $variables['is_single'] = $is_single;
    }
  }

  if (in_array($variables['field_name'], array("field_pdf", "field_call_to_action_link"))) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['element']['#object'];
    if ($paragraph->bundle() == "documentation") {
      $paragraph_parent = Paragraph::load($paragraph->getParentEntity()->id());
      if ($paragraph_parent->bundle() == "module_detail_offre_items") {
        $variables['track_zone'] = 'detail offre';
        $variables['track_nom'] = $paragraph_parent->get('field_title')->value;
      }
    }
  }
  if (in_array($variables['field_name'], array("field_link_button"))) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['element']['#object'];
    if ($paragraph->bundle() == "call_to_action") {
      $paragraph_parent = Paragraph::load($paragraph->getParentEntity()->id());
      if ($paragraph_parent->bundle() == "module_detail_offre_items") {
        $variables['track_zone'] = 'detail offre';
        $variables['track_nom'] = $paragraph_parent->get('field_title')->value;
      }
      if ($paragraph_parent->bundle() == "detail_gamme_items_offres") {
        $variables['track_zone'] = 'detail de la gamme';
        $variables['track_nom'] = $paragraph_parent->get('field_title')->value;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oab_modular_product_preprocess_paragraph__module_detail_offre_items(&$variables) {

  /** @var Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $is_single = false;

  if (isset($paragraph)) {
    $parent = $paragraph->getParentEntity();
    $number_items = count($parent->field_items);

    if (1 == $number_items) {
      $is_single = true;
    }
  }
  $variables['is_single'] = $is_single;
}


/**
 * Implements hook_preprocess_HOOK().
 */
function oab_modular_product_preprocess_media(&$variables) {
  /** @var \Drupal\media\Entity\Media $media */
  $media = $variables['media'];
  if ($media->bundle() === "embed_video") {
    if (isset($media->field_video_url->uri)) {
      /** @var \Drupal\oab_frontoffice\Services\OabEmbedVideoUrlService $embed_video_service */
      $embed_video_service = \Drupal::service('oab_frontoffice.embed_video_url');
      $variables['embed_url_youtube'] = $embed_video_service->changeUrlToEmbedUrl($media->field_video_url->uri);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oab_modular_product_preprocess_paragraph__module_presentation(&$variables) {
  /** @var Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $variables['parent_node_title'] = $paragraph->getParentEntity()?->getTitle();
}
/**
 * Implements hook_preprocess_HOOK().
 */
function oab_modular_product_preprocess_paragraph__module_customer_space(&$variables) {

  $conf_modular_product = \Drupal::service('oab_modular_product.settings');
  $variables['module_title'] = $conf_modular_product->getCustomerSpaceModuleTitle();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oab_modular_product_preprocess_paragraph(&$variables) {
  /** @var Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  /** @var OabModularProductService $conf_modular_product */
  $conf_modular_product = \Drupal::service('oab_modular_product.settings');
  switch ($paragraph->bundle()) {
    case 'module_presentation' :
      $variables['module_title'] = $conf_modular_product->getPresentationModuleTitle();
      break;
    case 'module_detail_offre' :
      $variables['module_title'] = $conf_modular_product->getOfferDetailTitle();
      break;
    case 'module_detail_gamme' :
      $variables['module_title'] = $conf_modular_product->getDetailGammeModuleTitle();
      break;
    case 'module_services' :
      $variables['module_title'] = $conf_modular_product->getServicesModuleTitle();
      break;
    case 'module_customer_space' :
      $variables['module_title'] = $conf_modular_product->getCustomerSpaceModuleTitle();
      break;
    case 'module_exemples' :
      $variables['module_title'] = $conf_modular_product->getExamplesModuleTitle();
      break;
    case 'module_testimonial' :
      $variables['module_title'] = $conf_modular_product->getTestimonialModuleTitle();
      break;
    default:
      $variables['module_title'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oab_modular_product_preprocess_node(&$variables) {

  /** @var OabModularProductService $conf_modular_product */
  $conf_modular_product = \Drupal::service('oab_modular_product.settings');
  $variables['to_go_further_title'] = $conf_modular_product->getToGoFurtherTitle();
}

/*
* implement hook_token_info()
*/
function oab_modular_product_token_info() {
  $types = [];
  $tokens = [];

  $types['obs'] = array(
    'name' => t('OBS tokens'),
    'description' => t('Custom tokens')
  );

  $tokens['obs']['entity_title'] = array(
    'name' => 'entity_title',
    'description' => t("The title of the Entity")
  );

  return [
    'types' => $types,
    'tokens' => $tokens
  ];
}

/*
* implement hook_token()
*/
function oab_modular_product_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();
  if ($type == 'obs') {
    if (isset($data['entity']) && $data['entity'] instanceof EntityInterface) {
      $replacements['[obs:entity_title]'] = $data['entity']->label();
    }
  }
  return $replacements;
}

function oab_modular_product_preprocess_paragraph__module_faq(&$variables) {
  /** @var Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $token = Drupal::token();
  if (isset($paragraph->field_highlight->value)) {
    //on applique les changements des tokens
    $variables['faq_description'] = $token->replace($paragraph->field_highlight->value, array('entity' => $paragraph->getParentEntity()));
  }
}
