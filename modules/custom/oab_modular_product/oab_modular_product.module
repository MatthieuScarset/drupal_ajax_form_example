<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\oab_modular_product\Services\OabModularProductService;

/**
 * Implements hook_field_widget_form_alter().
 */
function oab_modular_product_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /*
   * Ici, on ne va gérer que les alterations du formulaire du paragraph
   */
  if (!isset($element['#paragraph_type']) ) {
    return;
  }

  /** @var OabModularProductService $conf_modular_product */
  $conf_modular_product = \Drupal::service('oab_modular_product.settings');

  $user_roles = \Drupal::currentUser()->getRoles();

  $modules = [
    'module_benefits',
    'module_3_4_colonnes',
    'module_detail_offre',
    'module_partner',
    'module_faq',
    'module_text_video_image'
  ];

  $module_items = [
    'module_benefits_item',
    'module_3_4_colonnes_items',
    'module_detail_offre_items'
  ];



  if($element['#paragraph_type'] === 'module_faq') {
    /*
   * liste des fields seulement modifiable par les admins
   * utilisé pour le module FAQ
   */
    $field_restricted = [
      'field_title',
      'field_highlight',
      'field_panel_title',
      'field_function',
      'field_visual'
    ];
    if(in_array('administrator', $user_roles)) {
      foreach ($field_restricted as $field_name) {
        if (isset($element['subform'][$field_name])) {
          $element['subform'][$field_name]['widget']['#access'] = true;
        }
        else {
          $element['subform'][$field_name]['widget']['#access'] = false;
        }
      }
    }
  }

  if (in_array($element['#paragraph_type'], $modules)) {
    if (isset($element['subform']['field_title'])) {
      $element['subform']['field_title']['widget'][0]['value']['#maxlength'] = $conf_modular_product->getModuleTitleMaxCharacter();
      $element['subform']['field_title']['widget'][0]['value']['#size'] = 75;
      $element['subform']['field_title']['widget'][0]['value']['#description'] = \Drupal\Core\Field\FieldFilteredMarkup::create($conf_modular_product->getModuleTitleMaxCharacter().' characters max');
    }

    if (isset($element['subform']['field_accroche'])) {
      $element['subform']['field_accroche']['widget'][0]['value']['#maxlength'] = $conf_modular_product->getModuleDescriptionMaxCharacter();
    }

    if (isset($element['subform']['field_highlight'])) {
      $element['subform']['field_highlight']['widget'][0]['value']['#maxlength'] = $conf_modular_product->getModuleDescriptionMaxCharacter();
      $element['subform']['field_highlight']['widget'][0]['value']['#description'] = \Drupal\Core\Field\FieldFilteredMarkup::create($conf_modular_product->getModuleDescriptionMaxCharacter().' characters max');
      $element['subform']['field_highlight']['widget'][0]['value']['#rows'] = 2;
    }
  }

  if (in_array($element['#paragraph_type'], $module_items)) {
    if (isset($element['subform']["field_icon"])) {
      $element['subform']["field_icon"][0]['token_tree'] = [
        '#theme' => 'token_tree_link',
        '#token_types' => ['icomoon'],
        '#weight' => 90,
        '#global_types' => FALSE,
        '#click_insert' => TRUE,
      ];
    }

    if (isset($element['subform']['field_title'])) {
      $element['subform']['field_title']['widget'][0]['value']['#maxlength'] = $conf_modular_product->getModuleItemsTitleMaxCharacter();
      $element['subform']['field_title']['widget'][0]['value']['#size'] = 80;
    }

    if (isset($element['subform']['field_accroche'])) {
      $element['subform']['field_accroche']['widget'][0]['value']['#maxlength'] = $conf_modular_product->getModuleItemsDescriptionMaxCharacter();
    }

    if (isset($element['subform']['field_description'])) {
      $element['subform']['field_description']['widget'][0]['value']['#maxlength'] = $conf_modular_product->getModuleItemsDescriptionMaxCharacter();
      $element['subform']['field_description']['widget'][0]['value']['#size'] = 140;
    }
  }

  if ($element['#paragraph_type'] == 'module_detail_offre_items') {
    if (isset($element['subform']['field_title'])) {
      $element['subform']['field_title']['widget'][0]['value']['#maxlength'] = 65;
    }
    if (isset($element['subform']['field_accroche'])) {
      $element['subform']['field_accroche']['widget'][0]['value']['#maxlength'] = 80;
    }
    if (isset($element['subform']['field_offres_inclus'], $element['subform']['field_offres_exclus'])) {
      $element['subform']['field_offres_inclus']['widget']['#cardinality'] = 15;
      $element['subform']['field_offres_exclus']['widget']['#cardinality'] = 15;
    }
  }

  if ($element['#paragraph_type'] == 'titre_and_description') {
    $element['subform']['field_accroche']['widget'][0]['value']['#maxlength'] = 180;
  }

  if ($element['#paragraph_type'] === 'module_step') {
    $element['subform']['field_title']['widget'][0]['value']['#maxlength'] = 30;
    $element['subform']['field_title']['widget'][0]['value']['#size'] = 35;

    $element['subform']['field_description']['widget'][0]['value']['#maxlength'] = 100;
    $element['subform']['field_description']['widget'][0]['value']['#size'] = 110;
  }


  if ($element['#paragraph_type'] == 'titre_and_description_and_link') {
    $element['subform']['field_title']['widget'][0]['value']['#maxlength'] = 100;
    $element['subform']['field_accroche']['widget'][0]['value']['#maxlength'] = 200;
  }

  if ($element['#paragraph_type'] == 'module_services') {
    if (isset($element['subform']['field_title'], $element['subform']['field_accroche'])) {
      $element['subform']['field_title']['widget'][0]['value']['#maxlength'] = 65;
      $element['subform']['field_accroche']['widget'][0]['value']['#maxlength'] = 200;
    }

    if (isset($element['subform']['field_items_services'])) {
      $element['subform']['field_items_services']['widget']['#cardinality'] = 10;
    }
  }

  if ($element['#paragraph_type'] === 'module_text_video_image') {
    $position = $element['subform']['field_visual']['#parents'][1];
    $element['subform']['field_visual']['#states'] = [
      'visible' => [
        ':input[name="field_modules['.$position.'][subform][field_media_type]"]' => ['value' => 'image'],
      ],
      'required' => [
        ':input[name="field_modules['.$position.'][subform][field_media_type]"]' => ['value' => 'image'],
      ]
    ];
    $position = $element['subform']['field_video']['#parents'][1];
    $element['subform']['field_video']['#states'] = [
      'visible' => [
        ':input[name="field_modules['.$position.'][subform][field_media_type]"]' => ['value' => 'video'],
      ],
      'required' => [
        ':input[name="field_modules['.$position.'][subform][field_media_type]"]' => ['value' => 'video'],
      ]
    ];
  }
  if ($element['#paragraph_type'] === 'module_presentation') {
    $element['subform']['field_visual']['#states'] = [
      'visible' => [
        ':input[name="field_presentation[0][subform][field_media_type]"]' => ['value' => 'image'],
      ],
      'required' => [
        ':input[name="field_presentation[0][subform][field_media_type]"]' => ['value' => 'image'],
      ]
    ];
    $element['subform']['field_video']['#states'] = [
      'visible' => [
        ':input[name="field_presentation[0][subform][field_media_type]"]' => ['value' => 'video'],
      ],
      'required' => [
        ':input[name="field_presentation[0][subform][field_media_type]"]' => ['value' => 'video'],
      ]
    ];
  }
}

/**
 * Implements hook_form_alter().
 */
function oab_modular_product_form_node_modular_product_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (in_array($form_id, array('node_modular_product_form', 'node_modular_product_edit_form'))) {
    /** @var \Drupal\oab_modular_product\Services\OabModularProductService $conf_modular_product */
    $conf_modular_product = \Drupal::service('oab_modular_product.settings');

    if (isset($form['field_product_name'])) {
      $form['field_product_name']['widget'][0]['value']['#maxlength'] = $conf_modular_product->getTopZoneTitleMaxCharacter();
    }

    if (isset($form['field_teaser'])) {
      $form['field_teaser']['widget'][0]['value']['#maxlength'] = $conf_modular_product->getTopZoneDescriptionMaxCharacter();
    }

    if (isset($form["field_enable_wysiwyg_paragraph"])) {
      //On rend la case à cocher Enable Wysywyg paragraph accessible uniquement pour les admins
      if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
        $form['field_enable_wysiwyg_paragraph']['#disabled'] = TRUE;
      }
      //on vérifie si le paragraph WYSIWYG est activé ou non => s'il ne l'est pas on le supprime des options disponibles pour les modules
      if(isset($form["field_enable_wysiwyg_paragraph"]['widget']['value']["#default_value"]) &&
        $form["field_enable_wysiwyg_paragraph"]['widget']['value']["#default_value"] === false &&
        isset($form["field_modules"]["widget"]["add_more"]['add_more_button_paragraph_wysiwyg'])) {
        //le paragraph WYSIWYG n'est pas actif, on le supprime des choix pour les modules
        $form["field_modules"]["widget"]["add_more"]['add_more_button_paragraph_wysiwyg']['#access'] = false;
      }
    }


  }

}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function oab_modular_product_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() === "paragraph" && $bundle === "module_steps") {
    $fields['field_step']->addConstraint('ModularProductMinSteps');
  }
}



/**
 * Implements hook_preprocess_HOOK().
 */
function oab_modular_product_preprocess_field(&$variables) {

  if ($variables['field_name'] !== "field_link_button"
    || $variables['entity_type'] !== "paragraph") {
    return;
  }

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['element']['#object'];

  if (isset($paragraph->field_call_to_action_type)) {
    $variables['link_type'] = $paragraph->field_call_to_action_type->value;

    if ($paragraph->field_call_to_action_type->value === "lien") {
      /** @var \Drupal\Core\Field\FieldItemListInterface $field_link_button */
      $field_link_button = $paragraph->field_link_button;

      /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $link_item */
      $link_item =$field_link_button->first();

      if ($link_item->isExternal()) {
        $variables['attributes']['class'][] = 'icon-Redo';
      }
      else {
        $variables['attributes']['class'][] = 'o-link-arrow';
      }
    }
    else {
      $variables['attributes']['class'][] = 'btn btn-primary';
    }
  }
}

function changeUrlToEmbedUrl($url) {

  $embed_url = '';
  // full youtube url
  if (str_contains($url, 'youtube')) {
    $videoId = getVideoId($url, "?v=", 3);
    if (str_contains($videoId, '&list=')) {
      $lastId = getVideoId($videoId, "&list=", 6);
      $embed_url = 'https://www.youtube.com/embed/' . $videoId ;//. '?list=' . $lastId . '&autoplay=' . $autoplay;
    }
    $embed_url = 'https://www.youtube.com/embed/' . $videoId;// . '?autoplay=' . $autoplay;
  }
  // tiny youtube url
  if (str_contains($url, 'youtu.be')) {
    $videoId = getId($url);
    // if this is a playlist
    if (str_contains($videoId, '&list=')) {
      $lastId = getId($videoId, "&list=", 6);
      $embed_url = 'https://www.youtube.com/embed/' . $videoId;// . '?list=' . $lastId . '&autoplay=' . $autoplay;
    }
    $embed_url = 'https://www.youtube.com/embed/' . $videoId ;//. '?autoplay=' . $autoplay;
  }
  return $embed_url;
}

// Return video ID from URL
function getVideoId( $url, $separator = "/", $index = 1) {
  //  return $url.substring($url.lastIndexOf($separator) + $index, $url.length);
  return substr($url, strrpos($url, $separator)+$index, strlen($url));
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function oab_modular_product_media_view_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if($entity->bundle() == "embed_video"){
    $url = $entity->field_video_url?->uri;
    $build['embed_url_youtube'] = changeUrlToEmbedUrl($url);
 }
}
