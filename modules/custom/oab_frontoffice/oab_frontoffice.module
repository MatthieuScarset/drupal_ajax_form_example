<?php

use Drupal\Core\File\FileUrlGenerator;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Menu\MenuLinkInterface;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\node\NodeInterface;
use Drupal\oab_dvi\DviHelper;
use Drupal\oab_frontoffice\Services\NodeCallback;
use Knp\Snappy\Pdf;
use Symfony\Component\HttpFoundation\RedirectResponse;

// Regroupement de fonctions qui n'étaient pas des hooks dans un fichier à part pour ne laisser que les hooks dans ce fichier
\Drupal::moduleHandler()->loadInclude('oab_frontoffice', 'inc', 'includes/helpers');

// Regroupement des METHODES POUR LES CARTES D'OFFICES QUI DOIVENT ETRE ACCESSIBLES PARTOUT (multi-JIRA)
\Drupal::moduleHandler()->loadInclude( 'oab_frontoffice', 'inc', 'includes/office_map');

// Mise dans un fichier a part des filtres des subhomes
\Drupal::moduleHandler()->loadInclude( 'oab_frontoffice', 'inc', 'includes/subhomes_views_exposed_form');

// Mise dans un fichier a part des filtres de la view business-insight
\Drupal::moduleHandler()->loadInclude( 'oab_frontoffice', 'inc', 'includes/vb_views_exposed_form');

function oab_frontoffice_preprocess_menu(&$variables) {
    if (isset($variables['items'])
        && is_array($variables['items'])) {
        foreach ($variables['items'] as &$item) {
            $menu_link_entity = oab_frontoffice_load_link_entity_by_link($item['original_link']);
            if (!empty($menu_link_entity)) {
                if (!empty($menu_link_entity->link->first()->options['target'])) {
                    $item['url']->setOption('target', $menu_link_entity->link->first()->options['target']);
                }
            }
        }
    }
}


/**
 * Préparation du JS pour la génération des liens "Shares"
 * @param $variables
 */
function oab_frontoffice_preprocess_node(&$variables) {

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node->bundle() === 'mss_article') {
    $html = new \DOMDocument();
    $render = \Drupal::service('renderer');
    dd($render);
  }


  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['langcode'] = $current_language;

  if (isset($variables["elements"]["#contextual_links"]["node"]["route_parameters"]["node"])) {

    ##Collecte de toutes les données nécessaires

    #Je recupère le nid puis je charge le node associé
    $nid = $variables["elements"]["#contextual_links"]["node"]["route_parameters"]["node"];
    $node = \Drupal\node\Entity\Node::load($nid);

    if (is_null($node) || $node === false) {
      return;
    }

    $meta_description = "";
    ##Je recupère le field_meta_description s'il existe
    if ($node->hasField('field_meta_decription')) {
      $meta_description = $node->get('field_meta_description')->getValue();
    }

    $node_title = isset($variables["label"][0]["#context"]["value"]) ? $variables["label"][0]["#context"]["value"] : '';

    $og_image = $file = "";
    if ($node->hasField('field_visual')) {
      $file = $node->get('field_visual')->getValue();
      if (!empty($file[0]['target_id']) && $file[0]['target_id'] != null) {
        $file = \Drupal\file\Entity\File::load($file[0]['target_id']);
        if ($file instanceof \Drupal\file\Entity\File) {
          $og_image = $file->createFileUrl();
        }
      }
    }

    #J'enregistre mes urls et variables OG pour les avoir en JS
    $variables['#attached']['drupalSettings']['shareSettings'] = getSocialBarParameters($node_title, $meta_description, $og_image);
  }

}

function oab_frontoffice_load_link_entity_by_link(MenuLinkInterface $menu_link_content_plugin) {
    $entity = NULL;
    if ($menu_link_content_plugin instanceof Drupal\menu_link_content\Plugin\Menu\MenuLinkContent) {
        [$entity_type, $uuid] = explode(':', $menu_link_content_plugin->getPluginId(), 2);

        /** @var Drupal\Core\Entity\EntityRepository $service */
        $service = Drupal::service('entity.repository');
        $entity = $service->loadEntityByUuid($entity_type, $uuid);
    }
    return $entity;
}

function oab_frontoffice_link_alter(&$variables) {
    $languages = \Drupal::languageManager()->getLanguages();

    if (isset($variables['url'])) {
        try {
            $uri = $variables['url']->getUri();

            foreach ($languages AS $key => $value) {
                $langcode = $value->getId();

                if ($uri === 'base:<front_' . $langcode . '>') {
                    $new_url = \Drupal\Core\Url::fromRoute('<front>', array(), array());
                    $variables['options']['language'] = $value;
                    $variables['url'] = $new_url;
                }
            }
        }
        catch (\UnexpectedValueException $e) {

        }
    }
}


/**
 * Implements hook_entity_view_alter().
 * @param array $build
 * @param EntityInterface $entity
 * @param EntityViewDisplayInterface $display
 */
function oab_frontoffice_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
    // Cheking view_mode for node.
    if ($entity->getEntityType()->id() == 'node') {
        if (!empty($build['#attached']['html_head_link'])) {
            _remove_header_links($build);
        }
    }
}

function _remove_header_links(array &$attachments) {
    // Cheking html_head on attached tags in head.
    if (!isset($attachments['#attached']['html_head_link'])) {
        return;
    }

    // Array to unset.
    $unset_html_head_link = [
        'shortlink',
        'delete-form',
        'edit-form',
        'version-history',
        'revision',
        'display',
        'drupal:content-translation-overview',
        'drupal:content-translation-add',
        'drupal:content-translation-edit',
        'drupal:content-translation-delete',
    ];
    // Unset loop.
    foreach ($attachments['#attached']['html_head_link'] as $key => $value) {
        if (isset($value[0]['rel']) && in_array($value[0]['rel'], $unset_html_head_link)) {
            unset($attachments['#attached']['html_head_link'][$key]);
        }
    }
}

function oab_frontoffice_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

    if ($entity->bundle() == 'product') {
        //  on deserialise les données à passer au template
        $field_axiome_data = isset($entity->field_axiome_data->value) ? unserialize($entity->field_axiome_data->value) : array();
        if (is_countable($field_axiome_data) && count($field_axiome_data) > 0) {
            $build['axiome_data'] = $field_axiome_data;
            $build['axiome_data']['sous_famille'] = \Drupal\oab_axiome\Controller\OabAxiomeController::getSousFamille($entity->id());
        }
    }

  if ($build['#view_mode'] == 'full') {
        $content_type = $entity->bundle();
        if (in_array($content_type, array('magazine', 'blog_post', 'document', 'simple_page', 'full_html'))) { //, 'external_content'
            $theme_term = '';

            $field_solution = isset($entity->field_solution) ? $entity->field_solution->getValue() : array();
            $field_industry = isset($entity->field_industry) ? $entity->field_industry->getValue() : array();
            $field_insight = isset($entity->field_insight) ? $entity->field_insight->getValue() : array();

            $field_blog_thematic = isset($entity->field_blog_thematic) ? $entity->field_blog_thematic->getValue() : array();
            $field_document_thematic = isset($entity->field_document_thematic) ? $entity->field_document_thematic->getValue() : array();
            $field_magazine_thematic = isset($entity->field_magazine_thematic) ? $entity->field_magazine_thematic->getValue() : array();

            if (!empty($field_insight)) {
                $theme_term = $field_insight[0]['target_id'];
            } elseif (!empty($field_blog_thematic)) {
                $theme_term = $field_blog_thematic[0]['target_id'];
            } elseif (!empty($field_document_thematic)) {
                $theme_term = $field_document_thematic[0]['target_id'];
            } elseif (!empty($field_magazine_thematic)) {
                $theme_term = $field_magazine_thematic[0]['target_id'];
            } elseif (!empty($field_industry)) {
                $theme_term = $field_industry[0]['target_id'];
            } elseif (!empty($field_solution)) {
                $theme_term = $field_solution[0]['target_id'];
            }

            if ($theme_term != '') {
                $term = \Drupal\taxonomy\Entity\Term::load($theme_term);
                if (isset($term)) {
                    $build['theme_term'] = array(
                        '#markup' => $term->getName(),
                        'id' => $term->id(),
                    );
                }
            }
        }

        if ($content_type == 'homepage_eclairage') {

            $menu_tree = \Drupal::menuTree();
            $menu_name = 'menu-homepage-eclairage';

            // Build the typical default set of menu tree parameters.
            $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

            // Load the tree based on this set of parameters.
            $tree = $menu_tree->load($menu_name, $parameters);

            // Finally, build a renderable array from the transformed tree.
            $menu = $menu_tree->build($tree);

            $menu_html = \Drupal::service('renderer')->render($menu);
            $build['menu_homepage_eclairage'] = $menu;


            //first paragraph
            $first_paragraph = $entity->field_home_banner[0]->entity;
            // Access the paragraph entity like this:

            $build['firstbanner_homepage_eclairage'] = $first_paragraph->get('field_title')->getValue();


            $taxonomy_id = $entity->field_home_playlists[0]->entity->get('field_playlist_taxonomy_term')->getValue() ;//[0]['target_id'];

            $build['taxonomy'][count($build['taxonomy'])] = $taxonomy_id;
        }

        if ($content_type === 'external_content' && isset($entity->field_url->uri)) {
            $response = new RedirectResponse($entity->field_url->uri, 301);
            $response->headers->set('robots', 'noindex,follow');
            $response->send();
        }
    }

    //ajout du cache context url pour les press releases en vue subhome
    if($entity->bundle() =='press_release' && $build['#view_mode'] == 'subhome'){
      $build['#cache']['contexts'][] = 'url';
    }

//    if ($entity->bundle() === 'mss_article') {
//      /** @var \Drupal\Core\File\FileSystemInterface $file_system */
//      $file_system = Drupal::service('file_system');
//      if (file_exists(DRUPAL_ROOT . '/vendor/h4cc/wkhtmltopdf-amd64/bin/wkhtmltopdf-amd64')) {
//
//      /** @var  $file_url_generator FileUrlGenerator */
//     $file_url_generator = \Drupal::service('file_url_generator');
//      $render_array = Drupal::entityTypeManager()->getViewBuilder($entity->getEntityTypeId())->view($entity);
//      $snappy = new Pdf(DRUPAL_ROOT . '/vendor/h4cc/wkhtmltopdf-amd64/bin/wkhtmltopdf-amd64');
//      /** @var \Drupal\Core\Render\Renderer $renderer */
//      $renderer = Drupal::service('renderer');
//
//      $snappy->generateFromHtml($renderer->renderPlain($render_array), $file_system->realpath('public://pdf_export'));
//      }
//    }
//
//  if ($entity->bundle() === 'mss_article') {
//
//  }

}


/**
 * Implements hook_views_query_alter().
 */
function oab_frontoffice_views_query_alter(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {

    ## CARTE
    if ($view->id() == 'offices_map_view') {
        $language = \Drupal::languageManager()->getCurrentLanguage();
        $language_id = $language->getId();

        // Modification du trie sur les maps qui ne sont pas sur une page "ru"
        // On enlève le "order by sticky" dans ce cas là
        // On doit faire ça à cause du fonctionnement de la view et des traductions
        // le sticky doit être enregistré au niveau du contenu principal, pas dans ses traductions
        if (isset($query->orderby)
            && !empty($query->orderby)) {
            foreach ($query->orderby AS $key => $value) {
                if (is_array($value)
                    && isset($value['field'])
                    && $value['field'] == "node_field_data_sticky"
                    && $language_id != "ru") {
                    unset($query->orderby[$key]);
                }
            }
        }
    }

}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function oab_frontoffice_form_views_exposed_form_alter(&$form, FormStateInterface &$form_state) {
    $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();


    // Gestion des formulaires spécifiques aux subhomes via une fonction pour ne pas surcharger ici
    subhomes_views_exposed_form($form);

    // Gestion des formulaires spécifiques à la vb via une fonction pour ne pas surcharger ici
    vb_views_exposed_form($form);


    // view Page thématique
    if ($form['#id'] == 'views-exposed-form-page-thematique-block-1') {
        $insight = clean_exposed_filters_by_language(
            $form['vb_thematic']['#options'],
            'Insight'
        );
        $form['vb_thematic']['#options'] = $insight;

        $profession = clean_exposed_filters_by_language(
            $form['field_job_profile_target_id']['#options'],
            'Profession'
        );
        $form['field_job_profile_target_id']['#options'] = $profession;

        $industry = clean_exposed_filters_by_language(
            $form['field_industry_target_id']['#options'],
            'Industry'
        );
        $form['field_industry_target_id']['#options'] = $industry;

        $region = clean_exposed_filters_by_language(
            $form['field_region_target_id']['#options'],
            'Geography'
        );
        $form['field_region_target_id']['#options'] = $region;

        if ($current_language != 'en') {
            $form['field_region_target_id']['#access'] = false;
        }
    }

    if ($form['#id'] == 'views-exposed-form-business-insight-business-insight-page') {
        //$form['field_solution_target_id']['#options']['All'] = 'Solutions';

        $form['vb_thematic']['#options'] = clean_exposed_filters_by_language(
            $form['vb_thematic']['#options'], 'All thematics'
        );

      /**
       * reorder_element_header_menu_page_vb($form)
       */
      $menu_header_page_vb = clean_exposed_filters_by_language(
        $form['field_insight_type_target_id']['#options'], 'See all'
      );
      if ( isset($menu_header_page_vb['All'])) {
        $v = $menu_header_page_vb['All'];
        unset($menu_header_page_vb['All']);
        $menu_header_page_vb['All'] = $v;
        $form['field_insight_type_target_id']['#options'] = $menu_header_page_vb;
      } else {
        $form['field_insight_type_target_id']['#options'] = $menu_header_page_vb;
      }

        if (isset($form['field_insight_type_target_id']['#type'])
            && $form['field_insight_type_target_id']['#type'] == "select") {
            $form['field_insight_type_target_id']['#type'] = "radios";
        }
    }

    //BVPN
    //formulaire de recherche de la carte BVPN Gallerie
    if ($form['#id'] == 'views-exposed-form-bvpn-gallery-csp-map-page') {

      //on filtre les termes de taxo par langue
      $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::load('location');
      if (is_object($vocabulary)) {
        $properties = array(
          "vid" => 'location',
        );
        $lancode = \Drupal::languageManager()->getCurrentLanguage()->getId();
        if ($lancode != 'fr') {
          $lancode = 'en'; //carte dispo qu'en fr ou en // si on tente en ru, on mettra les terme de en
        }
        $properties["langcode"] = $lancode;
        $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties($properties);

        if (is_array($terms)
          && !empty($terms)) {
          $options = array('All' => t('Region'));
          foreach ($terms AS $tid => $term) {
            $options[$tid] = $term->getName();
          }
          $form['location']['#options'] = $options;
        }
      }
/*
      $form['actions']['reset'] =array(
        '#value' => "Clear",
        '#type' => "submit",
        '#access' => true,
        '#attributes' => array(
          'class' => array('btn_clear_filter_search_map'),
          'disabled'=>'disabled'),
      );

      //si c'est une recherche d'une région on active le bouteau clear
      $input = $form_state->getUserInput();
      $currentLocation = $input['location'];
      if ($currentLocation != 'All') {
        unset($form['actions']['reset']['#attributes']['disabled']);
      }
*/

      $form['actions']['submit']['#value'] = t('Filter');
      $form['actions']['submit']['#attributes'] = array(
        'data-twig-suggestion' => 'form-bvpn-gallery-csp-map-page',
        'class' => array(
          'btn_submit_filter_search_map', 'btn-info'
        )
      );
    }
    if ($form['#id'] == 'views-exposed-form-bvpn-gallery-csp-list-block') {

        //on cache le champ location qui est déjà présent avec la MAP
        $form['title']['#attributes']['placeholder'] = t('CSP Name');
        $form['location']['#type'] = 'hidden';
        $form['actions']['submit']['#attributes']= array(
          'data-twig-suggestion' => 'form-bvpn-gallery-csp-list-block',
          'class' => array('search-icon', 'csp-list-map-search')
        );
    }

    if ($form['#id'] == 'views-exposed-form-bvpn-gallery-csp-list-page' ) {
      foreach ($form AS $key => $value) {
        if (isset($value['#type'])
          && $key !== 'title'
          && $value['#type'] == "textfield") {
          $form[$key] = change_textfield_to_select($key);
        }
      }
      $form['actions']['submit']['#attributes'] = array(
        'class' => array(
          'btn-info',
          'btn_submit_filter_search_list_csp'
        )
      );
      if (isset($form['actions']['reset']['#access'])) {
        $form['actions']['reset'] = array(
          '#value' => "Clear",
          '#type' => "submit",
          '#access' => true,
          '#attributes' => array(
            'class' => array('btn_clear_filter_list_csp'),
            'disabled' => 'disabled'),
        );
      }
    }

}


function oab_frontoffice_views_post_render($view) {
    if ($view->id() !== 'VIEW_ID' && $view->getDisplay()->getPluginId() !== 'page') {
        return;
    }
    $request = \Drupal::request();

    if ($view->id() == 'subhomes') {
        if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
            // on recupere les valeurs dans oab_subhomes.subhomes
            $data =\Drupal::config('oab_subhomes.subhomes');
            if ($data !== null) {
                switch ($view->current_display) {
                    case 'page_press':
                        $route->setDefault('_title', $data->get('press_meta'));
                        $view->setTitle($data->get('press_meta'));
                        break;
                    case 'page_partners':
                        $route->setDefault('_title', $data->get('partner_meta'));
                        $view->setTitle($data->get('partner_meta'));
                        break;
                    case 'page_customer':
                        $route->setDefault('_title', $data->get('customer_meta'));
                        $view->setTitle($data->get('customer_meta'));
                        break;
                    case 'page_document':
                        $route->setDefault('_title', $data->get('library_meta'));
                        $view->setTitle($data->get('library_meta'));
                        break;
                    case 'page_blog':
                        $route->setDefault('_title', $data->get('blog_meta'));
                        $view->setTitle($data->get('blog_meta'));
                        break;
                    case 'page_magazine':
                        $route->setDefault('_title', $data->get('magazine_meta'));
                        $view->setTitle($data->get('magazine_meta'));
                        break;
                    case 'page_catalogue':
                        $route->setDefault('_title', $data->get('product_meta'));
                        $view->setTitle($data->get('product_meta'));
                        break;
                }
            }
        }
    }
}

function oab_frontoffice_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
    if ($route_match && $node = $route_match->getParameter('node')) {
        $breadcrumb->addCacheableDependency($node);
    }
}

/**
 * Suppression du cache pour les produits DVI lorsqu'on veut l'affichage subhome
 * pour pouvoir changer l'URL. Si on ne le fait pas, le changement de view_mode par
 * la fonction "theme_boosted_preprocess_views_view" ne fonctionne pas, car c'est caché
 * @param array $build
 * @param \Drupal\node\Entity\Node $entity
 * @param $view_mode
 */
function oab_frontoffice_node_build_defaults_alter(array &$build, \Drupal\node\Entity\Node $entity, $view_mode) {
    if ($entity->bundle() == "product"
        && DviHelper::isDVIProduct($entity)
        && ($view_mode == "subhome" || $view_mode == "subhome_distributeur")) {
        $build["#cache"] = array();

    }
}


/**
 * Implements hook_theme().
 */
function oab_frontoffice_theme($existing, $type, $theme, $path) {
    $theme = array();
    $theme['custom-righticonblock'] = array(
        'variables' => array(
            'synomiaSearchForm' => array(),
        ),
        'template' => 'block--righticonblock-custom'
    );

    $theme['subhome_select'] = [
       'render element' => 'element'
    ];
    $theme['subhome_select_button'] = [
      'render element' => 'element'
    ];
    return $theme;
}

function oab_frontoffice_preprocess_subhome_select_button(&$variables) {
  $element = $variables['element'];
  $variables['attributes'] = [];
  if (isset($element['#id'])) {
    $variables['attributes']['id'] = $element['#id'];
  }
  if (isset($element['#attributes']['title'])) {
    $variables['attributes']['title'] = $element['#attributes']['title'];
  }
  $variables['children'] = $element['#children'];
}


function oab_frontoffice_mail_alter(&$message) {
    for ($i = 0; $i < count($message["body"]); $i++) {
        $message["body"][$i] = str_replace("http://", "https://", $message["body"][$i]);
    }
}

function oab_frontoffice_form_webform_submission_dvi_contact_distributor_add_form_alter($form, $form_state) {
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type'])
      && $form['actions'][$action]['#type'] === 'submit'
      && is_array($form['actions'][$action]['#submit'])
    ) {
      array_unshift($form['actions'][$action]['#submit'], 'oab_frontoffice_dvi_contact_distributor_form_submit');
    }
  }
}

function oab_frontoffice_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    if (isset($form['#id']) && $form['#id'] == "views-exposed-form-subhomes") {
      subhomes_views_exposed_form($form);

    }
}

function oab_frontoffice_dvi_contact_distributor_form_submit(array $form, Drupal\Core\Form\FormState &$form_state) {

    $node = \Drupal::routeMatch()->getParameter('node');
    if (NULL !== $node && $node instanceof NodeInterface) {
        if ($node->bundle() == 'distributor') {
            $field_distrib_email = $node->get('field_email_address');

            $distrib_mail = "";
            if (isset($field_distrib_email[0])) {
                $value = $field_distrib_email[0]->getValue();
                $distrib_mail = $value['value'];
            }

            $form_state->setValue('distributeur_email', $distrib_mail);
            $form_state->setValue('distributeur_name', $node->getTitle());
            $form_state->setValue('distributeur_nid', $node->id());
        }

    }

}

/**
 * Modification des metatags pour rediriger les contenus 'homepage" vers la home du site, et pas le noeud "homepage"
 *
 * @param array $attachments
 */
function oab_frontoffice_page_attachments_alter(array &$attachments) {

    $node = \Drupal::routeMatch()->getParameter('node');
    if (NULL !== $node && $node instanceof NodeInterface) {
        if ($node->bundle() == 'homepage') {
            if (isset($attachments["#attached"]['html_head_link'])) {
                $attachments["#attached"]['html_head_link'] = __seek_alternate($attachments["#attached"]['html_head_link']);
            }
        }
    }

    // Remove Generator meta tag
    foreach ($attachments['#attached']['html_head'] as $key => $attachment) {
      if ($attachment[1] == 'system_meta_generator') {
        unset($attachments['#attached']['html_head'][$key]);
      }
    }

    // Pour BVPN gallery
    // on charge les infos de geolocalisation des termes de taxo Location pour pouvoir faire le zoom sur la bonne région en JS
    $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $routeName = \Drupal::routeMatch()->getRouteName();
    if ($routeName == 'view.bvpn_gallery.csp_map_page') {
      $locationsArray = array();
      $query = \Drupal::entityQuery('taxonomy_term');
      $query->condition('vid', "location");
      $query->condition('langcode', $current_language);
      $tids = $query->execute();
      $termsLocation = \Drupal\taxonomy\Entity\Term::loadMultiple($tids);
      foreach ($termsLocation as $term) {
        $location = array();
        $location['tid'] = $term->tid->value;
        $location['name'] = $term->name->value;
        if ( isset($term->field_location) && !empty($term->field_location)) {
          $location['lat'] = (isset($term->field_location->lat) && !empty($term->field_location->lat)) ? $term->field_location->lat : '0.0';
          $location['lng'] = (isset($term->field_location->lng) && !empty($term->field_location->lng)) ? $term->field_location->lng : '0.0';
        }
        $locationsArray[$term->tid->value] = $location;
      }
      $attachments["#attached"]['drupalSettings']['listRegionMarkers'] = $locationsArray;
    }

}

/**
 * Petite fonction recursive pour trouver l'element cherché dans la fonction précédente
 * (C'est un tableau avec des sous tableaux, c'etait plus simple à faire en recursif)
 * @param $tab
 * @return array
 */
function __seek_alternate($tab) {
    if (isset($tab['rel']) && $tab['rel'] == "alternate") {
        $tab['href'] = Url::fromRoute('<front>')->toString();
    } elseif (is_array($tab)) {
        foreach ($tab as $key => $value) {
            $tab[$key] = __seek_alternate($value);
        }
    }

    return $tab;
}


function change_textfield_to_select($vid, $default_langcode = true) {
  $ret = [];

  $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::load($vid);
  if (is_object($vocabulary)) {

    $properties = [
      "vid" => $vid,
    ];

    if ($default_langcode) {
      $properties["langcode"] = \Drupal::languageManager()->getCurrentLanguage()->getId();
    }

    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties($properties);
    if (is_array($terms)
      && !empty($terms)) {
      $options = array('All' => t($vocabulary->get('name')));
      foreach ($terms AS $term) {
        $term_name = $term->getName();
        $options[$term_name] = $term_name;
      }
      $ret['#type'] = "select";
      $ret['#options'] = $options;
      $ret['#default_value'] = 'All';
      $ret['#validated'] = TRUE;
      $ret['#size'] = null;
    } else {
      $ret = null;
    }
  }

  return $ret;
}


function oab_frontoffice_preprocess_html(&$variables) {
  /** @var FileUrlGenerator $service_file_url_generator */
  $service_file_url_generator = \Drupal::service('file_url_generator');


  $node = \Drupal::routeMatch()->getParameter('node');
  if (NULL !== $node && $node instanceof NodeInterface) {

    if ($node->bundle() == 'homepage' && $node->hasField('field_caroussel_header')) {

        foreach ($node->field_caroussel_header as $field_carousel) {
          // Load first item of carrousel
          if (isset($field_carousel->entity->field_background->target_id)) {
            $media = Media::load($field_carousel->entity->field_background->target_id);
            if ($media !== null && isset($media->field_image->entity)) {
              $file_uri = $service_file_url_generator->generateString($media->field_image->entity->getFileUri());
              $variables['carousel_bg'][$media->id()] = $file_uri;
            }
          }
        }

        if (isset($variables['carousel_bg'])) {
          $variables['attributes']['class'][] = "oab_background_image";
        }
    }
  }
  elseif (\Drupal::routeMatch()->getParameters()->has('view_id') && \Drupal::routeMatch()->getParameter('view_id') === "category_page") {
    if (\Drupal::routeMatch()->getParameters()->has('tid')) {
      /** @var \Drupal\views\Plugin\views\argument\NumericArgument $argument */
      $tid = \Drupal::routeMatch()->getParameters()->get('tid');
      if (null !== ($term = \Drupal\taxonomy\Entity\Term::load($tid))) {
        $request = \Drupal::request();
        if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
          $route->setDefault('_title', $term->getName());
          $variables['head_title'] = $term->getName();
        }
      }
    }
  }

  //Vérifier si le cookie drupal_oab_cookie-compliance_hide-message existe si oui le supprimer
  $cookies_compliance = 'drupal_oab_cookie-compliance_hide-message';

  if (\Drupal::request()->cookies->has($cookies_compliance)) {
    setcookie($cookies_compliance, '', -1);
  }
}
