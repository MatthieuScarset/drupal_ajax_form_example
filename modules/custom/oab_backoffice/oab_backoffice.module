<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Extension\ExtensionPathResolver;
use Drupal\Core\Form\FormStateInterface;
use Drupal\editor\Entity\Editor;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\image\Entity\ImageStyle;
use Drupal\oab_backoffice\Form\OabSettingsWebformCustomTemplateForm;
use Drupal\oab_dvi\DviHelper;
use Drupal\workbench_moderation\Entity\ModerationState;

//include_once 'includes/mediatheque.inc';
define('CONTENT_TAXO_FIELDS', serialize(array('field_region',
    'field_job_profile',
    'field_market_segment',
    'field_industry',
    'field_solution',
    'field_partner_type',
    'field_document_type',
    'field_sub_family',
    'field_subhome')));


// Regroupement de toutes les fonctions spécifiques à GDPR pour éviter de surcharger le fichier
//include_once 'includes/gdpr.inc';
\Drupal::moduleHandler()->loadInclude( 'oab_backoffice', 'inc','includes/gdpr');

// Fichier pour le hook_form_alter qui commencait à prendre trop de place
\Drupal::moduleHandler()->loadInclude( 'oab_backoffice', 'inc','includes/form_alter');

// Mise dans un fichier a part les variables dynamique pour la construction du formulaire Marketo
\Drupal::moduleHandler()->loadInclude('oab_backoffice', 'inc',  'includes/marketo');


function oab_backoffice_mail( $key , &$message , $params ) {
    gdpr_hook_mail($key, $message, $params);
}


function oab_backoffice_node_access(Drupal\node\Entity\Node $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  $ret = gdpr_hook_node_acces($entity, $operation, $account);
  return $ret;
}

/**
 * Gestion des droits d'accès à un webform
 */
function oab_backoffice_webform_access(Drupal\webform\Entity\Webform $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
    $ret = gdpr_is_webform_authorized($entity, $operation, $account);
    return $ret;
}


function oab_backoffice_webform_submission_access(Drupal\webform\Entity\WebformSubmission $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
    $ret = gdpr_is_webform_submission_authorized($entity, $operation, $account);
    return $ret;
}


/*
* implement hook_token_info()
*/
function oab_backoffice_token_info() {
    $types = [];
    $tokens = [];

   $gdpr_tokens = gdpr_hook_token_info();
   $types['gdpr'] = $gdpr_tokens['types'];
   $tokens['gdpr'] = $gdpr_tokens['tokens'];

    return array(
        'types' => $types,
        'tokens' => $tokens
    );
}

/*
* implement hook_token()
*/
function oab_backoffice_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
    $replacements = array();

    gdpr_hook_tokens($replacements, $type, $tokens, $data);

    return $replacements;
}

/*
 * implement hook_webform_insert()
 */
function oab_backoffice_webform_insert(Drupal\webform\Entity\Webform $entity) {
    gdpr_hook_webform_insert($entity);
}


/**
 * Implements hook_form_alter().
 */
function oab_backoffice_form_alter(&$form, FormStateInterface $form_state, $form_id) {


    // Gestion des formulaires pour la GDPR
    gdpr_hook_form_alter($form, $form_state, $form_id);

    // Deplacement de la fonction dans une fichier .include spécifique pour ne pas surcharger ce fichier
    _in_hook_form_alter($form, $form_state, $form_id);


    //oabt($form['field_visual']['widget']['entity_browser']['#process'], true);
    //kint($form['field_visual_wrapper'], $form['field_visual']); die();

    if ($form === "webform_handler_form" || strpos($form_id, 'webform_handler_form') !== false) {

        // Petit changement pour mettre mon option avant les elements
        $b = $form["settings"]['message']['body']['#options']['Elements'];
        unset($form["settings"]['message']['body']['#options']['Elements']);
        $form["settings"]['message']['body']['#options']['_html_obs_template'] = "HTML OBS template";
        $form["settings"]['message']['body']['#options']['Elements'] = $b;

        $email_template = \Drupal::config(OabSettingsWebformCustomTemplateForm::getConfigName())->get(OabSettingsWebformCustomTemplateForm::CUSTOM_TEMPLATE);

        $custom_html_oab = [
            '#type' => "webform_html_editor",
            '#format' => "",
            '#title' => "HTML OBS template",
            '#title_display' => "hidden",
            '#parents' => [
                'settings',
                'body_custom_oab_template'
            ],
            '#default_value' => isset($email_template['value']) ? $email_template['value'] : "",
            '#states' => [
                'visible' => [
                    ':input[name="settings[body]"]' => ['value' => '_html_obs_template'],
                    ':input[name="settings[html]"]' => ['checked' => true]
                ],
                'required' => [
                    ':input[name="settings[body]"]' => ['value' => '_html_obs_template'],
                    ':input[name="settings[html]"]' => ['checked' => true]
                ]
            ],
            '#element_validate' => [['Drupal\webform\WebformTokenManager', 'validateElement']],
            '#token_types' => [
                'webform',
                'webform_submission',
                'site',
                'date'
            ]
        ];

        $form["settings"]['message']['body_custom_oab_template'] = $custom_html_oab;
    }

}

/**
 * Implements hook_field_widget_form_alter().
 */
function oab_backoffice_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  if (isset($element['#paragraph_type']) && $element['#paragraph_type'] === 'contact_button_item') {

    $element['subform']['phone_number'] = [
      '#type' => 'fieldset',
      '#title' => t('Phone Number'),
      '#states' =>  [
        'visible' => [
          ':input[name="field_card[' . $element['subform']['#parents'][1]  . '][subform][field_cb_item_type][value]"]' => ['checked' => TRUE],
        ]
      ],
      '#weight' => 500,
      'field_cb_item_phone_desc' => $element['subform']['field_cb_item_phone_desc'],
      'field_cb_item_phone_nb' => $element['subform']['field_cb_item_phone_nb']
    ];

    unset($element['subform']['field_cb_item_phone_desc']);
    unset($element['subform']['field_cb_item_phone_nb']);
  }
}

function oab_backoffice_form_user_pass_alter(&$form) {
    $form['#validate'][] = '_oab_backoffice_form_user_pass_form_validate';
}

function oab_backoffice_entity_update(EntityInterface $entity) {

    gdpr_hook_entity_update($entity);

    /** @var \Drupal\file\Entity\File $entity */
    if ($entity instanceof Drupal\file\Entity\File) {
        $image = \Drupal::service('image.factory')->get($entity->getFileUri());
        /** @var \Drupal\Core\Image\Image $image */
        if ($image->isValid()) {
            $image_uri = $entity->getFileUri();
            // on vide les caches en BDD (pas trouvé mieux pour la top zone)
            $connection = Database::getConnection();
            $connection->delete('cache_render')->condition('cid', '%topzone%', 'LIKE')->execute();
            // on regénère les styles
            $styles = ImageStyle::loadMultiple();
            /** @var \Drupal\image\Entity\ImageStyle $style */
            $tab_refresh = array(
                'file_entity_browser_thumbnail',
                'homepage_expertise',
                'homepage_solution_banner',
                'homepage_news',
                'homepage_top_zone',
                'large',
                'medium',
                'subhome',
                'thumbnail',
                'top_zone',
                'top_zone_big'
                );
            foreach ($styles as $style) {
                if (in_array($style->id(), $tab_refresh)) {
                    $destination = $style->buildUri($image_uri);
                    $style->createDerivative($image_uri, $destination);
                }
            }
        }
    }
}

function oab_backoffice_menu_link_submit(&$form, FormStateInterface $form_state) {
    $values = $form_state->getValues();
    $link_target = array();
    $link_icon = array();
    $link_classtag = array();

    if (isset($values['link_target'])
        && !empty($values['link_target'])) {
        $link_target = trim($values['link_target']);
    }

    if (isset($values['link_icon'])
        && !empty($values['link_icon'])) {
        $link_icon = trim($values['link_icon']);
    }

    if (isset($values['link_classtag'])
        && !empty($values['link_classtag'])) {
        $link_classtag = trim($values['link_classtag']);
    }

    $menu_link_entity = _oab_backoffice_get_menu_link_entity_from_form_state($form_state);
    $options = $menu_link_entity->link->first()->options;

    $changed = FALSE;
    if (empty($link_target)) {
        if (!empty($options['target'])) {
            unset($options['target']);
            $changed = TRUE;
        }
    }
    else {
        $options['target'] = $link_target ? '_blank' : '_self' ;
        $changed = TRUE;
    }

    if (empty($link_icon)) {
        if (!empty($options['icon'])) {
            unset($options['icon']);
            $changed = TRUE;
        }
    }
    else {
        $options['icon'] = $link_icon ;
        $changed = TRUE;
    }

    if (empty($link_classtag)) {
        if (!empty($options['classtag'])) {
            unset($options['classtag']);
            $changed = TRUE;
        }
    }
    else {
        $options['classtag'] = $link_classtag ;
        $changed = TRUE;
    }

    if ($changed) {
        $menu_link_entity->link->first()->options = $options;
        $menu_link_entity->save();
    }
}


function oab_backoffice_ckeditor_css_alter(array &$css, Editor $editor) {

    /** @var ExtensionPathResolver $service_path_resolver */
    $service_path_resolver = \Drupal::service('extension.path.resolver');

    $css[] = $service_path_resolver->getPath('theme', 'theme_boosted') . '/boosted/css/bootstrap-orange2015.min.css';
    $css[] = $service_path_resolver->getPath('theme', 'theme_boosted') . '/boosted/css/boosted2015.min.css';
    $css[] = $service_path_resolver->getPath('theme', 'theme_boosted') . '/css/font-awesome.min.css';
    $css[] = $service_path_resolver->getPath('theme', 'theme_boosted') . '/css/templating/background.css';
    $css[] = $service_path_resolver->getPath('theme', 'theme_boosted') . '/css/templating/buttons.css';
    $css[] = $service_path_resolver->getPath('theme', 'theme_boosted') . '/css/templating/shareIcons.css';
    $css[] = $service_path_resolver->getPath('theme', 'theme_boosted') . '/css/templating/textes.css';
    $css[] = $service_path_resolver->getPath('theme', 'theme_boosted') . '/css/templating/layout.css';
    $css[] = $service_path_resolver->getPath('theme', 'theme_boosted') . '/css/templating/nodes.css';
}


function oab_backoffice_menu_local_tasks_alter(&$data, $route_name) {
    if (isset($data['tabs'][0]) && is_array($data['tabs'][0])) {
        foreach ($data['tabs'][0] AS $key => $value) {
            if (isset($value['#link']['url'])) {
                $local_task_link_url = $value['#link']['url'];
                $route_name = $local_task_link_url->getRouteName();
                switch ($route_name) {
                    case 'system.admin_content':
                        $data['tabs'][0][$key]['#weight'] = 0;
                        break;
                    case 'view.dashboard.page_1':
                        $data['tabs'][0][$key]['#weight'] = 1;
                        break;
                    case 'view.media.media_page_list':
                        $data['tabs'][0][$key]['#weight'] = 2;
                        break;
                    case 'view.files.page_1':
                        $data['tabs'][0][$key]['#weight'] = 3;
                        break;
                    case 'comment.admin':
                        $data['tabs'][0][$key]['#weight'] = 4;
                        break;
                }
            }
        }
    }
}



function _oab_backoffice_get_menu_link_entity_from_form_state(FormStateInterface $form_state) {
    $build_info = $form_state->getBuildInfo();
    $menu_link_content_form = $build_info['callback_object'];
    return $menu_link_content_form->getEntity();
}

// ajout du type de rendu des champs "path" pour la traduction
function oab_backoffice_config_schema_info_alter(&$definitions) {
    $definitions['path']['form_element_class'] = '\Drupal\config_translation\FormElement\Textfield';
}


/**
 * Implements hook_library_info_alter().
 */
function oab_backoffice_library_info_alter(&$libraries, $extension) {
    if ($extension == 'oab_backoffice' && isset($libraries['jira'])) {
        $jira_url = \Drupal::config('block.block.jirareportblock')->get('settings');
        if (isset($jira_url['jira_report_code'])) {
            $libraries['jira']['js'] = [$jira_url['jira_report_code'] => array('external' => true)];
        }
    }
}




/*
 function oab_backoffice_query_alter(Drupal\Core\Database\Query\AlterableInterface $query) {

  $node = \Drupal::routeMatch();
  $user = \Drupal::currentUser();
  if ($node->getRouteName() == 'comment.admin' && $query->hasTag('entity_query_comment') && in_array("blogger", $user->getRoles())) {
    $query->condition('comment_field_data.uid', $user->id());
  }

}
*/

/**
 * Altération du formulairede mise en place des redirections
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function oab_backoffice_form_redirect_redirect_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    //Pour ajouter le / après l'url et avant le champ source de la redirection
    // RUBYPORTAILOBS-2753 "Ajout d'un / avant le champs path dans les redirections"
    if (isset($form['redirect_source']['widget'][0]['path']['#field_prefix'])) {
        $form['redirect_source']['widget'][0]['path']['#field_prefix'] = $form['redirect_source']['widget'][0]['path']['#field_prefix'].'/';
    }
}


function oab_backoffice_entity_embed_alter(&$build, $entity, &$context) {
    if (isset($build['#attributes']['data-align']) && $build['#attributes']['data-align'] == 'center') {
        $build['#attributes']['class'][] = 'text-align-center';
    }
}



/**
 * Implements hook_views_data_alter().
 */
function oab_backoffice_views_data_alter(array &$data) {
    /*$data['node']['node_month'] = array(
        'title' => t('Node month'),
        'field' => array(
            'title' => t('Node month'),
            'help' => t('Flags a specific node month.'),
            'id' => 'node_month',
        ),
    );*/
    $data['node_field_data']['node_month'] = array(
        'title' => t('Node Month filter'),
        'filter' => array(
            'title' => t('Node month filter'),
            'help' => t('Provides a custom filter for nodes by the month of creation.'),
            'field' => 'created',
            'id' => 'node_month'
        ),
    );
    $data['node_field_data']['node_year'] = array(
        'title' => t('Node Year filter'),
        'filter' => array(
            'title' => t('Node year filter'),
            'help' => t('Provides a custom filter for nodes by the year of creation.'),
            'field' => 'created',
            'id' => 'node_year'
        ),
    );
}


/**
 * Implements hook_views_post_render().
 */
function oab_backoffice_views_post_render(Drupal\views\ViewExecutable $view) {

  /**
   * Modification de l'affichage des remontées pour l'autocomplete des rebonds
   * Ajout du type de contenu et du NID
   */
  if ($view->id() == 'rebond_entity_reference') {
    foreach ($view->result as $i => $result) {
      #On recupère les données nécessaires
      $node_type = $result->_entity->get('type')->entity->label();
      $node_id = $result->_entity->id();
      $node_label =  $result->_entity->getTitle();

      #On set la nouvelle valeur
      $view->result[$i]->_entity->get('title')->setValue(array(0=>"$node_label ($node_type : $node_id)"));
    }
  }

    if ($view->id() == 'product_autocomplete') {
        foreach ($view->result as $i => $result) {
            #On recupère les données nécessaires
            $node_lang = $result->_entity->language()->getName();
            $node_label =  $result->_entity->getTitle();
            $langcode = strtoupper(substr($node_lang, 0, 2));
            #On set la nouvelle valeur
           $view->result[$i]->_entity->get('title')->setValue(array(0=>"$node_label ($langcode)"));
        }
    }
}

/**
 * Implements hook_views_pre_render().
 */
function oab_backoffice_views_pre_render(Drupal\views\ViewExecutable $view) {

    if ($view->id() == 'content') {
      foreach ($view->result as $i => $result) {
            # On recupère les données nécessaires
         $node_type = $result->_entity->get('type')->entity->id();
          if ($node_type == 'product') {
            $node_label =  $result->_entity->getTitle();
            $node_axiome_data =  $result->_entity->get('field_axiome_data')->getValue();
            if (isset($node_axiome_data[0]['value'])) {
              $data = unserialize($node_axiome_data[0]['value']);
              if (isset($data['Attributes']['nom_offre_commerciale']) && $data['Attributes']['nom_offre_commerciale'] != '') {
                $offre_commerciale = $data['Attributes']['nom_offre_commerciale'];
                # On set la nouvelle valeur
                $view->result[$i]->_entity->get('title')->setValue(array(0=>"$offre_commerciale ($node_label)"));
              }
            }
          }

          if (isset($result->workbench_revision_tracker_revision_id)
            && $result->workbench_revision_tracker_revision_id != 0
            && $result->workbench_revision_tracker_revision_id !== null) {

            #kint($result->workbench_revision_tracker_revision_id);

            $ma_revision = node_revision_load($result->workbench_revision_tracker_revision_id);
            if ($ma_revision !== null) {
                $moderation_state = $ma_revision->get('moderation_state')->getValue();
                #Obligé de load le ModerationState complet, il n'y est pas dans l'objet de la revision.....
                $moderation_state_object = ModerationState::load($moderation_state[0]['target_id']);
                $result->workbench_revision_tracker_revision_id = $moderation_state_object->get('label');
            }
          }
      }
    }
}

function oab_backoffice_transliteration_overrides_alter(&$overrides, $langcode) {
    if ($langcode == 'ru') {
        // changements demandés par Alexandra (majuscules et minuscules)
        // caractère ч ӵ => ch
        $overrides[0x0447] = $overrides[0x0427] = $overrides[0x04F4] = $overrides[0x04F5] = 'ch';
        // caractère я => ya
        $overrides[0x042F] = $overrides[0x044F] = 'ya';
        // caractère ж ӂ ӝ => zh
        $overrides[0x04C1] = $overrides[0x04C2] = $overrides[0x0416] = $overrides[0x0436] = $overrides[0x04DC] = $overrides[0x04DD] = 'zh';
        // caractères Ё, ё => e
        $overrides[0x0401] = $overrides[0x0451] = "e";
        // caractères Й, й => i
        $overrides[0x0419] = $overrides[0x0439] = "i";
        // caractères Х, х => kh
        $overrides[0x0425] = $overrides[0x0445] = "kh";
        // caractères Ц, ц => ts
        $overrides[0x0426] = $overrides[0x0446] = "ts";
        // caractères Ш, ш => sh
        $overrides[0x0428] = $overrides[0x0448] = "sh";
        // caractères Щ, щ => sch
        $overrides[0x0429] = $overrides[0x0449] = "sch";
        // caractères Ы, ы, Ӹ, ӹ => i
        $overrides[0x042B] = $overrides[0x044B] = $overrides[0x04F8] = $overrides[0x04F9] = "i";
        // caractères Э, э, Ӭ, ӭ => e
        $overrides[0x042D] = $overrides[0x044D] = $overrides[0x04EC] = $overrides[0x04ED] = "e";
        // caractères Ю, ю => yu
        $overrides[0x042E] = $overrides[0x044E] = "yu";
    }
}

/**
 * Implements hook_cron().
 * Suppression des resultats des webforms de plus d'un an
 */
function oab_backoffice_cron() {
   // gdpr_hook_cron();
}

/**
 * fonction qui retournent les valeurs disponibles pour le choix de la couleur du block Rebond Wysiwyg
 */
function oab_backoffice_paragraph_rebond_wysiwyg_allowed_values(
    FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable = TRUE) {
  return [
    "#f60"        => "Orange",
    "#fff"        => "White",
    "#000"        => "Black",
    "#55bc87"     => "Green",
    "#a786d5"     => "Purple",
    "#4bb4e6"     => "Blue",
    "#ffd200"     => "Yellow",
    "#ffb4e6"     => "Pink",
    "#595959"     => "Grey",
    "#8F8C87"     => "Dark grey",
    "#58595b"     =>"Darker grey",
    "#333333"     => "Grey black",
  ];
}


/**
 * Ajout de vérification lors de la création d'un produit DVI
 *  Si l'utilisateur à coché la case "Produit DVI", alors il faut :
 *      - qu'il ait selectionné "Produits DVI" dans la taxo Subhome (rubrique)
 *      - qu'il ait selectionné au moins un element dans la taxo Market Segment DVI
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormState $form_state
 */
function oab_backoffice_check_dvi_product_form_validate(array $form, Drupal\Core\Form\FormState &$form_state) {

  ##Je commence par recupérer les valeurs rentrées par l'user
  $user_values = $form_state->getUserInput();

  if (isset($user_values['langcode'][0]['value'])) {
    $content_language = $user_values['langcode'][0]['value'];
  } else {
    $content_language = null;
  }

  ## Si l'utilisateur a coché "Produit DVI", on effectue des vérifications supplémentaires
  if (isset($user_values[DviHelper::FIELD_IS_DVI_PRODUCT_NAME])
    && $user_values[DviHelper::FIELD_IS_DVI_PRODUCT_NAME] == "1") {


    #Petite gestion pour la langue, pour afficher le bon element....
    $node = $form_state->getFormObject()->getEntity();
    $langcode = $node->langcode->value;

    ##Si la lang n'est pas fr ou en, je met un message d'erreur et je quitte
    if ($langcode != "en" && $langcode != "fr") {
      $form_state->setErrorByName(DviHelper::FIELD_IS_DVI_PRODUCT_NAME,
        t("DVI product is not available in your language. Please check \"No\" at DVI Product to process"));
      return;
    }


    ## 1. Il faut que l'utilisateur ait selectionné la subhome "Produits DVI"

    ##Je recupère les éléments selectionnés dans la taxo Subhome (false si le field n'existe pas..)
    $field_taxo_subhome = isset($user_values[DviHelper::FIELD_SUBHOME_NAME])
      ? $user_values[DviHelper::FIELD_SUBHOME_NAME]
      : false;

    $is_tagged_dvi = false;                    ##Pour connaitre le résultat
    $taxo_subhome_tid = DviHelper::getProductDviSubhomeTid($content_language);  ##Je recupère le tid de la taxo ProductDvi
    ##translation faite toute seule par la fonction

    ##Je boucle sur tous les éléments selectionnés
    if (is_array($field_taxo_subhome)) {
      foreach ($field_taxo_subhome as $element) {

        ##Si un des elements est taggué, je passe à true
        if ($element == $taxo_subhome_tid) {
          $is_tagged_dvi = true;
        }
      }
    }

    ##Si on n'a pas trouvé la taxo Subhome Produit DVI, je fais remonter une erreur
    if (!$is_tagged_dvi) {

      ##On remonte l'erreur
      $form_state->setErrorByName(DviHelper::FIELD_SUBHOME_NAME,
        t("Since you declare the product as DVI, you must select \"Products DVI\" as a subhome"));
    }

    ## 2. Il faut que l'utilisateur ait selectionné au moins un element dans Market Segment

    ##Je recupère la valeur rentrée pour la taxo DVI Market Segment
    $field_mstaco = isset($user_values[DviHelper::FIELD_DVI_MARKET_SEGMENT_NAME])
      ? $user_values[DviHelper::FIELD_DVI_MARKET_SEGMENT_NAME]
      : false;

    ##Si on ne recup pas d'array, ou si l'array est vide (ie. rien n'a ete selectionné)
    ## je remonte un message d'erreur
    if (!is_array($field_mstaco) || (is_array($field_mstaco) && count($field_mstaco) == 0)) {
      $form_state->setErrorByName(DviHelper::FIELD_DVI_MARKET_SEGMENT_NAME,
        t("Since you declare the product as DVI, you need to select at least one element of the DVI Market Segment taxonomy"));
    }
  }
}


/**
 * Implements hook_pathauto_alias_alter().
 */
function oab_backoffice_pathauto_alias_alter(&$alias, array &$context) {

    ##Modification de l'alias créé lors de la creation d'un produit DVI
    ## (un produit DVI est un contenu de type produit, mais l'URL diffère)
    if (isset($context['bundle']) && $context['bundle'] == 'product'
        && isset($context['op']) && $context['op'] == "insert"
        && isset($context['data']['node'])
    ) {
        ##Recuperation du produit
        $node = $context['data']['node'];

        ##je recupère la valeur contenue dans l'element IsDviProduct
        $is_dvi_array = $node->get(DviHelper::FIELD_IS_DVI_PRODUCT_NAME)->getValue();
        if (is_array($is_dvi_array) && count($is_dvi_array) > 0) {
            $is_dvi_value = $is_dvi_array[0]['value'];

            #Si on a un produit DVI
            if ($is_dvi_value == "1") {

                ##Je sépare l'alias pré-créé par le système
                $alias_parts = explode('/', $alias);

                ##Si le premier element du tableau est un string vide, je le supprime
                ## (très probable que l'URL commence par "/" et dans ce cas, PHP ajoute un string vide au debut)
                if (isset($alias_parts[0]) && $alias_parts[0] == "") {
                    array_shift($alias_parts);
                }

                #j'ajoute en début la partie de l'URL spécifique à DVI
                array_unshift($alias_parts, DviHelper::DVI_PRODUCT_URL);

                ##En bouclant sur tous les éléments, je recrée l'alias
                $new_alias = "";
                foreach ($alias_parts as $part) {
                    $new_alias .= "/$part";
                }

                ## Puis je set l'alias avec le mien
                $alias = $new_alias;
            }
        }
    }

}

/**
 * Implements hook_theme().
 */
function oab_backoffice_theme($existing, $type, $theme, $path) {
    return [
        'oab_export_file_list__ending_page'  => [
            'variables' => [
                "file_url"      => NULL,
                "origin_url"    => NULL
            ],
            'template'  => 'OabExportFileList/oab-export-file-list--ending-page'
        ],
    ];
}

/**
 *  Implements callback form_user_pass_form_validate
 */

function _oab_backoffice_form_user_pass_form_validate(&$form, FormStateInterface $form_state) {

    if ($form_state->getError($form['name']) !== null) {
      $form_state->clearErrors();
      $form_state->setErrorByName('name', t(' Further instructions have been sent to your email address.'));
    }

}
