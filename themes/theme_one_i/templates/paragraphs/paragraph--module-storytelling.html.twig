{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  'storytelling double-color',
]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      <div class="site-width w-100 my-0">
        <div class="container-fluid h-100">
          <div class="row h-100">
            <div class="title-panel sticky-top col-12 col-md-5 py-2 py-md-5">
                <div class="d-flex flex-column">
                  <h2 class="h1">{{ content.field_title }}</h2>
                  <div class="lead">{{ content.field_highlight }}</div>
                  <div class="d-none d-md-block">
                    {% if content.field_story_parts['#items']|length > 1 %}
                      <ul class="item-list list-unstyled storytelling-list row">
                        {% for item in content.field_story_parts['#items'] %}
                          <li class="col-12">
                              <div data-story-id="{{ item.target_id }}" class="items-list-item {% if loop.first %} active {% endif %}">
                                <div class="item-icon icon-arrow-next {% if not loop.first %} d-none {% endif %}" aria-hidden="true"></div>
                                <div class="item-container no-border-bottom">
                                  <span class="item-text">
                                     {{ content.field_story_parts[loop.index0]['#paragraph'].field_title.value }}
                                  </span>
                                </div>
                              </div>
                          </li>
                        {% endfor %}
                      </ul>
                    {% endif %}
                  </div>
              </div>
            </div>
            <div class="story-panel col-12 col-md-7">
                {{ content.field_story_parts }}
            </div>
          </div>
        </div>
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %}
