
# DEFINE DEV SPECIFIC VARIABLES AND JBS
stages:          # List of stages for jobs, and their order of execution
#  - prepare
#  - build_drupal
  - build_image
#  - push

## Recupère les mdp stockés dans le Vault
#Vault:
#  stage: prepare
#  image: vault
#  script:
#    # Load Orange G2 certificates
#    #- update-ca-certificates
#
#    # Vault variables
#    #- export VAULT_TOKEN="$(vault write -field=token auth/git-oab/login role=namespace-$VAULT_PROJECT jwt=$CI_JOB_JWT)"
#    #- export MY_VAULT_SECRET="$(vault kv get -field=$CF_USERNAME /prj/$VAULT_PROJECT/deploy_cloundfoundry)"
#    - echo "test" >> vault.env
#  artifacts:
#    reports:
#      dotenv: vault.env
#    expire_in: 1 hour

# Création d'un dossier spécifique et copie des fichiers nécessaires au build
#Prepare Drupal:
#  stage: prepare
#  script:
#    - mkdir build
#    - cp -r modules build/
#    - cp -r patches build/
#    - cp -r themes build/
#    - cp -r sites build/
#    - cp composer.* build/
#    - cp load.environment.php build/
#  artifacts:
#    paths:
#      - build
#    expire_in: 1 hour
#
#
#Build Drupal:
#  stage: build_drupal
#  image: php:8.0
#  dependencies:
#    - Prepare Drupal
#  before_script:
#    ## Install Composer
#    - apt-get update
#    - apt-get install -y git zip unzip
#    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
#    - php composer-setup.php
#    - php -r "unlink('composer-setup.php');"
#    - apt-get install -y --no-install-recommends libmagickwand-dev imagemagick > /dev/null
#    - pecl install imagick > /dev/null
#    - docker-php-ext-enable imagick > /dev/null
#    - docker-php-ext-configure gd --prefix=/usr --with-jpeg --with-freetype > /dev/null
#    - docker-php-ext-install gd > /dev/null
#    - docker-php-ext-enable gd > /dev/null
#  script:
#    - cd build
#    - php ../composer.phar install --no-dev
#  after_script:
#    ## Clean Up Repo
#    - rm composer.phar
#    - cd build
#    - ls -la sites/
#    - ls -la sites/default
#    - rm -r patches INSTALL.txt .ht.router.php composer.* .eslint* .csslintrc web.config
#  artifacts:
#    paths:
#      - build
#    expire_in: 1 hour

Build Image:
  stage: build_image
  image: docker:19.03.12
  variables:
#    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - name: docker:19.03.12-dind
      alias: docker
#  dependencies:
#    - Build Drupal
  before_script:
    - docker info
  script:
    - docker build -t php_tmp -f ci/.fe.d/Dockerfile .


#image:
#  docker:latest
#services:
#    - docker:dind
#stages:
#  - test
#  - push
#variables:
#  VAULT_VERSION: "1.6.2"
#  VAULT_OPTS: "-tls-skip-verify=true"
#  VAULT_ADDR: "https://vault-oab.si.fr.intraorange:8200"
#  VAULT_PATH: prj/ops-bdx/ci
#  ARTIFACTORY_DOCKER_REGISTRY: "multirepo.orangeapplicationsforbusiness.com:5002/ops_bdx"
#before_script:
#  - apk add -q jq  # Install vault
#  - wget "https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip"
#  - unzip "vault_${VAULT_VERSION}_linux_amd64.zip"
#  - d /usr/local/bin
#  - chmod +x /usr/local/bin/vault
#  - rm "vault_${VAULT_VERSION}_linux_amd64.zip"  # Vault login
#  - export VAULT_TOKEN=$(vault write $VAULT_OPTS -field=token auth/git-oab/login role=namespace-ops-bdx jwt=$CI_JOB_JWT)
#  - vault login $VAULT_OPTS $VAULT_TOKEN  # Retrieve Artifactory login/api key from Vault
#  - export ARTIFACTORY_USERNAME=$(vault read $VAULT_OPTS -format json -field=artifactory $VAULT_PATH | jq -r .login)
#  - export ARTIFACTORY_API_KEY=$(vault read $VAULT_OPTS -format json -field=artifactory $VAULT_PATH | jq -r .api_key)  # Docker
#  - docker login -u $ARTIFACTORY_USERNAME -p $ARTIFACTORY_API_KEY $ARTIFACTORY_DOCKER_REGISTRY -
#  - >    docker build --no-cache    -f Dockerfile    -t "postfix:${CI_COMMIT_TAG}" .
#  - docker images "postfix:${CI_COMMIT_TAG}"
#  - docker tag "postfix:${CI_COMMIT_TAG}" "${ARTIFACTORY_DOCKER_REGISTRY}/postfix:${CI_COMMIT_TAG}" # job
#templlates.test_build: &test_build
#  stage: test
#  script:
#    - echo "Build seems to pass ... well done ;)"
#  tags:
#    - image_build
#  only:
#    - merge_requests
#
#build_push:
#  stage: push
#  script:
#    - docker push "${ARTIFACTORY_DOCKER_REGISTRY}/postfix:${CI_COMMIT_TAG}"
#  tags:
#    - image_build
#  only:
#    - tags
#    when: manual

