
stages:          # List of stages for jobs, and their order of execution
  - prepare
  - build_drupal
  - build_image


variables:
  COMPTE_PROJET_DEV: $COMPTE_PROJET_DEV
  COMPTE_PROJET_OPS: $COMPTE_PROJET_OPS
  ARTIFACTORY_DOCKER_REGISTRY: $ARTIFACTORY_DOCKER_REGISTRY
  ARTIFACTORY_RUBY_REGISTRY: $ARTIFACTORY_DOCKER_REGISTRY/$ARTIFACTORY_RUBY_IMAGE_PATH
  VAULT_ADDR: $VAULT_ADDR
  VAULT_PATH: /prj/portail-obs/compte-projet/
  VAULT_OPTS: "-tls-skip-verify=true"
  VAULT_NAMESPACE: "namespace-portail-obs"


# Création d'un dossier spécifique et copie des fichiers nécessaires au build
Prepare Drupal:
  stage: prepare
  script:
    - mkdir build
    - cp -r modules build/
    - cp -r patches build/
    - cp -r themes build/
    - cp -r sites build/
    - cp composer.* build/
    - cp load.environment.php build/
  artifacts:
    paths:
      - build
    expire_in: 1 hour

Vault:
  stage: prepare
  image: vault
  before_script:
    - apk add jq
  script:
    # Load Orange G2 certificates
    - update-ca-certificates

    # Vault variables
    - export VAULT_TOKEN="$(vault write -field=token auth/git-oab/login role=$VAULT_NAMESPACE jwt=$CI_JOB_JWT)"
    - export PASSWORD_OPS="$(vault kv get -field=apiKey $VAULT_PATH/OPS-BDX)"
    - echo "PASSWORD_OPS=$PASSWORD_OPS" >> vault.env
    - export LETSENCRYPT_NAME="$(vault kv get -field=LETSENCRYPT_NAME $VAULT_PATH/Devs)"
    - echo "LETSENCRYPT_NAME=$LETSENCRYPT_NAME" >> vault.env
    - export LETSENCRYPT_CONTENT="$(vault kv get -field=LETSENCRYPT_CONTENT $VAULT_PATH/Devs)"
    - echo "LETSENCRYPT_CONTENT=$LETSENCRYPT_CONTENT" >> vault.env
  artifacts:
    reports:
      dotenv: vault.env
    expire_in: 10 minutes

Build Drupal:
  stage: build_drupal
  image: php:8.0
  dependencies:
    - Prepare Drupal
  before_script:
    ## Install Composer
    - apt-get update
    - apt-get install -y git zip unzip
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - apt-get install -y --no-install-recommends libmagickwand-dev imagemagick > /dev/null
    - pecl install imagick > /dev/null
    - docker-php-ext-enable imagick > /dev/null
    - docker-php-ext-configure gd --prefix=/usr --with-jpeg --with-freetype > /dev/null
    - docker-php-ext-install gd > /dev/null
    - docker-php-ext-enable gd > /dev/null
  script:
    - cd build
    - php ../composer.phar install --no-dev
  after_script:
    ## Clean Up Repo
    - rm composer.phar
    - cd build
    - ls -la sites/
    - ls -la sites/default
    - rm -r patches INSTALL.txt .ht.router.php .eslint* .csslintrc web.config
  artifacts:
    paths:
      - build
    expire_in: 1 hour


Build Image:
  stage: build_image
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - Build Drupal
    - Vault
  before_script:
    - docker login -u $COMPTE_PROJET_OPS -p $PASSWORD_OPS $ARTIFACTORY_DOCKER_REGISTRY
  script:
    #Ajout du certificat Let's Encrypt pour la PRP
    - mkdir -p build/.well-know/acme-challenge
    - echo $LETSENCRYPT_CONTENT >> build/.well-know/acme-challenge/$LETSENCRYPT_NAME
    - docker build -t php_tmp -f ci/.fe.d/Dockerfile .
    - docker image tag php_tmp $ARTIFACTORY_RUBY_REGISTRY:$CI_COMMIT_TAG
    - docker images
    - docker image push $ARTIFACTORY_RUBY_REGISTRY:$CI_COMMIT_TAG
  tags:
    - image_build

