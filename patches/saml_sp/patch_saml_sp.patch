diff --git a/src/Form/IdpForm.php b/src/Form/IdpForm.php
--- a/src/Form/IdpForm.php
+++ b/src/Form/IdpForm.php
@@ -69,17 +69,19 @@
       '#maxlength' => 255,
     ];
 
-    $fields = ['mail' => t('Email')];
-    // TODO: Add extra fields to config.
-    /*
-    // @codingStandardsIgnoreStart
-    if (!empty($extra_fields)) {
-      foreach ($extra_fields as $value) {
-        $fields[$value] = $value;
-      }
+
+    /**
+     * Get Every NameId Format of values from Constants
+     */
+    $class = new \ReflectionClass(Constants::class);
+    $constants = array_filter($class->getConstants(), function($key) {
+      return str_starts_with($key, 'NAMEID_');
+    }, ARRAY_FILTER_USE_KEY);
+
+    foreach ($constants as $key => $values) {
+      // Make it beautiful
+      $fields[$key] = ucfirst(strtolower(str_replace(['NAMEID_', '_'], ['', ' '], $key)));
     }
-    // @codingStandardsIgnoreEnd
-    /**/
 
     $form['idp']['nameid_field'] = [
       '#type' => 'select',
@@ -296,12 +298,12 @@
     $status = $idp->save();
 
     if ($status) {
-      \Drupal::messenger()->addMessage($this->t('Saved the %label Identity Provider.', [
+      $this->messenger()->addMessage($this->t('Saved the %label Identity Provider.', [
         '%label' => $idp->label(),
       ]));
     }
     else {
-      \Drupal::messenger()->addMessage($this->t('The %label Identity Provider was not saved.', [
+      $this->messenger()->addMessage($this->t('The %label Identity Provider was not saved.', [
         '%label' => $idp->label(),
       ]));
     }

diff --git a/modules/saml_sp_drupal_login/saml_sp_drupal_login.module b/modules/saml_sp_drupal_login/saml_sp_drupal_login.module
--- a/modules/saml_sp_drupal_login/saml_sp_drupal_login.module
+++ b/modules/saml_sp_drupal_login/saml_sp_drupal_login.module
@@ -14,6 +14,7 @@
 use Drupal\saml_sp\Entity\Idp;
 use Drupal\user\Entity\User;
 use Drupal\user\UserInterface;
+use OneLogin\Saml2\Constants;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use OneLogin\Saml2\Response;
 
@@ -129,7 +130,7 @@
   // If email address is not used to identify user,
   // it has to be in the attributes.
   $email = '';
-  if ($idp->getNameIdField() != 'mail') {
+  if ($idp->getNameIdField() != Constants::NAMEID_EMAIL_ADDRESS) {
     // Try to get email from SAML response attributes.
     $mail_keys = ['mail', 'urn:oid:0.9.2342.19200300.100.1.3'];
     foreach ($mail_keys as $key) {
@@ -245,7 +246,7 @@
     if ($user->isBlocked() || !$user->isActive()) {
       \Drupal::messenger()->addError(t('The username %name has not been activated or is blocked.', ['%name' => $user->getAccountName()]));
       if (\Drupal::config('saml_sp.settings')->get('debug')) {
-        _saml_sp__debug('Account', $this);
+        _saml_sp__debug('Account', $user);
         _saml_sp__debug('Response NameId', $name_id);
       }
     }

diff --git a/src/Form/SamlSpConfig.php b/src/Form/SamlSpConfig.php
--- a/src/Form/SamlSpConfig.php
+++ b/src/Form/SamlSpConfig.php
@@ -442,8 +442,8 @@
         $metadata = $metadata[0];
       }
     }
-    catch (Exception $e) {
-      \Drupal::messenger()->addMessage($this->t('Attempt to create metadata failed: %message.', [
+    catch (\Exception $e) {
+      $this->messenger()->addMessage($this->t('Attempt to create metadata failed: %message.', [
         '%message' => $e->getMessage(),
       ]), MessengerInterface::TYPE_ERROR);
       $metadata = '';

diff --git a/src/Controller/SamlSPController.php b/src/Controller/SamlSPController.php
--- a/src/Controller/SamlSPController.php
+++ b/src/Controller/SamlSPController.php
@@ -37,7 +37,7 @@
    */
   public function consume() {
     if (!$this->validAuthenticationResponse()) {
-      return new RedirectResponse(Url::fromRoute('<front>')->toString());
+      return $this->redirect('<front>');
     }
 
     // The \OneLogin\Saml2\Response object uses the settings to verify the
@@ -53,7 +53,10 @@
           $certs = $idp->getX509Cert();
           if (!is_array($certs)) {
             $certs = [$certs];
-          }
+         }
+
+          unset($certs['actions']);
+
           $is_valid = FALSE;
           // Go through each cert and see if any provides a valid response.
           foreach ($certs as $cert) {
@@ -71,9 +74,9 @@
             $is_valid = $saml_response->isValid();
           }
         }
-        catch (Exception $e) {
+        catch (\Exception $e) {
           // @TODO: Inspect the Exceptions, and log a meaningful error condition.
-          \Drupal::logger('saml_sp')->error('Invalid response, %exception', ['%exception' => $e->message]);
+          $this->getLogger('saml_sp')->error('Invalid response, %exception', ['%exception' => $e->getMessage()]);
           $is_valid = FALSE;
         }
         // Remove the now-expired tracked request.
@@ -100,14 +103,14 @@
             case 'VersionMismatch':
               $message = t('SAML VersionMismatch between @idp_name and @site_name. Please try again later.', [
                 '@idp_name' => $idp->label(),
-                '@site_name' => variable_get('site_name', 'Drupal'),
+                '@site_name' => $this->config('system.site')->get('name'),
               ]);
               break;
           }
           if (!empty($message)) {
-            \Drupal::messenger()->addMessage($message, MessengerInterface::TYPE_ERROR);
+            $this->messenger()->addError($message);
           }
-          \Drupal::logger('saml_sp')->error('Invalid response, @error: <pre>@response</pre>', [
+          $this->getLogger('saml_sp')->error('Invalid response, @error: <pre>@response</pre>', [
             '@error' => $error,
             '@response' => print_r($saml_response->response, TRUE),
           ]);
@@ -120,19 +123,19 @@
         // The callback *should* redirect the user to a valid page.
         // Provide a fail-safe just in case it doesn't.
         if (empty($result)) {
-          return new RedirectResponse(Url::fromRoute('user.page')->toString());
+          return $this->redirect('user.page');
         }
         else {
           return $result;
         }
       }
       else {
-        \Drupal::logger('saml_sp')->error('Request with inbound ID @id not found.', ['@id' => $inbound_id]);
+        $this->getLogger('saml_sp')->error('Request with inbound ID @id not found.', ['@id' => $inbound_id]);
       }
     }
     // Failover: redirect to the homepage.
-    \Drupal::logger('saml_sp')->warning('Failover: redirect to the homepage. No inbound ID or something.');
-    return new RedirectResponse(Url::fromRoute('<front>')->toString());
+    $this->getLogger('saml_sp')->warning('Failover: redirect to the homepage. No inbound ID or something.');
+    return $this->redirect('<front>');
   }
 
   /**

diff --git a//saml_sp.module b/saml_sp.module
--- a/saml_sp.module (revision 7eec77698b2b32f138d3094e603093860a725899)
+++ b/saml_sp.module (date 1660725040979)
@@ -152,7 +152,8 @@
   );
 
   // Tells the IdP to return the email address of the current user:
-  $settings['sp']['NameIDFormat'] = Constants::NAMEID_EMAIL_ADDRESS;
+  $settings['sp']['NameIDFormat'] = $idp->getNameIdField();
+
 
   // Add the contact information for the SP:
   $settings['contactPerson'] = [];
@@ -208,7 +209,7 @@
     'wantNameIdEncrypted'   => (bool) $config->get('security.wantNameIdEncrypted'),
     'signatureAlgorithm'    => $config->get('security.signatureAlgorithm'),
     'lowercaseUrlencoding'  => (bool) $config->get('security.lowercaseUrlencoding'),
-    'requestedAuthnContext' => empty($authnContexts) ? FALSE : $authnContexts,
+    'requestedAuthnContext' => false,
   ];
 
   $cert_location = $config->get('cert_location');
